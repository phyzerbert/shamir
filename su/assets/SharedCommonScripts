/* Minification failed. Returning unminified contents.
(10959,17-29): run-time error JS1300: Strict-mode does not allow assignment to undefined variables: canStartDrag
(10955,21-33): run-time error JS1300: Strict-mode does not allow assignment to undefined variables: canStartDrag
 */
(function () {
    'use strict';

    var isTouch;
    var deps = [];
    var isBanker = false;

    var divTouch = document.getElementById('divIsTouch');
   
    if (typeof (divTouch) != 'undefined' && divTouch != null) {
        isTouch = ((document.getElementById('divIsTouch').innerText || document.getElementById('divIsTouch').textContent) === 'True');
    }
    else // for mobile this div element is undefined
        isTouch = true;  
    
    if (!isTouch) {
        
        var hddisBankerFromMaster = document.getElementById('isBankerFromMaster').value;
        if (typeof (hddisBankerFromMaster) != 'undefined' && hddisBankerFromMaster != null) {
            isBanker = document.getElementById('isBankerFromMaster').value;
        }       

        if (isBanker=='False') {
            deps = ['IdleTimeoutModule', 'GSSModule'];
        }
        else {
            deps = ['IdleTimeoutModule'];            
        }
    }    

    angular.module("CommonModule", deps)
     .config(['$compileProvider', '$logProvider', '$provide', function ($compileProvider, $logProvider, $provide) {
         /*--Fix for IE8 Trim--*/
         if (typeof String.prototype.trim !== 'function') {
             String.prototype.trim = function () {
                 return this.replace(/^\s+|\s+$/g, '');
             }
         }

         var pageModeValue;
         if (document.getElementById('hiddPageMode') != null)
             pageModeValue = document.getElementById('hiddPageMode').value;

         if (pageModeValue != undefined) {

             //To Disable debug data on production mode - Angular 1.3 performance improvements
             //If wish to debug on Production mode add angular.reloadWithDebugInfo() on console window to enable debug mdoe
             if (pageModeValue.toLowerCase() === 'prod' || pageModeValue.toLowerCase() === 'uat' || pageModeValue.toLowerCase() === 'it') {
                 $compileProvider.debugInfoEnabled(false); // default is true
                 $logProvider.debugEnabled(false);
                 //Logging
                 $provide.decorator('$log', ['$delegate', function ($delegate) {
                     //Original methods
                     var origInfo = $delegate.info;
                     var origLog = $delegate.log;

                     //Override the default Info behavior
                     $delegate.info = function () {

                         if ($logProvider.debugEnabled())
                             origInfo.apply(null, arguments);
                     };

                     //Override the default log behavior    
                     $delegate.log = function () {

                         if ($logProvider.debugEnabled())
                             origLog.apply(null, arguments);
                     };

                     return $delegate;
                 }]);

             } else {
                 $compileProvider.debugInfoEnabled(true); // default is true
                 $logProvider.debugEnabled(true);

                 $provide.decorator('$log', ['$delegate', function ($delegate) {
                     var originals = {};
                     var methods = ['info', 'debug', 'warn', 'error'];

                     angular.forEach(methods, function (method) {
                         originals[method] = $delegate[method];
                         $delegate[method] = function () {
                             var timestamp = new Date().toString().substring(4, 24);

                             var args = [].slice.call(arguments);

                             if (method == 'error') {
                                 args[0] = [timestamp, ': ', 'Cleint Side Exception Occured,Details are below:', '\n'
                                 , args[0].stack].join('');
                             }
                             else {
                                 args[0] = [timestamp, ': ', args[0]].join('');
                             }

                             setTimeout(function () {
                                 originals[method].apply(null, args);
                             }, 500);
                         };
                     });

                     return $delegate;
                 }]);
             }

             //Exception Handling
             $provide.decorator("$exceptionHandler", ['$delegate', '$injector', function ($delegate, $injector) {
                 return function (exception, message) {
                     // vxchan3 - Prod Mode Logic temporarily commented out, Instead of logging Client exception 
                     //into Web server file system planning to log details into CCLogging.
                     if (pageModeValue.toLowerCase() === 'prod') {
                         //var $http = $injector.get("$http");

                         //var exceptionObject = {
                         //    "Exception": exception.message + "\n" + exception.stack,
                         //    "Message": message
                         //};

                         //var serviceUrl; var rootUrlLaunchRequest = ""; var aftokenValue = "";
                         //if (isTouch) {
                         //    if (document.getElementById('divRootOmniSiteUrlFromLayout') != null) {
                         //        rootUrlLaunchRequest = document.getElementById('divRootOmniSiteUrlFromLayout').innerText
                         //        || document.getElementById('divRootOmniSiteUrlFromLayout').textContent;
                         //    }
                         //    var mobileBaseUrl = document.getElementById('BaseUrlOmni').getAttribute("appbaseurl");
                         //    if (OmniDataUtil.getOmniData('MBLAfToken') != null) {
                         //        aftokenValue = "af(" + OmniDataUtil.getOmniData('MBLAfToken') + ")";
                         //    }
                         //    serviceUrl = mobileBaseUrl + rootUrlLaunchRequest + aftokenValue !== "" ? aftokenValue + "/" : '';
                         //}
                         //else {
                         //    serviceUrl = document.getElementById('divRootUrl').value;
                         //}

                         //serviceUrl = serviceUrl + "ClientException/ClientExceptionLog";
                         ////Fire and Forget Mechanism.
                         //$http({
                         //    method: 'POST',
                         //    url: serviceUrl,
                         //    data: exceptionObject
                         //});


                     }
                     else {
                         $delegate(exception, message);
                     }
                 };
             }]);
         }
     }])
        .run(['CommonService', '$http', function (commonService, $http) {
            var rootUrl;
          
            if (document.getElementById('divRootOmniSiteUrlFromLayout') != null)
                rootUrl = document.getElementById('divRootOmniSiteUrlFromLayout').innerText || document.getElementById('divRootOmniSiteUrlFromLayout').textContent;

            var appName;
            if (document.getElementById('hiddAppName') != null)
                appName = document.getElementById('hiddAppName').value;

            var deviceName;
            if (document.getElementById('hiddUXName') != null)
                deviceName = document.getElementById('hiddUXName').value;

            var pageMode;
            if (document.getElementById('hiddPageMode') != null)
                pageMode = document.getElementById('hiddPageMode').value;

            var isBankerValue;
            if (document.getElementById('isBankerFromMaster') != null)
                isBankerValue = document.getElementById('isBankerFromMaster').value.toLowerCase();

            commonService.setIsBankerFromMaster(isBankerValue);
            var prefix = "";
            if (appName != undefined) {
                if (appName.toLowerCase() == "mbl") {
                    prefix = "USBank_Mobile_" + deviceName + "_";
                    if (pageMode.toLowerCase() == "it" || pageMode.toLowerCase() == "uat") {
                        prefix = "Test_USBank_Mobile_" + deviceName + "_";
                    }
                } else if (appName.toLowerCase() == "fusion") {
                    prefix = "USBank_OLB_FUSION_";
                } else if (appName.toLowerCase() == "orion") {
                    prefix = "USBank_OLB_ORION_";
                } else if (appName.toLowerCase() == "olb") {
                    prefix = "USBank_OLB_";
                }
            }
            if (document.getElementById("hiddMboxPrefix") != null)
                document.getElementById("hiddMboxPrefix").value = prefix;

            if (commonService.getIsTouch() === "True") {
                if (document.getElementById('isMobilePacakging') != null) {
                    if (document.getElementById('isMobilePacakging').value.toLowerCase() === 'false') {
                        var rootUrlLaunchRequest = document.getElementById('divRootOmniSiteUrlFromLayout').innerText || document.getElementById('divRootOmniSiteUrlFromLayout').textContent;
                        var serviceUrl = rootUrlLaunchRequest + "LaunchRequest/GetLaunchRequest";
                        var data = {};
                        $http({
                            method: 'POST',
                            url: serviceUrl,
                            data: data
                        }).success(function (launchRequest) {
                            commonService.setMobileLaunchRequest(launchRequest);
                        }).error(function () {
                            //Include logic for error scenario
                        });
                    }
                }
            }

        }]);
})();
;
(function () {
    'use strict';

    angular
        .module('CommonModule')
        .config([
            '$httpProvider',
            function ($httpProvider) {
                var interceptor = ['dtxhrTracer',
                    function (dtxhrTracer) {
                        var service = {
                            'request': function (config) {
                                dtxhrTracer.enterXhr(config.url);
                                return config;

                            },
                            'response': function (response) {
                                dtxhrTracer.leaveXhr(response.config.url);
                                return response;
                            },
                            'responseError': function (rejection) {
                                dtxhrTracer.leaveXhr(rejection.config.url);
                                return rejection;
                            }

                        };
                        return service;
                    }
                ];
                $httpProvider.interceptors.push(interceptor);
            }
        ]).factory('dtxhrTracer', function () {

            var xhrHistList = [];
            var stripTimeStamp = function (str) {
                return str.split("?_=")[0];
            };
            var enterXhrAct = function (url) {
                var xhrHist = {
                    xhrAction: {},
                    url: ""
                };
                try {

                    if (typeof window.dT_ != 'undefined') {
                        xhrHist.url = url;
                        xhrHist.xhrAction = dynaTrace.enterXhrAction(url);
                        xhrHistList.push(xhrHist);
                    }
                } catch (e) { console.log("enterXHR exception : " + e); }
            };
            var leaveXhrAct = function (url) {
                for (var i = 0; i < xhrHistList.length; i++) {
                    if (xhrHistList[i].url == stripTimeStamp(url)) {
                        try {
                            if (typeof window.dT_ != 'undefined') {
                                dynaTrace.leaveXhrAction(xhrHistList[i].xhrAction);
                            }
                        } catch (e) { console.log("leaveXHR exception : " + e); }

                        xhrHistList.splice(i, 1);
                        break;
                    }
                }
            };
            return {
                enterXhr: enterXhrAct,
                leaveXhr: leaveXhrAct
            };

        }).factory('CommonService', [
            '$http', '$modal', 'CommonConstants', '$window', '$injector', function ($http, $modal, commonConstants, $window, $injector) {
                var mobileLaunchRequest;
                var isTouchValue;
                var isBankerFromMaster;
                var cmsdirectiveurl;
                var Idle;
                var commonolmmrturl;
                var stepUpToken;
                var otpToken;
                var countrylist;
                var statelist;
                var idshield_image_details = {
                    categoryid: "",
                    categoryname: "",
                    imageid: "",
                    phrasetxt: "",
                    imageurl: ""
                };
                var idshield_security_questions = [];
                var relatedCustomer = {};
                return {

                    getIdShiledImageDetails: function () {
                        return idshield_image_details;
                    },

                    setIdShiledImageDetails: function (value) {
                        idshield_image_details.categoryid = value.categoryid;
                        idshield_image_details.imageid = value.imageid;
                        idshield_image_details.phrasetxt = value.phrasetxt;
                        idshield_image_details.imageurl = value.imageurl;
                        idshield_image_details.categoryname = value.categoryname;
                    },
                    getIdShieldSecurityQuestions: function () {
                        return idshield_security_questions;
                    },

                    resetIdShieldSecurityQuestions: function () {
                        idshield_security_questions = [];
                    },

                    setIdShieldSecurityQuestions: function (IdShieldvalues) {
                        angular.forEach(IdShieldvalues, function (value, index) {
                            var idshield_security_question = {
                                questionsId: value.questionsId,
                                questionstext: value.questionstext,
                                answertext: value.answertext,
                                answerformat: value.answerformat,
                                isselected: value.isselected,
                                isinvalid: value.isinvalid
                            };
                            idshield_security_questions.push(idshield_security_question);
                        });
                    },
                    resetIdShiledImageDetails: function () {
                        idshield_image_details.categoryid = "";
                        idshield_image_details.imageid = "";
                        idshield_image_details.phrasetxt = "";
                        idshield_image_details.imageurl = "";
                        idshield_image_details.categoryname = "";
                    },

                    getCountrylist: function () {
                        return countrylist;
                    },
                    setCountrylist: function (value) {
                        countrylist = value;
                    },
                    getStatelist: function () {
                        return countrylist;
                    },
                    setRelatedCustomer: function (data) {
                        relatedCustomer = data;
                    },
                    getRelatedCustomer: function () {
                        return relatedCustomer;
                    },
                    //commonService.setStateslist(countryCode); to set data from any other file
                    //commonService.getStatelist(); to get data from any other file
                    setStateslist: function (value) {
                        statelist = [];
                        var States = countrylist.filter(function (country) {
                            if (country.CountryIsoCode == value) {
                                return country
                            }
                        })[0];
                        $scope.StateList = [];
                        vm.CustomerSearchRequestVm.State = "";
                        vm.CustomerSearchRequestVm.Country = "";
                        if (States) {
                            $scope.hasStates = States.HasState;

                            angular.forEach(States.StateList, function (stat, index) {
                                var state = {};
                                state.StateName = stat.Value;
                                state.StateIsoCode = stat.Key;
                                state.Id = index;
                                statelist.push(state);
                            });


                        }
                    },
                    getCommonOlmmRootUrl: function () {
                        return commonolmmrturl;
                    },
                    setCommonOlmmRootUrl: function (value) {
                        commonolmmrturl = value;
                    },

                    setStepUpToken: function (value) {
                        stepUpToken = value;
                    },
                    setOTPToken: function (value) {
                        otpToken = value;
                    },

                    result: function (method, url, inputData, headerData) {
                        if ((this.getIsTouch() === "False")) {
                            if (Idle === undefined) {
                                Idle = $injector.get('Idle');
                            }
                            Idle.watch();
                        }
                        if (!angular.isDefined(headerData))
                            headerData = {};

                        if (stepUpToken)
                            headerData[commonConstants.STEPUP_HEADER] = stepUpToken;

                        if (otpToken)
                            headerData[commonConstants.OTP_HEADER] = otpToken;

                        headerData["X-Requested-With"] = "XMLHttpRequest";

                        return $http({
                            method: method,
                            url: url,
                            data: inputData,
                            headers: headerData
                        });
                    },
                    getcmsDirectiveUrl: function () {
                        return cmsdirectiveurl;
                    },
                    setcmsDirectiveUrl: function (value) {
                        if (typeof (value) != 'undefined' && value != null) {
                            cmsdirectiveurl = value;
                        }
                        else {
                            cmsdirectiveurl = this.getAppRootUrl();
                        }
                    },
                    getAppRootUrl: function () {
                        var rootUrl = document.querySelector(commonConstants.ROOT_URL_DIV_TEXT).textContent
                            || document.querySelector(commonConstants.ROOT_URL_DIV_TEXT).innerText;
                        return rootUrl;
                    },
                    routeToError: function () {
                        var rootUrl = document.getElementById('divRootUrl').value;
                        window.location = rootUrl + 'BaseError/ErrorPage';
                    },
                    popupControllerAs: function (animation, templateUrl, modalInstanceController, controllerAsName, modalObj, modalObjData, backdrop, keyboard, size) {
                        return $modal.open({
                            animation: animation,
                            templateUrl: templateUrl,
                            controllerAs: controllerAsName,
                            controller: modalInstanceController,
                            backdrop: backdrop,
                            keyboard: keyboard,
                            size: size,
                            resolve: {
                                feesdata: function () {
                                    return modalObjData;
                                },
                                items: function () {
                                    return modalObjData;
                                }
                            }
                        });
                    },
                    getIsTouch: function () {
                        var isTouch = '';
                        var divTouch = document.getElementById('divIsTouch');

                        if (typeof (divTouch) != 'undefined' && divTouch != null) {
                            isTouch = (document.getElementById('divIsTouch').innerText || document.getElementById('divIsTouch').textContent);
                        }

                        return isTouch;
                    },
                    setIsTouch: function (value) {
                        isTouchValue = value;
                    },

                    getMobileLaunchRequest: function () {
                        return mobileLaunchRequest;
                    },
                    setMobileLaunchRequest: function (value) {
                        mobileLaunchRequest = value;
                    },

                    getIsBankerFromMaster: function () {
                        return isBankerFromMaster;
                    },
                    setIsBankerFromMaster: function (value) {
                        isBankerFromMaster = value;
                    },
                    bankerSignOff: function () {
                        var rootUrl = document.querySelector(commonConstants.ROOT_URL_DIV_TEXT).textContent || document.querySelector(commonConstants.ROOT_URL_DIV_TEXT).innerText;
                        var method = commonConstants.METHOD_TYPE_POST;
                        var url = rootUrl + commonConstants.VOYAGERSIGNOFFURL;
                        var headerData = commonConstants.HEADERDATA;
                        this.result(method, url, null, headerData)
                            .success(function (result) {
                                if (result != undefined) {
                                    if (result && result.toLowerCase() === commonConstants.TRUE) {
                                        // no logic for now. can add logic in future.
                                    } else {
                                        // no logic for now. can add logic in future.
                                    }
                                }
                            }).error(function () {

                            });
                        if (rootUrl && rootUrl.length > 2 && rootUrl.slice(1, 3) == "CM") {
                            url = rootUrl + 'BankerLogout/Index';
                            window.location = url;
                        }
                        else if (document.getElementById('hiddAppName') != undefined &&
                                document.getElementById('hiddAppName') != null &&
                                document.getElementById('hiddAppName').value.toLowerCase() === "omnitool")
                        {
                                url = '/OLS/EntitlementsBanker/FindCustomer';
                                window.location = url;
                        }
                        else {
                            $window.open('', '_self', '');
                            $window.close();
                        }
                    },
                    RedirectToCCAPWEB: function (formAttrVal, functionName, params, openInNewWindow, isBrokerageCall, isTrustCall) {
                        var Loader = OmniDataUtil.getOmniData("Loader");
                        event.stopPropagation();
                        $("#header_sendmoneyomni").hide();
                        if (Loader) {
                            Loader.showLoader();
                        }
                        $('.iframeholder').html('');
                        $('.iframeholder')
                            .append(
                            '<iframe id="cmsiframecontent" width="100%" height="100%" border="0" scrolling="yes" horizontalscrolling="no" verticalscrolling="yes" allowTransparency="true" style="background-color:white" sandbox="allow-top-navigation"> </iframe>');
                        var frmCCAPUrl = '';
                        for (var j = 0; j < formAttrVal.length; j++) { // fix me
                            if (formAttrVal[j].name == 'CCAPUrl') {
                                frmCCAPUrl = formAttrVal[j].value;
                                break;
                            }
                        }
                        $('.modaloverlay.iframe').removeClass('closer');
                        $('.iframe-down').hide();
                        $('#cmsiframecontent').attr('target', '_self');
                        $("#overlaycontent-cmscontentinscreen").css("display", "block");
                        $("#BaseUrlOmni").css("display", "none");
                        $(".close-icon .close-i").css("display", "none");
                        // Loader.showLoader();
                        var myForm = document.createElement('form');
                        myForm.method = "post";
                        myForm.name = "SSOFORM";
                        myForm.target = '_self';
                        myForm.id = 'SSOFORM';
                        myForm.action = frmCCAPUrl;
                        var myInput = '';

                        for (var f = 0; f < formAttrVal.length; f++) {
                            myInput = document.createElement('input');
                            myInput.setAttribute('type', 'hidden');
                            myInput.setAttribute('name', formAttrVal[f].name);
                            myInput.setAttribute('value', formAttrVal[f].value);
                            myForm.appendChild(myInput);
                        }

                        myForm.appendChild(myInput);
                        var iframeId = $('#cmsiframecontent').contents().find('body');
                        iframeId.html(myForm);
                        console.log('>>>>>>>' + iframeId.find('form#SSOFORM').length);
                        myForm.submit();
                        $("#cmsiframecontent").load(function () {
                            Loader.hideLoader();
                            var deviceHeight = $(window).height();
                            $('#cmsiframecontent').css("height", "auto");
                            var contentHeight = $('#cmsiframecontent').height();
                            if (contentHeight < deviceHeight)
                                contentHeight = deviceHeight;
                            $('#cmsiframecontent').css({
                                'min-height': contentHeight,
                                'backgroundColor': 'transparent'
                            });
                            var frmNameX = document.getElementById('cmsiframecontent');
                            var frmWin = frmNameX.contentWindow;
                            var frmWinObjY = frmWin.document;
                            var frmUrl = frmWinObjY.location.href;
                            if (frmUrl.match(/MyProfile/g) != null) {
                                OmniDataUtil.setOmniData("isMyProfile", "true");
                            }
                            $(".iframeholder").css({ "height": contentHeight, "background-color": "#0c2074" });
                            $("#overlaycontent-cmscontentinscreen").css("padding-top", 0);

                            /* Closing the iframe */
                            switch (functionName) {
                                case 'MyProfile':
                                    if (frmUrl.match(/return.asp/g) != null) {
                                        $("#BaseUrlOmni").css("display", "block");
                                        $("#overlaycontent-cmscontentinscreen").css("display", "none");
                                        OmniDataUtil.setOmniData("isFromMyProfile", "true");
                                        $("#header_sendmoneyomni").show();
                                        var flag = OmniDataUtil.getOmniData("isMyProfile");
                                        if (flag == "true") {
                                            OmniDataUtil.setOmniData("isMyProfile", "false");
                                            var isFromUpdateRegister = OmniDataUtil.getOmniData("selectedTransactionType");
                                            var $state = $injector.get('$state');

                                            if (isFromUpdateRegister == "updateregister")
                                                $state.go('UpdateRegister');
                                            else
                                                $state.go('SelectAccount');
                                        }
                                    }
                                    break;

                            }
                        });


                    },

                    RedirectToOLBCCAPWEB: function (ccapUrls, functionName, parameters, openInNewWindow) {
                        var form = document.createElement("form");
                        var functionToCall = functionName;
                        var ccaPurl = ccapUrls.ccapUrl;
                        var returnUrl = ccapUrls.returnUrl;
                        var keepAlive = ccapUrls.keepAliveUrl;
                        var logoutUrl = ccapUrls.logoutUrl;
                        var timeout = "450";
                        var selectedToken = parameters.selectedToken;

                        form.setAttribute("method", "Post");
                        form.setAttribute("action", ccaPurl);

                        var hdFunctionName = document.createElement("input");
                        hdFunctionName.setAttribute("type", "hidden");
                        hdFunctionName.setAttribute("name", "functionname");//TODO - Change to functionname once mobile testing is done
                        hdFunctionName.setAttribute("value", functionToCall);

                        var hdReturnurl = document.createElement("input");
                        hdReturnurl.setAttribute("type", "hidden");
                        hdReturnurl.setAttribute("name", "ReturnUrl");
                        hdReturnurl.setAttribute("value", returnUrl);

                        var hdKeepaliveurl = document.createElement("input");
                        hdKeepaliveurl.setAttribute("type", "hidden");
                        hdKeepaliveurl.setAttribute("name", "KeepAliveUrl");
                        hdKeepaliveurl.setAttribute("value", keepAlive);

                        var hdTimeout = document.createElement("input");
                        hdTimeout.setAttribute("type", "hidden");
                        hdTimeout.setAttribute("name", "Timeout");
                        hdTimeout.setAttribute("value", timeout);

                        var hdLogouturl = document.createElement("input");
                        hdLogouturl.setAttribute("type", "hidden");
                        hdLogouturl.setAttribute("name", "LogoutUrl");
                        hdLogouturl.setAttribute("value", logoutUrl);

                        var hdSelectedToken = document.createElement("input");
                        hdSelectedToken.setAttribute("type", "hidden");
                        hdSelectedToken.setAttribute("name", "SelectedToken");
                        hdSelectedToken.setAttribute("value", selectedToken);

                        form.appendChild(hdFunctionName);
                        form.appendChild(hdReturnurl);
                        form.appendChild(hdKeepaliveurl);
                        form.appendChild(hdTimeout);
                        form.appendChild(hdLogouturl);
                        form.appendChild(hdSelectedToken);

                        if (openInNewWindow != undefined && openInNewWindow === true)
                            form.target = "_blank";
                        document.body.appendChild(form);
                        form.submit();
                        document.body.removeChild(form);
                    },

                    navigateBackToMobileReturnUrl: function (returnUrl, elementId) {
                        if (!returnUrl)
                            returnUrl = document.getElementById(elementId).value;
                        var form = document.createElement("form");
                        form.setAttribute("action", returnUrl);
                        form.setAttribute("method", "Post");
                        document.body.appendChild(form);
                        form.submit();
                        document.body.removeChild(form);
                    },

                    //Destroy the angular scope when leaves from Omni Page
                    destroyOmniScope: function () {
                        OmniDataUtil.setOmniData("leaveOmni", "true");
                        if (OmniDataUtil.getOmniData('commonServiceObj') != null || OmniDataUtil.getOmniData('commonServiceObj') != undefined) {
                            OmniDataUtil.delOmniData('commonServiceObj');
                        }

                        var mainContentParent = document.getElementById('divOmniActivityContainer');
                        if (mainContentParent != null || mainContentParent != undefined) {
                            var mainContentChild = document.getElementById('divOmniActivitySection');

                            var $rootScope = $injector.get('$rootScope');

                            var scope = $rootScope.$$childHead;
                            while (scope) {
                                var nextScope = scope.$$nextSibling;
                                scope.$destroy();
                                scope = nextScope;
                            }

                            for (var prop in $rootScope) {
                                if (($rootScope[prop])
                                    && (prop.indexOf('$$') != 0)
                                    && (typeof ($rootScope[prop]) === 'object')
                                ) {
                                    $rootScope[prop] = null;
                                }
                            }
                            mainContentParent.removeChild(mainContentChild);
                        }
                    },
                    getTransmitUrl: function () {
                        var url = '';
                        if ((this.getIsTouch() === "False")) {
                            var divUrl = document.getElementById('divTransmitUrl');

                            if (typeof (divUrl) != 'undefined' && divUrl != null) {
                                url = (document.getElementById('divTransmitUrl').innerText || document.getElementById('divTransmitUrl').textContent);
                            }
                        }
                        return url;
                    },
                    getTransmitEasUrl: function () {
                        var url = '';
                        var divUrl = document.getElementById('divTransmitEasUrl');

                        if (typeof (divUrl) != 'undefined' && divUrl != null) {
                            url = (document.getElementById('divTransmitEasUrl').innerText || document.getElementById('divTransmitEasUrl').textContent);
                        }
                        return url;
                    },
                    getTransmitAppId: function () {
                        var appID = '';
                        var divAppID = document.getElementById('divTransmitApp');

                        if (typeof (divAppID) != 'undefined' && divAppID != null) {
                            appID = (document.getElementById('divTransmitApp').innerText || document.getElementById('divTransmitApp').textContent);
                        }
                        return appID;
                    },
                    getUserId: function () {
                        var userId = '';
                        var divUserId = document.getElementById('divUserId');

                        if (typeof (divUserId) != 'undefined' && divUserId != null) {
                            userId = (document.getElementById('divUserId').innerText || document.getElementById('divUserId').textContent);
                        }
                        return userId;
                    },
                    IsSharedAuthEnabled: function () {
                        var sharedAuthEnabled = false;
                        if ((this.getIsTouch() === "False")) {
                            var divSharedAuthEnabled = document.getElementById('divEnableSharedAuth');

                            if (typeof (divSharedAuthEnabled) != 'undefined' && divSharedAuthEnabled != null) {
                                sharedAuthEnabled = (document.getElementById('divEnableSharedAuth').innerText || document.getElementById('divUserId').textContent) === "True";
                            }
                        }
                        else if (typeof (OmniDataUtil) != 'undefined') {
                            sharedAuthEnabled = OmniDataUtil.getOmniData("EnableSharedAuth");
                        }
                        return sharedAuthEnabled;
                    },
                    showPlaceHolderStepup: function (policy, transactionid, successHandler, failureHandler) {

                        var userId = this.getUserId();
                        var appID = this.getTransmitAppId();

                        var params = {};
                        params.defaultauth = "idshield";
                        params.resumePlaceHolder = successHandler;
                        params.failed = failureHandler;
                        params.TransmitURL = this.getTransmitUrl();
                        params.username = userId;
                        params.TransmitAppID = appID;
                        params.TransmitPolicy = policy;
                        params.TransactionID = transactionid;
                        params.IDShieldBaseURL = this.getTransmitEasUrl();

                        angular.element(document.getElementById('sharedAuthID')).scope().showPlaceHolder(params);

                    },
                    showSharedAuthStepup: function (policy, transactionid, successHandler, failureHandler, additionalParams, cancelHandler) {
                        var transmitUtil = null;

                        if ((this.getIsTouch() === "True") && typeof (OmniDataUtil) != 'undefined') {
                            transmitUtil = OmniDataUtil.getOmniData("TransmitUtil");
                        }
                        //If TransmitUtil is supported
                        if (transmitUtil) {
                            transmitUtil.stepUPAuthentication(policy, transmitUtil.loginStatus.CHANGEAUTH_DEPOSITACCOUNT, successHandler, failureHandler, cancelHandler, additionalParams);
                        }
                        else {
                            var userId = this.getUserId();
                            var appID = this.getTransmitAppId();
                            var params = {};
                            params.success = successHandler;
                            params.failed = failureHandler;
                            params.TransmitURL = this.getTransmitUrl();
                            params.username = userId;
                            params.TransmitAppID = appID;
                            params.TransmitPolicy = policy;
                            params.TransactionID = transactionid;
                            params.IDShieldBaseURL = this.getTransmitEasUrl();
                            if (additionalParams) {
                                params.additionalParams = additionalParams;
                            }

                            angular.element(document.getElementById('sharedAuthID')).scope().showServiceModal(params);
                        }
                        return true;

                    },
                    //Redesign screen for IOS
                    setScreenSizeForIos: function () {
                        var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
                        var aspect = window.screen.width / window.screen.height;
                        if (iOS && aspect < 0.47) {
                            var body = document.getElementsByTagName("BODY")[0];
                            body.classList.add('usb_screenforios_overdriven');
                        }
                    }
                };
            }
        ]).factory('OpenModalService', [
            '$modal', function ($modal) {
                return {
                    popup: function (modalInstanceController, modalObj, backdrop) {
                        return $modal.open({
                            animation: false,
                            templateUrl: modalObj.templateUrl,
                            controller: modalInstanceController,
                            controllerAs: "vm",
                            backdrop: backdrop,
                            keyboard: true,
                            windowClass: modalObj.css,
                            resolve: {
                                modalObj: function () {
                                    return modalObj;
                                }
                            }
                        });
                    }
                };

            }
        ]).factory('ThirdPartySpeedBumpService', ['$rootScope', '$templateCache', 'OpenModalService', '$window',
            function ($rootScope, $templateCache, openModalService, $window) {

                var ThridPartyShowPop = ['$scope', '$modalInstance', function ($scope, $modalInstance) {
                    $scope.cont = function () {
                        if ($rootScope.url != null || $rootScope.url != '')
                            $modalInstance.close();
                        // $scope.cancel();
                        $window.open($rootScope.url, '_blank')
                    };

                    $scope.cancel = function () {
                        $modalInstance.close();
                    };
                }];
                $templateCache.put('thirdparty.html',
                    '<div id="SpeedBump" class="usb-module__modal">' +
                    '<div class="modal-header usb-content-paragraph--large modal-headerdisplay">' +
                    '<span></span>' +
                    '<span class="modal-header-close usb-icons-close2 usb-icons-close3" ng-click="cancel()"></span></div>' +
                    '<div class="modal-hr1px--dark-gray modal-hr1px-display"></div>' +
                    '<div class="modal-body">' +
                    '<div class="usb-heading3">Leaving U.S. Bank Website</div>' +
                    '<div class="usb-content-paragraph modal-content-margin modal-paragraph">' +
                    '<p>By selecting &ldquo;Continue&rdquo; you will be transferred to a third party website. U.S. Bank does not own ' +
                    'or control the website. U.S. Bank is not responsible for the content of, or products and services provided by, the third ' +
                    'party website. U.S. Bank doesn&rsquo;t guarantee the system availability or accuracy of information contained on the third ' +
                    'party website. This third party website doesn&rsquo;t operate under the U.S. Bank privacy and information security ' +
                    'policies and practices. Please consult the privacy and information security policy on the third party website if you have ' +
                    'any concerns or questions about the website or its content.</p>' +
                    '<p>Your Online Banking session will remain active for 15 minutes. After this time your session will automatically ' +
                    'expire and log you out if there has been no activity.</p><p>If you would like to return to Online Banking ' +
                    'and not go to this destination, select &ldquo;Cancel&rdquo;.</p>' +
                    '</div>' +
                    '</div>' +
                    '<div class="modal-footer">' +
                    '<div class="modal-margin-between-btn">' +
                    '<button class="usb-button--secondary" ng-click="cont()">Continue</button> ' +
                    '</div>' +
                    '<button class="usb-button--secondary" ng-click="cancel()">Cancel</button>' +
                    '</div>' +
                    '</div>');

                var thirdpartyModalObj = {};
                thirdpartyModalObj.templateUrl = "thirdparty.html";
                thirdpartyModalObj.css = "thirdPartySpeedBump";
                var OpenThirdPartyPopup = function (url) {
                    $rootScope.url = url;
                    openModalService.popup(ThridPartyShowPop, thirdpartyModalObj, "static");
                };
                return {
                    ThirdPartySpeedBump: OpenThirdPartyPopup
                };
            }]).factory('SiteCatService', function () {

                var SiteCatSwitchCode = function (PageName, EventName, DynamicVars) {
                    // s code object from adobe not working on the Chrome browser. Just a temporary fix the script error was suppressed here.
                    try {
                        s.clearContext();
                        s.clearVars();
                    }
                    catch (ex) { }

                    if (DynamicVars != null) {
                        for (var dynKey in DynamicVars) {
                            if (!DynamicVars.hasOwnProperty(dynKey)) {
                                //The current property is not a direct property of DynamicVars
                                continue;
                            }
                            Omniture.constants[PageName][EventName][dynKey] = DynamicVars[dynKey];
                            switch (dynKey) {
                                case "eVar48":
                                    s.eVar48 = DynamicVars[dynKey];
                                    break;
                            }
                        }
                    }                    

                    //reading the page level values
                    var prefix = Omniture.constants["OmniSitePrefix"];
                    cd.siteSection = Omniture.constants[PageName]["siteSection"];
                    cd.subSiteSection = Omniture.constants[PageName]["subSiteSection"];

                    //reading the page level values for Customer Dashboard
                    if (PageName == "Interstitial") {
                        s.prop1 = Omniture.constants["InterstitialsiteSection"];
                        s.prop2 = Omniture.constants["InterstitialsubSiteSection"];
                    }
                    
                    if (PageName == "zelleLanding") {
                        s.pageName = prefix + ":" + Omniture.constants[PageName]["siteSection"];
                    }
                    //reading the event level values
                    var SiteCatProperties = Omniture.constants[PageName][EventName];
                    for (var key in SiteCatProperties) {
                        if (!SiteCatProperties.hasOwnProperty(key)) {
                            //The current property is not a direct property of SiteCatProperties
                            continue;
                        }

                        switch (key) {
                            case "eventname":
                                    cd.currentPage = prefix + ":" + Omniture.constants[PageName]["pageMiddleSection"] + ":" + SiteCatProperties[key];
                                break;
                            case "prop53":
                                if (PageName == "AutoInvestment" && EventName == "PauseVideo"){
                                    s.prop53 = prefix + ":" + Omniture.constants[PageName]["pageMiddleSection"] + ":" + SiteCatProperties[key]
                                                 + Omniture.constants[PageName][EventName]["timestamp"];
                                }
                                else {
                                    s.prop53 = prefix + ":" + Omniture.constants[PageName]["pageMiddleSection"] + ":" + SiteCatProperties[key];
                                }
                                break;                            
                            case "prop13":
                                s.prop13 = prefix + ":" + Omniture.constants[PageName]["pageMiddleSection"] + ":" + SiteCatProperties[key];
                                break;
                            case "eVar8":
                                s.eVar8 = SiteCatProperties[key];
                                break;
                            case "prop8":
                                s.prop8 = SiteCatProperties[key];
                                break;
                            case "pageName":
                                if (PageName == "SimpleLoan" && EventName == "OnLoad") {
                                    s.pageName = prefix + ":" + Omniture.constants[PageName]["pageMiddleSection"];
                                }
                                else {
                                    s.pageName = prefix + ":" + Omniture.constants[PageName]["pageMiddleSection"] + ":" + SiteCatProperties[key];
                                }
                                break;
                            case "currentPage":
                                cd.currentPage = prefix + ":" + Omniture.constants[PageName]["pageMiddleSection"] + ":" + SiteCatProperties[key];
                                break;
                            case "prop1":
                                if (PageName == "zelleRequest") {
                                    s.prop1 = SiteCatProperties[key];
                                } else if (PageName == "AutoInvestment") {
                                    s.prop1 = SiteCatProperties[key];
                                }
                                else {
                                    s.prop1 = Omniture.constants[PageName]["siteSection"];
                                }
                                break;
                            case "prop2":
                                if (PageName == "enrollWithZelle") {
                                    s.prop2 = Omniture.constants[PageName]["subSiteSection"] + ":" + SiteCatProperties[key];
                                }
                                else if (PageName == "zelleRequest" || PageName == "zelleLanding")
                                {
                                    s.prop2 = SiteCatProperties[key];
                                } else if (PageName == "AutoInvestment")
                                {
                                    s.prop2 = SiteCatProperties[key];
                                }
                                else {
                                    s.prop2 = Omniture.constants[PageName]["subSiteSection"];                         
                                }
                                break;
                            case "events":
                                s.events = SiteCatProperties[key];
                                break;
                            case "eVar99":
                                s.eVar99 = Omniture.constants["projectIDPrefix"] + ":" + SiteCatProperties[key];
                                break;
                            case "prop67":
                                s.prop67 = SiteCatProperties[key];
                                break;
                            case "prop23":
                                s.prop23 = SiteCatProperties[key];
                                break;
                            case "prop43":
                                if (PageName == "zelleRequest") {
                                    s.prop43 = SiteCatProperties[key];
                                }
                                else {
                                    s.prop43 = prefix + ":" + SiteCatProperties[key];
                                }
                                break;
                            case "errorStatus":
                                if (PageName == "CardActivation" || PageName == "zelleRequest" || PageName == "zelleSplit" || PageName == "PendingRequestPopClose" || PageName == "PendingRequest") {
                                    cd.errorStatus = prefix + ":" + Omniture.constants[PageName]["pageMiddleSection"] + ":" + SiteCatProperties[key];
                                }
                                else {
                                    s.errorStatus = SiteCatProperties[key];
                                }
                                break;
                            case "linkTrackVars": 
                                if ((PageName == "AutoInvestment" && !s.linkTrackVars.includes(SiteCatProperties[key]))
                                     || PageName == "ManageExternalAccounts") {
                                    s.linkTrackVars = s.linkTrackVars + SiteCatProperties[key]
                                }
                                else if (PageName != "AutoInvestment") {
                                s.linkTrackVars = SiteCatProperties[key];
                                }
                                break;
                            case "eVar63":
                                if (PageName == "zelleRequest") {
                                    s.eVar63 = SiteCatProperties[key];
                                }
                                else
                                {
                                    cd["eVar63"] = SiteCatProperties[key];
                                }
                                break;
                            case "error":
                                    cd.errorStatus = prefix + ":" +Omniture.constants[PageName]["pageMiddleSection"]+ ":" +SiteCatProperties[key];                                    
                                break;
                            default:
                                cd[key] = SiteCatProperties[key];
                        }
                    }

                    if (PageName == "shared_access") {
                        cd.currentPage = cd.currentPage.replace("omni:", "");
                    }
                };
                var SiteCatT = function (PageName, EventName, DynamicVars) {
                    // s code object from adobe not working on the Chrome browser. Just a temporary fix the script error was suppressed here.
                    try {

                        SiteCatSwitchCode(PageName, EventName, DynamicVars);
                        s.t();
                        var reportingData = {
                            pageName: cd.currentPage,
                            lpId: s.eVar8
                        }
                        if (window.publisherFW) {
                            console.log("Debug :: calling window publisherFW :: module -> OLB :: pageName -> " + reportingData.pageName + " :: lpid -> " + reportingData.lpId);
                            window.publisherFW.publishEvent("pageView", reportingData); // call this function after the Data Layer Object $NBA
                        }
                    }
                    catch (ex) { }
                };

            var SiteCatTL = function (PageName, EventName, DynamicVars) {

                // s code object from adobe not working on the Chrome browser. Just a temporary fix the script error was suppressed here.
                try {
                    SiteCatSwitchCode(PageName, EventName, DynamicVars);
                }
                catch (e) { }
                // s code object from adobe not working on the Chrome browser. Just a temporary fix the script error was suppressed here.
                try {
                    if (PageName == "Interstitial") {
                            if (s.prop53 != undefined) {
                        s.linkTrackVars = s.linkTrackVars + ',prop53,contextData.uxNameForSiteCat,contextData.appNameForSiteCat';
                                if (s.events != undefined) {
                                    s.linkTrackVars = s.linkTrackVars + ', events';
                                    s.linkTrackEvents = 'event406';
                                    s.events = 'event406';
                                }
                                s.tl(this, 'o', s.prop53, 'navigate');
                            }
                            return;
                        }
                        else if (PageName == "LoginAssistanceResend" || PageName=="AugmentedBalanceBonus") {
                            s.linkTrackVars = s.linkTrackVars + ',prop53';
                            s.tl(this, 'o', s.prop53, null, 'navigate');
                            return;
                        }
                        else if (PageName == "CardActivation" || PageName == "zelleRequest" || PageName == "zelleActivity" || PageName == "zelleSplit" || PageName == "zelleSend" || PageName == "PendingRequestPopClose"  || PageName == "PendingRequest" || PageName=="ZelleDemoLink") {
                            if (Omniture.constants[PageName][EventName]["linkTrackVars"] != undefined) {
                                s.linkTrackVars = s.linkTrackVars + Omniture.constants[PageName][EventName]["linkTrackVars"];
                            }
                        else {
                            s.linkTrackVars = s.linkTrackVars + ',prop53';
                        }
                            s.tl(this, 'o', s.prop53, null, 'navigate');
                            return;
                        }
                        else if (PageName == "tranfers" && EventName == "WithholdFederalTaxOptionChanged") {
                            s.linkTrackVars = s.linkTrackVars + ',prop53';
                            s.prop53 = 'omni:transfers:ira distribution tax withhold federal tax option' + Omniture.constants[PageName][EventName]["selectedOption"];
                        }
                        else if (PageName == "tranfers" && EventName == "WithholdStateTaxOptionChanged") {
                            s.linkTrackVars = s.linkTrackVars + ',prop53';
                            s.prop53 = 'omni:transfers:ira distribution tax withhold state tax option' + Omniture.constants[PageName][EventName]["selectedOption"];
                        }
                        else if (PageName == "tranfers" && EventName == "SelectedWithholdTaxOption") {
                            s.linkTrackVars = s.linkTrackVars + ',prop53';
                            s.prop53 = 'omni:transfers:ira distribution tax withhold ' + Omniture.constants[PageName][EventName]["isFedOrState"];
                        }
                        else if (PageName == "tranfers" && EventName == "ReviewAndSubmitEditClicked") {
                            s.linkTrackVars = s.linkTrackVars + ',prop53';
                            s.prop53 = 'omni:transfers:ira distribution review Edit link';
                            s.tl(this, 'o', s.prop53, null, 'navigate');
                        }
                        else if (PageName == "tranfers" && EventName == "ReviewAndSubmitCancelClicked") {
                            s.linkTrackVars = s.linkTrackVars + ',prop53';
                            s.prop53 = 'omni:transfers:ira distribution review cancel link';
                            s.tl(this, 'o', s.prop53, null, 'navigate');
                        }
                    else if (PageName == "zelleLanding") {
                            s.linkTrackVars = s.linkTrackVars + ',events,prop53';
                        s.tl(this, 'o', s.prop53, null, 'navigate');
                            return;
                        }
                        else if (PageName == "CreditLineIncrease") {
                            s.linkTrackVars = s.linkTrackVars + ',prop53';
                            s.tl(this, 'o', s.prop53, null, 'navigate');
                            return;
                        }
                        if (PageName == "AccountAggregationTandC") {
                            if (EventName == 'SplashPage') {
                                s.t();
                            }
                            else if (EventName == 'TandCCancel'
                                || EventName == 'TandCBack'
                                || EventName == 'GetStarted'
                                || EventName == 'PrivacyPledge'
                                || EventName == 'OnlinePrivacy'
                                || EventName == 'TermsAndCondition'
                                || EventName == 'frequentlyAskedQuestions') {
                                if (s.prop53 != undefined && s.linkTrackVars != undefined) {
                                    s.tl(this, 'o', s.prop53, null, 'navigate');
                                }
                            }
                            return;
                        }

                        if (PageName == "ManageExternalAccounts") {
                            if (EventName == 'DeleteConfirm') {

                                if (s.prop53 != undefined ) {
                                    s.linkTrackVars = s.linkTrackVars + ',prop53,events';
                                    s.linkTrackEvents = 'event302';
                                    s.events = 'event302=' + DynamicVars;
                                    /*s.linkTrackVars='event204';
                                    s.event204='event204=5';*/
                                    s.tl(this, 'o', s.prop53, null, 'navigate');
                                }
                            }
                            else if (EventName == 'DisplayAccountClick'
                              || EventName == 'DeleteAccountClick'
                              || EventName == 'HelpDisplayIconClick'
                              || EventName == 'HelpDeleteIconClick') {
                                if (s.prop53 != undefined && s.linkTrackVars != undefined) {
                                    s.prop8 = "D=v8";
                                    s.eVar8 = " ";
                                    s.eVar9 = " ";
                                    s.eVar35 = "D=pageName";
                                    s.eVar40 = "online banking";
                                    s.tl(this, 'o', s.prop53, null, 'navigate');
                                }
                            }
                        return;
                        }

                    s.t();
                    var reportingSiteCatTLData = {
                        pageName: cd.currentPage,
                        lpId: s.eVar8
                    }
                    if (window.publisherFW) {
                        console.log("Debug :: calling window publisherFW SiteCatTL:: module -> OLB :: pageName -> " + reportingSiteCatTLData.pageName + " :: lpid -> " + reportingSiteCatTLData.lpId);
                        window.publisherFW.publishEvent("pageView", reportingSiteCatTLData); // call this function after the Data Layer Object $NBA
                    }
                }
                catch (e) { }
            };

                return {
                    SiteCatTCall: SiteCatT,
                    SiteCatTLCall: SiteCatTL
                };
            });
    angular
        .module("CommonModule")
        .service("CommonValidation", [commonValidation]);

    function commonValidation() {
        return {
            dollarFormat: function (dollarAmount) {
                if (dollarAmount != null && dollarAmount.length !== 0) {
                    var getAmount = dollarAmount.replace(/[&\/\\#,+()$~%"@":*?<>{}]/g, "");
                    var number = getAmount;
                    var decimalplaces = 0;
                    var decimalcharacter = ".";
                    var thousandseparater = ",";
                    number = parseFloat(number);
                    if (!isNaN(number)) {
                        var sign = "$";
                        var formatted = new String(number.toFixed(decimalplaces));
                        if (decimalcharacter.length && decimalcharacter !== ".") {
                            formatted = formatted.replace(/\./, decimalcharacter);
                        }
                        var integer = "";
                        var fraction = "";
                        var strnumber = new String(formatted);
                        var dotpos = decimalcharacter.length ? strnumber.indexOf(decimalcharacter) : -1;
                        if (dotpos > -1) {
                            if (dotpos) {
                                integer = strnumber.substr(0, dotpos);
                            }
                            fraction = strnumber.substr(dotpos + 1);
                        } else {
                            integer = strnumber;
                        }
                        if (integer) {
                            integer = String(Math.abs(integer));
                        }
                        while (fraction.length < decimalplaces) {
                            fraction += "0";
                        }
                        var temparray = new Array();
                        while (integer.length > 3) {
                            temparray.unshift(integer.substr(-3));
                            integer = integer.substr(0, integer.length - 3);
                        }
                        temparray.unshift(integer);
                        integer = temparray.join(thousandseparater);
                        return sign + integer;
                    } else {
                        return dollarAmount;
                    }
                }
                return dollarAmount;
            },
            isValidAmount: function (value) {
                if (value === "" || value == undefined) return true;
                var number = value.replace(/[&\/\\#,+()$~%"@":*?<>{}]/g, "");
                if (isNaN(parseFloat(number))) {
                    return false;
                } else {
                    return true;
                }
            },
            isEmpty: function (value) {
                return value === "" || value === null || value === undefined;
            },
            removeSpecialChar: function (dollarAmount) {
                return dollarAmount.replace("$", "").replace(/,/g, "");
            },
            validateRegex: function (value, regex) {
                return regex.test(value);
            },
            isAlphaNumeric: function (value) {
                var regex = /^[0-9a-zA-Z]+$/;
                return regex.test(value);
            },
            isChar: function (value) {
                var regex = /^[a-zA-Z]+$/;
                return regex.test(value);
            },
            isNumeric: function (value) {
                var regex = /^[0-9]+$/;
                return regex.test(value);
            }
        }
    }

    angular.module('CommonModule')
        .directive('editlimits', ["CommonValidation", editLimits]);
    function editLimits(commonValidation) {
        var link = function (scope, element, attrs, ctrl) {
            ctrl.$parsers.unshift(function (inputValue) {
                if (inputValue == undefined) return '';
                var transformedInput = inputValue.replace(/[^0-9,$]/g, '');
                if (transformedInput != inputValue) {
                    ctrl.$setViewValue(transformedInput);
                    ctrl.$render();
                }
                return transformedInput;
            });
            element.on("focus", function () {
                element.data("oldData", element.val());
                element.val("");
            });
            element.on("blur", function () {
                var currentValue = element.val();
                if (currentValue === "") {
                    element.val(element.data("oldData"));
                } else {
                    element.val(commonValidation.dollarFormat(currentValue.toString()));
                }
            });
        };
        return {
            restrict: 'A',
            require: 'ngModel',
            link: link
        };

    }

    angular.module('CommonModule').directive('helpiconControl', helpiconControl);

    function helpiconControl() {
        var divFormHelp;

        function prepareHelpBubble () {
            var divFormHelp = $("<div>");
            $(divFormHelp).addClass("chat-bubble");
            $(divFormHelp).attr('id', 'divHelpBubble');
            $("body").append(divFormHelp);
            return divFormHelp;
        };

        function addHelpIconMouseEvents(event, msg) {
            $(divFormHelp).hide('fast');
            divFormHelp = prepareHelpBubble();

            if (event.target) {
                $(divFormHelp).removeClass("chat-bubble-MalInv");
                $(divFormHelp).addClass("chat-bubble-AvlBalDDA");
            }
            else {
                $(divFormHelp).removeClass("chat-bubble-AvlBalDDA");
                $(divFormHelp).removeClass("chat-bubble-MalInv");
            }
            showHelpIconBubble(msg.text, divFormHelp, event);
            $(document.body).click(function (event) { $(divFormHelp).hide('fast'); });
        }

        //Generic method to display the help bubble
        function showHelpIconBubble (text, divFormHelp, e) {
            //check if the help bubble is visible, if it is then do not do anything, otherwise display it.
            var vis = $(divFormHelp).is(":visible");
            if (!vis) {
                $(divFormHelp).html(text);
                if (!$(divFormHelp).hasClass('hasposition')) {
                    $(divFormHelp).addClass('hasposition');
                }
                $(divFormHelp).css({
                    position: "absolute",
                    marginLeft: 0, marginTop: 0,
                    top: e.pageY - $(divFormHelp).outerHeight() - 15, left: e.pageX - 40
                });
                var HelpBorder = $("<div>");
                $(HelpBorder).addClass("chat-bubble-arrow-border");

                var HelpArrow = $("<div>");
                $(HelpArrow).addClass("chat-bubble-arrow");

                $(divFormHelp).append(HelpArrow);
                $(divFormHelp).append(HelpBorder);

                $(divFormHelp).show('fast');
            }
        };

        return {
            restrict: 'E',
            scope: {
                click: '&'
            },
            template: '<span></span>',
            link: function (scope, element, attr) {
                element.on('click', function (event) {
                    event.stopPropagation();
                    scope.click();
                    scope.$apply(function () {
                        addHelpIconMouseEvents(event, attr);
                    });
                });
            }
        };
    };

})();
;
(function () {
    angular
        .module('CommonModule').constant('CommonConstants', {
            METHOD_TYPE_POST: 'POST',
            METHOD_TYPE_GET: 'GET',
            METHOD_TYPE_PUT:'PUT',
            ERROR_MESSAGE: 'Unexpected Error',
            UNKNOWN_ERROR: 'The system is temporarily unavailable. Please try again later',
            STATUSCODE_SUCCESS: 0,
            TRUE: 'true',
            FALSE: 'false',
            EMPTY: '',
            HEADERDATA: { "X-Requested-With": "XMLHttpRequest" },
            ROOT_URL_DIV_TEXT: '#divRootOmniSiteUrlFromLayout',
            ROOT_SLASH: '/',
            CONTROLLERAS: 'vm',
            VOYAGERSIGNOFFURL: 'VoyagerSignoff/VoyagerSignoff',
            FORGOTANSWERTYPE: 'TemporaryAccessCode',
            STEPUP_REQUIRED: 'Please Enter an Answer',
            O_CONFIRMPRINT: 'EnrollmentConfirmPrint',
            O_CONFIRMPRINTBANKER: 'EnrollmentConfirmPrintBanker',
            MULTISELECT: "MultiSelect",
            SINGLESELECT: "SingleSelect",
            TEXTBOX: "TextBox",
            RADIOBUTTON: "RadioButton",
            NOSELECTION: "No Selection",
            NONE: "NONE",
            NOTEQUAL: "NotEqual",
            OTP_HEADER: 'otp',
            STEPUP_HEADER: 'stepup',
            GSS_CONST: {
                CCAP_Timeout: 450,
                CCAP_hdWarningTimeout: 30,
                CCAP_hdLogouturl: "/Auth/LogoutConfirmation",
                CCAP_hdKeepaliveurl: "/USB/PingImage.ashx",
                AFTOKEN: "[[AFTOKEN]]",
                EMAILUS: "EmailUs",
                ACTIVATEYOURCHECKCARD: "ActivateYourCheckCard",
                FINDPASTCHECKORDEPOSITSLIPIMAGES: "FindPastCheckorDepositSlipImages",
                DISPUTECHARGE:"DisputeACharge",
                POSTMESSGE_KMIURL: "kmiurl",
                POSTMESSGE_SEESIONENDED: "ended",
                POSTMESSGE_SEESIONSTRTED: "started",
                POSTMESSAGE_gssWindow: "gssWindow",
                POSTMESSAGE_close: "close",
                GSS_IFRAME: "IframeGSS",
                GSS_G_on: "G_on",
                GSS_T: "T",
                GSS_G_sess: "G_sess",
                GSS_G_sess_Started:"s",
                GSS_Session_Ended: "e",
                GSS_G_elg:"G_elg",
                GSS_GSSChaturl: "GSSChaturl",
                GSS_riblpid: "riblpid",
                CookieName_Window_Status: "G_stat",
                CookieName_GssChatBoxAligned: "G_alg",
                GSS_Window_Status_Maximise: "Max",
                GSS_Window_Status_Miminize: "Min",
                GSS_AUTO:"auto",
                URL_CCAP_FindPastCheckOrDepositSlipImages: "/CCAP/[[AFTOKEN]]/FindPastCheckOrDepositSlipImages",
                URL_CCAP_LandingPage: "/CCAP/LandingPage.aspx",
                URL_CCAP_ActivateCheckCard: "/CCAP/[[AFTOKEN]]/ActivateCheckCard",
                URL_CCAP_EMAILUS: "/CCAP/[[AFTOKEN]]/EmailUs",
                URL_CCAP_DisputeCharge:"/CCAP/[[AFTOKEN]]/DisputeCharge",
                URL_HelpCenter_aspx: "/HelpCenter.aspx",
                URL_USB_BASEPATH: "/USB/",
                HTML_gssUIWrapper: "gssUIWrapper",
                HTML_dummyContainer: "dummyContainer",
                HTML_chat_help: "chat_help",
                HTML_btnGSSClose: "btnGSSClose",
                HTML_helpDiv: "btnGSSLaunch"
            },
            TRANSMIT_AUTH_HEADER_EXISTS: 'transmit-token-exists',
            Gss_StaticDeepLinks: {
                GSS_REWARDCENTER: "/USB/{{AFTOKEN}}/RewardsCenterDashboard/RewardsCenterDashboard.aspx",
                GSS_PASTCHECK: "/CCAP/{{AFTOKEN}}/FindPastCheckOrDepositSlipImages",
                GSS_INTERNALPAYMENT: "/MM/{{AFTOKEN}}/PaymentsDesktop/PaymentIndex",
                GSS_TRANSFERINDEX: "/OLMM/{{AFTOKEN}}/Transfers/Index#/InternalTransfers/SingleAndRecurring/",
                GSS_BILLPAYINDEX: "/MM/{{AFTOKEN}}/BillPayment/BillPayIndex",
                GSS_SENTMONEYTOPER: "/OLMM/{{AFTOKEN}}/SendMoney/SendMoneyIndex",
                GSS_STATMENTS: "/USB/{{AFTOKEN}}/EDocsDashboard/LoadEDocsDashboard/OLS",
                GSS_PROFUPDATE: "/USB/{{AFTOKEN}}/MyProfileDashboard/MyProfileDashboardIndex",
                GSS_ACTIVATECHECKCARD: "/CCAP/{{AFTOKEN}}/ActivateCheckCard",
                GSS_EMAILUS: "/CCAP/{{AFTOKEN}}/EmailUs"
            },
            CEI_CreateProspectCustomer: "http://event/?EventName=CreateProspectCustomer&param1=",
            CEI_OpenProspectProfile: "http://event/?EventName=OpenProspectProfile&param1=",
            STEPUP_HEADER: 'stepup',
            PROFILE_API_URL: "/api/customer/v1/profiles/",
            USER_EVENT_TRACKING_URL_TOGETACTION: '/usb_usereventtrackings?$top=1&$orderby=createdon desc&$select=usb_action,usb_sessioncount&$filter=usb_bankerid eq ',
            USER_GUID: 'GUID',
            CRM_URL: 'CRM_URL',
            ERROR_SI_INVALID_MSG: "Please make sure that your ID Shield image phrase is between 3 and 50 characters and contains only numbers and letters. Do not use special characters, such as & or !",
            ERROR_SI_EMPTY_IMAGE_MSG: "Please select an ID Shield image or image with sound.",
            ERROR_SI_EMPTY_PHRASE: "Please enter an ID Shield image phrase.",
        });
            
})();;
(function (angular) {
    'use strict';
    angular
        .module('CommonModule')
        .factory('CommonSiteCatService', [siteCatEntitlementsService]);
    function siteCatEntitlementsService() {
        var generateObject = function (arrReptData) {
            // This Function will publish(?) the provided data reporting object
            // Intended to be used throughout CEI
            // Bootstrap.js is loaded on page load, per ensighten team

            var dataReporting = new Object();

            //Ensighten DataLayer fields - Add additional fields as needed...
            dataReporting.currentPage = (arrReptData.currentPage) ? arrReptData.currentPage : "";
            dataReporting.siteSection = (arrReptData.siteSection) ? arrReptData.siteSection : "";
            dataReporting.subSiteSection = (arrReptData.subSiteSection) ? arrReptData.subSiteSection : "";
            dataReporting.errorStatus = (arrReptData.errorStatus) ? arrReptData.errorStatus : "";
            dataReporting.productType = (arrReptData.productType) ? arrReptData.productType : "";
            dataReporting.Channel = (arrReptData.Channel) ? arrReptData.Channel : "";
            dataReporting.deviceType = (arrReptData.deviceType) ? arrReptData.deviceType : "";
            dataReporting.customerSegment = (arrReptData.customerSegment) ? arrReptData.customerSegment : "";
            dataReporting.entitlementStatus = (arrReptData.entitlementStatus) ? arrReptData.entitlementStatus : "";
            dataReporting.dataSource = (arrReptData.dataSource) ? arrReptData.dataSource : "pageView";
            dataReporting.linkType = (arrReptData.linkType) ? arrReptData.linkType : "";
            dataReporting.entitlementType = (arrReptData.entitlementType) ? arrReptData.entitlementType: "";
            dataReporting.accountsDelegated = (arrReptData.accountsDelegated) ? arrReptData.accountsDelegated : "";
            dataReporting.invitationSelected = (arrReptData.invitationSelected) ? arrReptData.invitationSelected : "";

            //add this function after the dataLayer code or top
            var triggerSiteCatalystRequest = function (arrReptData) {
                if (arrReptData.Channel == 'MBL') {
                    var scObj = {};
                    if (arrReptData.dataSource == 'pageView') {
                        scObj = {                         
                        	pageName: (arrReptData.currentPage) ? ("omni:" + arrReptData.currentPage.replace("entitlements ", "shared access:").replace("olb:", "")) : "",
                            prop1: (arrReptData.siteSection) ? (arrReptData.siteSection.replace("entitlements", "shared access")) : "",
                            prop2: (arrReptData.subSiteSection) ? (arrReptData.subSiteSection.replace("entitlements", "shared access")) : "",
                            prop13: (arrReptData.errorStatus) ? (arrReptData.errorStatus.replace("entitlements", "shared access")) : "",
                            eVar53: (arrReptData.customerSegment) ? (arrReptData.customerSegment.replace("entitlements", "shared access")) : "",
                            prop55 : (arrReptData.productType) ? (arrReptData.productType.replace("entitlements", "shared access")) : "",
                            products: (arrReptData.accountsDelegated) ? (";shared access " + arrReptData.accountsDelegated.split("|").join(",;shared access ").replace(/:/g, ";") + ";") : "",  
                            events: (arrReptData.accountsDelegated && arrReptData.accountsDelegated.trim().length > 0 ? "purchase" : "")
                          };
                        s.pageName = scObj.pageName;
                        if (arrReptData.currentPage && arrReptData.currentPage.indexOf("entitlements enrollment success") > -1) {
                            scObj.events = "event110";
                        }
                        window.cd["currentPage"] = "";
                        s.t(scObj);
                    } else if (arrReptData.dataSource == 'onSelect') {
                        scObj = {
                            prop1: (arrReptData.siteSection) ? (arrReptData.siteSection.replace("entitlements", "shared access")) : "",
                            prop2: (arrReptData.subSiteSection) ? (arrReptData.subSiteSection.replace("entitlements", "shared access")) : "",
                            prop53: (arrReptData.currentPage) ? ("omni:" + arrReptData.currentPage.replace("entitlements ", "shared access:").replace("olb:", "")) : "",
                            linkTrackVars: 'prop1,prop2,prop53'
                        };
                        s.tl(window, 'o', scObj.prop53, scObj);
                    }
                }
            };

            try {
                if (window.publisherFW) {
                    window.publisherFW.publishEvent(arrReptData.dataSource, dataReporting);
                }
                //call this below the window.publisherFW
                triggerSiteCatalystRequest(arrReptData);
            }
            catch (ex) {
            }
        };

        return {
            GenerateSiteCatalystReportingObject: generateObject
        };
    };
})(angular);;
(function () {
    'use strict';
    angular
        .module('CommonModule')
        .factory('CommonHelper', [commonHelper]);

    function commonHelper() {
        return {
            machineAttributes: function () {
                var colorDepth = window.screen.colorDepth,
                    width = window.screen.width,
                    height = window.screen.height,
                    availWidth = window.screen.availWidth,
                    availHeight = window.screen.availHeight,
                    platform = navigator.platform,
                    userAgent = navigator.userAgent,
                    clientParms,
                    java = "No";

                if (navigator.javaEnabled() == 1)
                    java = "Yes";

                clientParms = "colorDepth=" + colorDepth +
                    "|width=" + width +
                    "|height=" + height +
                    "|availWidth=" + availWidth +
                    "|availHeight=" + availHeight +
                    "|platform=" + platform +
                    "|javaEnabled=" + java +
                    "|userAgent=" + userAgent;

                return clientParms;
            },

            Stringformat: function () {
                var formatString = arguments[0];
                for (var i = 1; i < arguments.length; i++) {
                    // "gm" = RegEx options for Global search (more than one instance) and for Multiline search
                    var regEx = new RegExp("\\{" + (i - 1) + "\\}", "gm");
                    formatString = formatString.replace(regEx, arguments[i]);
                }
                return formatString;
            },

            trimAccountName: function (transactions) {
                angular.forEach(transactions, function (transaction) {
                    var accountName = transaction.AccountDetail.AccountDisplayName;
                    var noOfCharsToTrim = 11;
                    var windowWidth = window.innerWidth;

                    if (windowWidth >= 1500) {
                        transaction.AccountDetail.AccountShortName = accountName;
                        return;
                    } else if (windowWidth >= 1100 && windowWidth < 1500) {
                        noOfCharsToTrim = 8;
                    }

                    var tailEnd = accountName.substring(accountName.indexOf('...'), accountName.length);
                    var trimmedAccountName = accountName.substring(0, accountName.indexOf('...'));
                    if (trimmedAccountName.length > noOfCharsToTrim) {
                        trimmedAccountName = trimmedAccountName.substring(0, trimmedAccountName.length - noOfCharsToTrim);
                    }
                    trimmedAccountName += tailEnd;
                    transaction.AccountDetail.AccountShortName = trimmedAccountName;
                });
            },
            nagativeAmount: function (amounts) {
                angular.forEach(amounts, function (amount) {
                    var newAmount;
                    if (amount.Amount.indexOf('(') > '-1')
                        newAmount = amount.Amount.replace('(', '-').replace(')', '');
                    else
                        newAmount = amount.Amount;
                    amount.Amount = newAmount;
                });
            },
            IsDatePresent: function (date) {
                if (date && date != '' && date != null)
                    return true;
                else
                    return false;
            },

            getAge: function (dateOfBirthString) {
                var dateOfBirth = new Date(dateOfBirthString);
                var currentDate = new Date();

                var age = currentDate.getFullYear() - dateOfBirth.getFullYear();
                dateOfBirth.setFullYear(dateOfBirth.getFullYear() + age);
                age = currentDate < dateOfBirth ? age - 1 : age;
                return age;
            },

            IsDateValid: function (date) {
                //pattern is mm/dd/yyyy where yyyy starts from 19 or 20
                var pattern = /^([1-9]|0[1-9]|1[0-2])\/([1-9]|0[1-9]|1\d|2\d|3[01])\/(19|20)\d{2}$/;
                if (Date.parse(date) && pattern.test(date)) {
                    return true;
                }
                return false;
            },

            IsDateGreaterThanCurrentDate: function (date) {
                var inputDate = new Date(date).setHours(0, 0, 0, 0);
                var currentDate = new Date().setHours(0, 0, 0, 0);
                if (currentDate > inputDate) {
                    return true;
                }
                return false;
            },
            toFloat: function (value) {
                var pattern = /\$|,|/g;

                if (value.replace)
                    return parseFloat(value.replace(pattern, "")).toFixed(2);
                else
                    return value;
            }


        }

    }
})();;
var Omniture = {};

Omniture.constants = {};

//New prefix for Omni pages
Omniture.constants["OmniSitePrefix"] = "omni";

//Page level values for Stepup functionality
Omniture.constants["StepUp"] = {};
Omniture.constants["StepUp"]["siteSection"] = "system";
Omniture.constants["StepUp"]["subSiteSection"] = "system";
Omniture.constants["StepUp"]["pageMiddleSection"] = "system";

Omniture.constants["StepUp"]["page"] = {};
Omniture.constants["StepUp"]["page"] = {
    "eventname": "stepup",
    "transactionType": "",
    "transactionStatus": "",
    "errorStatus": ""
};

Omniture.constants["StepUp"]["locked"] = {};
Omniture.constants["StepUp"]["locked"] = {
    "eventname": "step up failure locked out",
    "transactionType": "",
    "transactionStatus": "",
    "errorStatus": "step up failure locked out"
};

Omniture.constants["StepUp"]["failed"] = {};
Omniture.constants["StepUp"]["failed"] = {
    "eventname": "step up failure",
    "transactionType": "",
    "transactionStatus": "",
    "errorStatus": "step up failure"
};

//Page level values for Start Smart Dashboard functionality
Omniture.constants["StartSmartDashboard"] = {};
Omniture.constants["StartSmartDashboard"]["siteSection"] = "account dashboard";
Omniture.constants["StartSmartDashboard"]["subSiteSection"] = "start smart dashboard";
Omniture.constants["StartSmartDashboard"]["pageMiddleSection"] = "start smart dashboard";

//Event level values for Start Smart Dashboard functionality

Omniture.constants["StartSmartDashboard"]["Overview"] = {};
Omniture.constants["StartSmartDashboard"]["Overview"] = {
    "eventname": "dashboard overview"
};
Omniture.constants["StartSmartDashboard"]["BonusDetails"] = {};
Omniture.constants["StartSmartDashboard"]["BonusDetails"] = {
    "eventname": "dashboard 1 percent bonus details info"
};

Omniture.constants["StartSmartDashboard"]["ProgramAgreement"] = {};
Omniture.constants["StartSmartDashboard"]["ProgramAgreement"] = {
    "eventname": "dashboard program agreement"
};

Omniture.constants["StartSmartDashboard"]["OptOut"] = {};
Omniture.constants["StartSmartDashboard"]["OptOut"] = {
    "eventname": "dashboard opt out review"
};

Omniture.constants["StartSmartDashboard"]["OptOutConfirm"] = {};
Omniture.constants["StartSmartDashboard"]["OptOutConfirm"] = {
    "eventname": "dashboard opt out confirm"
};

Omniture.constants["StartSmartDashboard"]["OptOutFailure"] = {};
Omniture.constants["StartSmartDashboard"]["OptOutFailure"] = {
    "eventname": "dashboard opt out confirm failure"
};

Omniture.constants["StartSmartDashboard"]["TransferDescriptions"] = {};
Omniture.constants["StartSmartDashboard"]["TransferDescriptions"] = {
    "eventname": "dashboard transfer descriptions"
};

Omniture.constants["StartSmartDashboard"]["ShowMore"] = {};
Omniture.constants["StartSmartDashboard"]["ShowMore"] = {
    "prop53": "dashboard show more bonus history link",
    "eventname": "dashboard show more bonus history link"
};

Omniture.constants["StartSmartDashboard"]["BonusHistory"] = {};
Omniture.constants["StartSmartDashboard"]["BonusHistory"] = {
    "eventname": "dashboard 1 percent bonus history details"
};

Omniture.constants["StartSmartDashboard"]["ProgramInformation"] = {};
Omniture.constants["StartSmartDashboard"]["ProgramInformation"] = {
    "eventname": "program info banker view"
};

Omniture.constants["StartSmartDashboard"]["BackToAccount"] = {};
Omniture.constants["StartSmartDashboard"]["BackToAccount"] = {
    "prop53": "back to accounts link",
    "eventname": "back to accounts link"
};

Omniture.constants["StartSmartDashboard"]["PrintSave"] = {};
Omniture.constants["StartSmartDashboard"]["PrintSave"] = {
    "prop53": "program agreement print/save link",
    "eventname": "program agreement print/save link"
};

//Page level values for Simple Loan Start
Omniture.constants["SimpleLoan"] = {};
Omniture.constants["SimpleLoan"]["siteSection"] = "application simple loan";
Omniture.constants["SimpleLoan"]["subSiteSection"] = "apply simple loan";
Omniture.constants["SimpleLoan"]["pageMiddleSection"] = "simple loan application details";
Omniture.constants["SimpleLoan"]["OnLoad"] = {};
Omniture.constants["SimpleLoan"]["OnLoad"] = {
    "pageName": "simple loan application details",
    "prop1": "application simple loan",
    "prop2": "apply simple loan",
}
Omniture.constants["SimpleLoan"]["OnApply"] = {};
Omniture.constants["SimpleLoan"]["OnApply"] = {
    "pageName": "apply click",
    "prop1": "application simple loan",
    "prop2": "apply simple loan",    
}
Omniture.constants["SimpleLoan"]["OnCancel"] = {};
Omniture.constants["SimpleLoan"]["OnCancel"] = {
    "pageName": "cancel click",
    "prop1": "application simple loan",
    "prop2": "apply simple loan",
}
Omniture.constants["SimpleLoan"]["OnOverlay"] = {};
Omniture.constants["SimpleLoan"]["OnOverlay"] = {
    "pageName": "more info required overlay",
    "prop1": "application simple loan",
    "prop2": "apply simple loan",
}

Omniture.constants["SimpleLoan"]["OnOverlayClose"] = {};
Omniture.constants["SimpleLoan"]["OnOverlayClose"] = {
    "pageName": "more info required overlay close btn",
    "prop1": "application simple loan",
    "prop2": "apply simple loan",
}

Omniture.constants["SimpleLoan"]["OnPaymentClick"] = {};
Omniture.constants["SimpleLoan"]["OnPaymentClick"] = {
    "pageName": "payment example click",
    "prop1": "application simple loan",
    "prop2": "apply simple loan",
}

//Page level values for Simple Loan End

//Advanced Security Constants -Start
Omniture.constants["AdvancedSecurity"] = {};
Omniture.constants["AdvancedSecurity"]["siteSection"] = "access control";
Omniture.constants["AdvancedSecurity"]["subSiteSection"] = "advance security maintenance";
Omniture.constants["AdvancedSecurity"]["pageMiddleSection"] = "access control";

Omniture.constants["AdvancedSecurity"]["Maintenance"] = {};
Omniture.constants["AdvancedSecurity"]["Maintenance"] = {
    "eventname": "advanced security maintenance overview"
};

Omniture.constants["AdvancedSecurity"]["CancelLink"] = {};
Omniture.constants["AdvancedSecurity"]["CancelLink"] = {
    "prop53": "advanced security maintenance cancel link"
};

Omniture.constants["AdvancedSecurity"]["DeleteVoiceprints"] = {};
Omniture.constants["AdvancedSecurity"]["DeleteVoiceprints"] = {
    "eventname": "advanced security maintenance delete voiceprints"
};

Omniture.constants["AdvancedSecurity"]["NotDeleteVoiceprints"] = {};
Omniture.constants["AdvancedSecurity"]["NotDeleteVoiceprints"] = {
    "prop53": "delete voiceprints do not delete link"
};

Omniture.constants["AdvancedSecurity"]["DeleteVoiceprintsSuccess"] = {};
Omniture.constants["AdvancedSecurity"]["DeleteVoiceprintsSuccess"] = {
    "eventname": "advanced security maintenance delete voiceprints confirm"
};

Omniture.constants["AdvancedSecurity"]["DeleteVoiceprintsFailure"] = {};
Omniture.constants["AdvancedSecurity"]["DeleteVoiceprintsFailure"] = {
    "eventname": "advanced security maintenance delete voiceprints confirm failure"
};

Omniture.constants["AdvancedSecurity"]["ConfirmSuccess"] = {};
Omniture.constants["AdvancedSecurity"]["ConfirmSuccess"] = {
    "eventname": "advanced security maintenance access confirm"
};

Omniture.constants["AdvancedSecurity"]["ConfirmFailure"] = {};
Omniture.constants["AdvancedSecurity"]["ConfirmFailure"] = {
    "eventname": "advanced security maintenance access confirm failure"
};

Omniture.constants["AdvancedSecurity"]["MaintenanceError"] = {};
Omniture.constants["AdvancedSecurity"]["MaintenanceError"] = {
    "eventname": "advanced security maintenance overview error"
};
//Advanced Security Constants -End
Omniture.constants["LoginAssistance"] = {};
Omniture.constants["LoginAssistance"]["siteSection"] = "banker servicing";
Omniture.constants["LoginAssistance"]["subSiteSection"] = "login assistance";
Omniture.constants["LoginAssistance"]["pageMiddleSection"] = "banker servicing";

Omniture.constants["LoginAssistance"]["OlbLoginAssistance"] = {};
Omniture.constants["LoginAssistance"]["OlbLoginAssistance"] = {
    "eventname": "olb login assistance",
    "prop40": "omni"
};

Omniture.constants["LoginAssistance"]["OlbLoginAssistanceUnlockProcess"] = {};
Omniture.constants["LoginAssistance"]["OlbLoginAssistanceUnlockProcess"] = {
    "eventname": "olb login assistance unlock processing",
    "prop40": "omni"
};
Omniture.constants["LoginAssistance"]["OlbLoginAssistanceUnlockFailed"] = {};
Omniture.constants["LoginAssistance"]["OlbLoginAssistanceUnlockFailed"] = {
    "eventname": "olb login assistance unlock failed",
    "prop40": "omni"
};

Omniture.constants["LoginAssistance"]["OlbLoginAssistanceUnlockSystemError"] = {};
Omniture.constants["LoginAssistance"]["OlbLoginAssistanceUnlockSystemError"] = {
    "eventname": "olb login assistance unlock system error",
    "prop40": "omni"
};

Omniture.constants["Enrollment"] = {};
Omniture.constants["Enrollment"]["siteSection"] = "banker servicing";
Omniture.constants["Enrollment"]["subSiteSection"] = "enrollment";
Omniture.constants["Enrollment"]["pageMiddleSection"] = "banker servicing";

Omniture.constants["Enrollment"]["OlbEnrollment"] = {};
Omniture.constants["Enrollment"]["OlbEnrollment"] = {
    "eventname": "olb enrollment",
    "prop40": "omni"
};

Omniture.constants["Enrollment"]["EnrollmentUnlockProcess"] = {};
Omniture.constants["Enrollment"]["EnrollmentUnlockProcess"] = {
    "eventname": "olb enrollment unlock processing",
    "prop40": "omni"
};
Omniture.constants["Enrollment"]["EnrollmentUnlockFailed"] = {};
Omniture.constants["Enrollment"]["EnrollmentUnlockFailed"] = {
    "eventname": "olb enrollment unlock failed",
    "prop40": "omni"
};

Omniture.constants["Enrollment"]["EnrollmentUnlockSystemError"] = {
    "eventname": "olb enrollment unlock system error",
    "prop40": "omni"
};


//Byei Constants - Start

//Page level values for byei enrollment functionality
Omniture.constants["ByeiEnrollment"] = {};
Omniture.constants["ByeiEnrollment"]["siteSection"] = "account dashboard";
Omniture.constants["ByeiEnrollment"]["subSiteSection"] = "byei enrollment";
Omniture.constants["ByeiEnrollment"]["pageMiddleSection"] = "byei enrollment";

//Event level values for byei Enrollment functionality
Omniture.constants["ByeiEnrollment"]["Introduction"] = {};
Omniture.constants["ByeiEnrollment"]["Introduction"] = {
    "eventname": "byei enroll intro",
    "enrollStatus": "byei step 1 non-banker"
};

Omniture.constants["ByeiEnrollment"]["CheckEligibility"] = {};
Omniture.constants["ByeiEnrollment"]["CheckEligibility"] = {
    "prop53": "byei enroll intro user check eligibility",
    "eventname": "byei enroll intro user check eligibility"
};

Omniture.constants["ByeiEnrollment"]["IntroCancel"] = {};
Omniture.constants["ByeiEnrollment"]["IntroCancel"] = {
    "prop53": "byei enroll intro user cancel",
    "eventname": "byei enroll intro user cancel"
};

Omniture.constants["ByeiEnrollment"]["DateOfBirthNeeded"] = {};
Omniture.constants["ByeiEnrollment"]["DateOfBirthNeeded"] = {
    "eventname": "byei date of birth needed",
    "enrollStatus": "byei date of birth needed"
};

Omniture.constants["ByeiEnrollment"]["DateOfBirthNeededBanker"] = {};
Omniture.constants["ByeiEnrollment"]["DateOfBirthNeededBanker"] = {
    "eventname": "byei date of birth needed banker view",
    "enrollStatus": "byei date of birth needed banker"
};

Omniture.constants["ByeiEnrollment"]["DateOfBirthCancel"] = {};
Omniture.constants["ByeiEnrollment"]["DateOfBirthCancel"] = {
    "prop53": "byei date of birth needed cancel",
    "eventname": "byei date of birth needed cancel"
};

Omniture.constants["ByeiEnrollment"]["DateOfBirthCancelBanker"] = {};
Omniture.constants["ByeiEnrollment"]["DateOfBirthCancelBanker"] = {
    "prop53": "byei date of birth needed cancel banker view",
    "eventname": "byei date of birth needed cancel banker view"
};

Omniture.constants["ByeiEnrollment"]["ConsentCreditScore"] = {};
Omniture.constants["ByeiEnrollment"]["ConsentCreditScore"] = {
    "eventname": "byei consent for credit score",
    "enrollStatus": "byei credit score"
};

Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreBanker"] = {};
Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreBanker"] = {
    "eventname": "byei enrollment consent for credit score banker view",
    "enrollStatus": "byei credit score"
};

Omniture.constants["ByeiEnrollment"]["NotReadAuthorization"] = {};
Omniture.constants["ByeiEnrollment"]["NotReadAuthorization"] = {
    "eventname": "byei consent for credit score not agreed credit score authorization",
    "enrollStatus": "byei credit score not read authorization"
};

Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreSubmit"] = {};
Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreSubmit"] = {
    "eventname": "byei consent for credit score submit",
    "enrollStatus": "byei credit score submit"
};

Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreSubmitBanker"] = {};
Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreSubmitBanker"] = {
    "prop53": "byei enrollment consent for credit score submit button banker view",
    "eventname": "byei enrollment consent for credit score submit button banker view"
};

Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreCancel"] = {};
Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreCancel"] = {
    "prop53": "byei enrollment consent for credit score consumer cancel link",
    "eventname": "byei enrollment consent for credit score consumer cancel link"
};

Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreCancelBanker"] = {};
Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreCancelBanker"] = {
    "prop53": "byei enrollment consent for credit score cancel link banker view",
    "eventname": "byei enrollment consent for credit score cancel link banker view"
};

Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreAgrees"] = {};
Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreAgrees"] = {
    "prop53": "byei enrollment consent for credit score banker view customer agrees button",
    "enrollStatus": "byei credit score customer agree",
    "eventname": "byei enrollment consent for credit score banker view customer agrees button",
};

Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreDisagrees"] = {};
Omniture.constants["ByeiEnrollment"]["ConsentCreditScoreDisagrees"] = {
    "prop53": "byei enrollment consent for credit score banker view customer disagrees button",
    "enrollStatus": "byei credit score customer disagree",
    "eventname": "byei enrollment consent for credit score banker view customer disagrees button",
};

Omniture.constants["ByeiEnrollment"]["ProgramAgreement"] = {};
Omniture.constants["ByeiEnrollment"]["ProgramAgreement"] = {
    "eventname": "byei enrollment program agreement"
};

Omniture.constants["ByeiEnrollment"]["ProgramAgreementBanker"] = {};
Omniture.constants["ByeiEnrollment"]["ProgramAgreementBanker"] = {
    "eventname": "byei enrollment program agreement banker view"
};

Omniture.constants["ByeiEnrollment"]["ProgramAgreementDisagrees"] = {};
Omniture.constants["ByeiEnrollment"]["ProgramAgreementDisagrees"] = {
    "prop53": "byei enrollment program agreement customer disagree",
    "eventname": "byei enrollment program agreement customer disagree"
};

Omniture.constants["ByeiEnrollment"]["ProgramAgreementAgrees"] = {};
Omniture.constants["ByeiEnrollment"]["ProgramAgreementAgrees"] = {
    "prop53": "byei enrollment program agreement customer agrees",
    "eventname": "byei enrollment program agreement customer agrees"
};

Omniture.constants["ByeiEnrollment"]["ProgramAgreementDisagreesBanker"] = {};
Omniture.constants["ByeiEnrollment"]["ProgramAgreementDisagreesBanker"] = {
    "prop53": "byei enrollment program agreement customer disagrees banker view",
    "eventname": "byei enrollment program agreement customer disagrees banker view"
};

Omniture.constants["ByeiEnrollment"]["ProgramAgreementAgreesBanker"] = {};
Omniture.constants["ByeiEnrollment"]["ProgramAgreementAgreesBanker"] = {
    "prop53": "byei enrollment program agreement customer agrees banker view",
    "eventname": "byei enrollment program agreement customer agrees banker view"
};

Omniture.constants["ByeiEnrollment"]["ProgramAgreementPrintSave"] = {};
Omniture.constants["ByeiEnrollment"]["ProgramAgreementPrintSave"] = {
    "prop53": "byei enrollment program agreement print save link",
    "eventname": "byei enrollment program agreement print save link"
};

Omniture.constants["ByeiEnrollment"]["ProgramAgreementPrintSaveBanker"] = {};
Omniture.constants["ByeiEnrollment"]["ProgramAgreementPrintSaveBanker"] = {
    "prop53": "byei enrollment program agreement print save link banker view",
    "eventname": "byei enrollment program agreement print save link banker view"
};

Omniture.constants["ByeiEnrollment"]["EnrollmentSuccess"] = {};
Omniture.constants["ByeiEnrollment"]["EnrollmentSuccess"] = {
    "eventname": "byei enrollment confirm success",
    "enrollStatus": "byei enrollment confirm success"
};

Omniture.constants["ByeiEnrollment"]["EnrollmentFailure"] = {};
Omniture.constants["ByeiEnrollment"]["EnrollmentFailure"] = {
    "eventname": "byei enrollment failure",
    "enrollStatus": "byei enrollment failure",
    "errorStatus": "byei enrollment failure backend server error"
};

Omniture.constants["ByeiEnrollment"]["EnrollmentConfirmPrint"] = {};
Omniture.constants["ByeiEnrollment"]["EnrollmentConfirmPrint"] = {
    "prop53": "byei enrollment confirmation print link",
    "eventname": "byei enrollment confirmation print link"
};

Omniture.constants["ByeiEnrollment"]["EnrollmentToDashboard"] = {};
Omniture.constants["ByeiEnrollment"]["EnrollmentToDashboard"] = {
    "prop53": "byei enrollment confirmation go to byei dashboard button",
    "eventname": "byei enrollment confirmation go to byei dashboard button"
};

Omniture.constants["ByeiEnrollment"]["EnrollmentBackToAccount"] = {};
Omniture.constants["ByeiEnrollment"]["EnrollmentBackToAccount"] = {
    "prop53": "byei enrollment confirmation go to account dashboard button",
    "eventname": "byei enrollment confirmation go to account dashboard button"
};

Omniture.constants["ByeiEnrollment"]["EnrollmentSuccessBanker"] = {};
Omniture.constants["ByeiEnrollment"]["EnrollmentSuccessBanker"] = {
    "eventname": "byei enrollment confirm success banker view",
    "enrollStatus": "byei enrollment confirm success banker"
};

Omniture.constants["ByeiEnrollment"]["EnrollmentFailureBanker"] = {};
Omniture.constants["ByeiEnrollment"]["EnrollmentFailureBanker"] = {
    "eventname": "byei enrollment failure banker view",
    "enrollStatus": "byei enrollment failure banker",
    "errorStatus": "byei enrollment failure banker backend server error"
};

Omniture.constants["ByeiEnrollment"]["EnrollmentToDashboardBanker"] = {};
Omniture.constants["ByeiEnrollment"]["EnrollmentToDashboardBanker"] = {
    "prop53": "byei enrollment confirmation go to because you've earned it button banker view",
    "eventname": "byei enrollment confirmation go to because you've earned it button banker view"
};

Omniture.constants["ByeiEnrollment"]["EnrollmentConfirmPrintBanker"] = {};
Omniture.constants["ByeiEnrollment"]["EnrollmentConfirmPrintBanker"] = {
    "prop53": "byei enrollment confirmation print link banker view",
    "eventname": "byei enrollment confirmation print link banker view"
};

Omniture.constants["ByeiEnrollment"]["EnrollmentConfirmClose"] = {};
Omniture.constants["ByeiEnrollment"]["EnrollmentConfirmClose"] = {
    "prop53": "byei enrollment confirmation close button banker view",
    "eventname": "byei enrollment confirmation close button banker view"
};

Omniture.constants["ByeiEnrollment"]["CanNotAccessCreditScore"] = {};
Omniture.constants["ByeiEnrollment"]["CanNotAccessCreditScore"] = {
    "eventname": "byei credit score results can't access credit score"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreNotHigh"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreNotHigh"] = {
    "eventname": "byei credit score results credit score not high enough"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreNotQualify"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreNotQualify"] = {
    "eventname": "byei credit score results not enough qualifying info"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreSecurityFreeze"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreSecurityFreeze"] = {
    "eventname": "byei credit score results security freeze"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreResultsEnrolled"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreResultsEnrolled"] = {
    "eventname": "byei credit score results already enrolled in byei"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreResultsMissingTU"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreResultsMissingTU"] = {
    "eventname": "byei credit score results missing required tu data"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreResultsUnder18"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreResultsUnder18"] = {
    "eventname": "byei credit score results customer under 18"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreResultsMissingTUBanker"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreResultsMissingTUBanker"] = {
    "eventname": "byei credit score results missing required tu data banker view"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreResultsTUIssueBanker"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreResultsTUIssueBanker"] = {
    "eventname": "byei credit score results tu issues banker view"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreNotHighBanker"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreNotHighBanker"] = {
    "eventname": "byei credit score results credit score not high enough banker view"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreNotQualifyBanker"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreNotQualifyBanker"] = {
    "eventname": "byei credit score results not enough qualifying info banker view"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreSecurityFreezeBanker"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreSecurityFreezeBanker"] = {
    "eventname": "byei credit score results security freeze banker view"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreResultsEnrolledBanker"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreResultsEnrolledBanker"] = {
    "eventname": "byei credit score results already enrolled in byei banker view"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreResultsUnder18Banker"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreResultsUnder18Banker"] = {
    "eventname": "byei credit score results customer under 18 banker view"
};

Omniture.constants["ByeiEnrollment"]["EligibilityCloseBanker"] = {};
Omniture.constants["ByeiEnrollment"]["EligibilityCloseBanker"] = {
    "prop53": "byei enrollment eligibility results close button banker view",
    "eventname": "byei enrollment eligibility results close button banker view"
};

Omniture.constants["ByeiEnrollment"]["EligibilityNextBanker"] = {};
Omniture.constants["ByeiEnrollment"]["EligibilityNextBanker"] = {
    "prop53": "byei enrollment credit score results next button banker view",
    "eventname": "byei enrollment credit score results next button banker view"
};

Omniture.constants["ByeiEnrollment"]["EligibilityCancelBanker"] = {};
Omniture.constants["ByeiEnrollment"]["EligibilityCancelBanker"] = {
    "prop53": "byei enrollment credit score results cancel link banker view",
    "eventname": "byei enrollment credit score results cancel link banker view"
};

Omniture.constants["ByeiEnrollment"]["EligibilityFinishBanker"] = {};
Omniture.constants["ByeiEnrollment"]["EligibilityFinishBanker"] = {
    "prop53": "byei enrollment credit score results finish button banker view",
    "eventname": "byei enrollment credit score results finish button banker view"
};

Omniture.constants["ByeiEnrollment"]["CreditScoreResultsBanker"] = {};
Omniture.constants["ByeiEnrollment"]["CreditScoreResultsBanker"] = {
    "eventname": "byei credit score results banker view"
};

Omniture.constants["ByeiEnrollment"]["CreditViewDashboard"] = {};
Omniture.constants["ByeiEnrollment"]["CreditViewDashboard"] = {
    "prop53": "byei enrollment credit score results creditView dashboard link"
};

Omniture.constants["ByeiEnrollment"]["FinancialGenius"] = {};
Omniture.constants["ByeiEnrollment"]["FinancialGenius"] = {
    "prop53": "byei enrollment credit score results financial genius link"
};

Omniture.constants["ByeiEnrollment"]["BuildingYourCredit"] = {};
Omniture.constants["ByeiEnrollment"]["BuildingYourCredit"] = {
    "prop53": "byei enrollment credit score results building your credit link"
};

//Byei Dashboard Constants - Start

//Page level values for byei dashboard functionality
Omniture.constants["ByeiDashboard"] = {};
Omniture.constants["ByeiDashboard"]["siteSection"] = "account dashboard";
Omniture.constants["ByeiDashboard"]["subSiteSection"] = "byei dashboard";
Omniture.constants["ByeiDashboard"]["pageMiddleSection"] = "byei dashboard";

Omniture.constants["ByeiDashboard"]["Overview"] = {};
Omniture.constants["ByeiDashboard"]["Overview"] = {
    "eventname": "dashboard overview"
};

Omniture.constants["ByeiDashboard"]["AccordianExpansion"] = {};
Omniture.constants["ByeiDashboard"]["AccordianExpansion"] = {
    "prop53": "enrolled accounts info accordion expansion",
    "eventname": "enrolled accounts info accordion expansion"
};

Omniture.constants["ByeiDashboard"]["MobileMoreTransaction"] = {};
Omniture.constants["ByeiDashboard"]["MobileMoreTransaction"] = {
    "prop53": "enrolled accounts info loading transactions",
    "eventname": "enrolled accounts info loading transactions"
};

Omniture.constants["ByeiDashboard"]["ShowMore"] = {};
Omniture.constants["ByeiDashboard"]["ShowMore"] = {
    "prop53": "enrolled accounts info show more",
    "eventname": "enrolled accounts info show more"
};

Omniture.constants["ByeiDashboard"]["ProgramDetails"] = {};
Omniture.constants["ByeiDashboard"]["ProgramDetails"] = {
    "eventname": "byei program details"
};

Omniture.constants["ByeiDashboard"]["UpgradeMembership"] = {};
Omniture.constants["ByeiDashboard"]["UpgradeMembership"] = {
    "eventname": "upgrade membership overlay"
};

Omniture.constants["ByeiDashboard"]["UpgradeMembershipCancel"] = {};
Omniture.constants["ByeiDashboard"]["UpgradeMembershipCancel"] = {
    "prop53": "upgrade membership cancel link",
    "eventname": "upgrade membership cancel link"
};

Omniture.constants["ByeiDashboard"]["ProgAgreement"] = {};
Omniture.constants["ByeiDashboard"]["ProgAgreement"] = {
    "eventname": "program agreement overlay"
};

Omniture.constants["ByeiDashboard"]["ProgAgreementPrint"] = {};
Omniture.constants["ByeiDashboard"]["ProgAgreementPrint"] = {
    "prop53": "program agreement print link",
    "eventname": "program agreement print link"
};

Omniture.constants["ByeiDashboard"]["DeEnroll"] = {};
Omniture.constants["ByeiDashboard"]["DeEnroll"] = {
    "eventname": "de-enroll overlay"
};

Omniture.constants["ByeiDashboard"]["DeEnrollNo"] = {};
Omniture.constants["ByeiDashboard"]["DeEnrollNo"] = {
    "prop53": "de-enroll review no link",
    "eventname": "de-enroll review no link"
};

Omniture.constants["ByeiDashboard"]["DeEnrollConfirm"] = {};
Omniture.constants["ByeiDashboard"]["DeEnrollConfirm"] = {
    "eventname": "de-enroll confirmation",
    "enrollStatus": "byei de-enroll success"
};

Omniture.constants["ByeiDashboard"]["DeEnrollFailure"] = {};
Omniture.constants["ByeiDashboard"]["DeEnrollFailure"] = {
    "eventname": "de-enroll failure",
    "errorStatus": "byei de-enroll failure"
};

Omniture.constants["ByeiDashboard"]["BackToAccount"] = {};
Omniture.constants["ByeiDashboard"]["BackToAccount"] = {
    "prop53": "back to my account link",
    "eventname": "back to my account link"
};

Omniture.constants["ByeiDashboard"]["BankerClose"] = {};
Omniture.constants["ByeiDashboard"]["BankerClose"] = {
    "prop53": "close link banker view",
    "eventname": "close link banker view"
};

Omniture.constants["ByeiDashboard"]["CreditView"] = {};
Omniture.constants["ByeiDashboard"]["CreditView"] = {
    "prop53": "credit view link",
    "eventname": "credit view link"
};

//Byei Dashboard Constants - End

//Page level values for Omni-specific speed bump
Omniture.constants["OmniSpeedBump"] = {};
Omniture.constants["OmniSpeedBump"]["siteSection"] = "system";
Omniture.constants["OmniSpeedBump"]["subSiteSection"] = "system";
Omniture.constants["OmniSpeedBump"]["pageMiddleSection"] = "system";

Omniture.constants["OmniSpeedBump"]["SpeedBump"] = {};
Omniture.constants["OmniSpeedBump"]["SpeedBump"] = {
    "eventname": "speedbump"
};

//Byei Constants - End

//B-17579 - Tagging: Password Reset for 24HB/Branch - Start
Omniture.constants["ResetPassword"] = {};
Omniture.constants["ResetPassword"]["siteSection"] = "banker servicing";
Omniture.constants["ResetPassword"]["subSiteSection"] = "login";
Omniture.constants["ResetPassword"]["pageMiddleSection"] = "banker servicing";

Omniture.constants["ResetPassword"]["UnlockPasswordClick"] = {};
Omniture.constants["ResetPassword"]["UnlockPasswordClick"] = {
    "eventname": "olb password unlock banker click",
    "prop40": "omni"
};

Omniture.constants["ResetPassword"]["UnlockPasswordClickProcessing"] = {};
Omniture.constants["ResetPassword"]["UnlockPasswordClickProcessing"] = {
    "eventname": "olb password unlock processing",
    "prop40": "omni"
};

Omniture.constants["ResetPassword"]["TempPasswordSuccess"] = {};
Omniture.constants["ResetPassword"]["TempPasswordSuccess"] = {
    "eventname": "olb password unlock temp password displayed",
    "prop40": "omni"
};

Omniture.constants["ResetPassword"]["TempPasswordFail"] = {};
Omniture.constants["ResetPassword"]["TempPasswordFail"] = {
    "eventname": "olb password unlock failed",
    "prop40": "omni"
};

Omniture.constants["ResetPassword"]["TempPasswordExpire"] = {};
Omniture.constants["ResetPassword"]["TempPasswordExpire"] = {
    "eventname": "olb password unlock password expired",
    "prop40": "omni"
};
//B-17579 - Tagging: Password Reset for 24HB/Branch - End

//Login Assist Constants - Start

//Page level values for Login Assist Retrieve Id functionality
Omniture.constants["RetrieveId"] = {};
Omniture.constants["RetrieveId"]["siteSection"] = "login assistance";
Omniture.constants["RetrieveId"]["subSiteSection"] = "retrieve id";
Omniture.constants["RetrieveId"]["pageMiddleSection"] = "login assistance";

Omniture.constants["RetrieveId"]["RetrieveId"] = {};
Omniture.constants["RetrieveId"]["RetrieveId"] = {
    "eventname": "retrieve id select personal or business"
};
//Page level values for Login Assist Retrieve Id Error Message functionality
Omniture.constants["RetrieveId"]["RetrievePersonalIdDirectedLockedOut"] = {};
Omniture.constants["RetrieveId"]["RetrievePersonalIdDirectedLockedOut"] = {
    "eventname": "retrieve id select personal or business directed after locked out",
    "prop13": "retrieve id select personal or business directed after locked out"
};
//CI July Release B-36094 - START
Omniture.constants["RetrieveId"]["RetrievePersonalIdAlreadyEnrolled"] = {};
Omniture.constants["RetrieveId"]["RetrievePersonalIdAlreadyEnrolled"] = {
    "eventname": "retrieve id select personal or business redirect already enrolled",
    "prop13": "retrieve id select personal or business redirect already enrolled"
};
//CI July Release B-36094 - END

//Page level values for Login Assist Retrieve Personal Id functionality
Omniture.constants["RetrievePersonalId"] = {};
Omniture.constants["RetrievePersonalId"]["siteSection"] = "login assistance";
Omniture.constants["RetrievePersonalId"]["subSiteSection"] = "retrieve id personal";
Omniture.constants["RetrievePersonalId"]["pageMiddleSection"] = "login assistance";

Omniture.constants["RetrievePersonalId"]["SelectIdMethod"] = {};
Omniture.constants["RetrievePersonalId"]["SelectIdMethod"] = {
    "eventname": "retrieve id personal account select id method"
};

Omniture.constants["RetrievePersonalId"]["Phone"] = {};
Omniture.constants["RetrievePersonalId"]["Phone"] = {
    "eventname": "retrieve id personal account enter phone and SSN"
};

Omniture.constants["RetrievePersonalId"]["Email"] = {};
Omniture.constants["RetrievePersonalId"]["Email"] = {
    "eventname": "retrieve id personal account enter email and SSN"
};

Omniture.constants["RetrievePersonalId"]["Account"] = {};
Omniture.constants["RetrievePersonalId"]["Account"] = {
    "eventname": "retrieve id personal account enter account and SSN"
};

Omniture.constants["RetrievePersonalId"]["VerifyIdentity"] = {};
Omniture.constants["RetrievePersonalId"]["VerifyIdentity"] = {
    "eventname": "retrieve id personal account verify id select code or account or pin"
};

Omniture.constants["RetrievePersonalId"]["VerifyIdentityViaTextOrEmail"] = {};
Omniture.constants["RetrievePersonalId"]["VerifyIdentityViaTextOrEmail"] = {
    "eventname": "retrieve id personal account verify id select OTP destination"
};

Omniture.constants["RetrievePersonalId"]["SelectAccount"] = {};
Omniture.constants["RetrievePersonalId"]["SelectAccount"] = {
    "eventname": "retrieve id personal account verify id select account"
};

Omniture.constants["RetrievePersonalId"]["EnterCode"] = {};
Omniture.constants["RetrievePersonalId"]["EnterCode"] = {
    "eventname": "retrieve id personal account verify id enter OTP code"
};

Omniture.constants["RetrievePersonalId"]["DdaAccount"] = {};
Omniture.constants["RetrievePersonalId"]["DdaAccount"] = {
    "eventname": "retrieve id personal account verify id DDA enter pin"
};

Omniture.constants["RetrievePersonalId"]["CcdAccount"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccount"] = {
    "eventname": "retrieve id personal account verify id credit card enter info"
};

Omniture.constants["RetrievePersonalId"]["LllmwAccount"] = {};
Omniture.constants["RetrievePersonalId"]["LllmwAccount"] = {
    "eventname": "retrieve id personal account verify id other account enter zip"
};

Omniture.constants["RetrievePersonalId"]["PersonalId"] = {};
Omniture.constants["RetrievePersonalId"]["PersonalId"] = {
    "eventname": "retrieve id personal account id displayed and enter password"
};

//Page level values for Login Assist Retrieve Personal Id Error Message functionality
Omniture.constants["RetrievePersonalId"]["PhoneSsnSystemUnavailable"] = {};
Omniture.constants["RetrievePersonalId"]["PhoneSsnSystemUnavailable"] = {
    "eventname": "retrieve id personal account enter phone ssn system error",
    "prop13": "retrieve id personal account enter phone ssn system error"
};

Omniture.constants["RetrievePersonalId"]["PhoneSsnValidationError"] = {};
Omniture.constants["RetrievePersonalId"]["PhoneSsnValidationError"] = {
    "eventname": "retrieve id personal account enter phone ssn user entry validation error",
    "prop13": "retrieve id personal account enter phone ssn user entry validation error"
};

Omniture.constants["RetrievePersonalId"]["PhoneSsnFirstTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["PhoneSsnFirstTimeError"] = {
    "eventname": "retrieve id personal enter phone number ssn user validation failure error1",
    "prop13": "retrieve id personal enter phone number ssn entered wrong info first time"
};

Omniture.constants["RetrievePersonalId"]["PhoneSsnSecondTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["PhoneSsnSecondTimeError"] = {
    "eventname": "retrieve id personal enter phone number ssn user validation failure error2",
    "prop13": "retrieve id personal enter phone number ssn entered wrong info second time"
};

Omniture.constants["RetrievePersonalId"]["PhoneSsnThirdTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["PhoneSsnThirdTimeError"] = {
    "eventname": "retrieve id personal enter phone number ssn user validation failure error3",
    "prop13": "retrieve id personal enter phone number ssn entered wrong info third time"
};

Omniture.constants["RetrievePersonalId"]["PhoneSsnFourthTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["PhoneSsnFourthTimeError"] = {
    "eventname": "retrieve id personal enter phone number ssn user validation failure error4",
    "prop13": "retrieve id personal enter phone number ssn entered wrong info fourth time"
};

Omniture.constants["RetrievePersonalId"]["PhoneSsnLockedOutError"] = {};
Omniture.constants["RetrievePersonalId"]["PhoneSsnLockedOutError"] = {
    "eventname": "retrieve id personal enter phone number ssn user validation locked out error",
    "prop13": "retrieve id personal enter phone number ssn user validation locked out error"
};

Omniture.constants["RetrievePersonalId"]["EmailSsnSystemUnavailable"] = {};
Omniture.constants["RetrievePersonalId"]["EmailSsnSystemUnavailable"] = {
    "eventname": "retrieve id personal account enter email ssn system error",
    "prop13": "retrieve id personal account enter email ssn system error"
};

Omniture.constants["RetrievePersonalId"]["EmailSsnValidationError"] = {};
Omniture.constants["RetrievePersonalId"]["EmailSsnValidationError"] = {
    "eventname": "retrieve id personal account enter email ssn user entry validation error",
    "prop13": "retrieve id personal account enter email ssn user entry validation error"
};

Omniture.constants["RetrievePersonalId"]["EmailSsnFirstTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["EmailSsnFirstTimeError"] = {
    "eventname": "retrieve id personal enter email and SSN user validation failure error1",
    "prop13": "retrieve id personal enter email and SSN user enters wrong info first time"
};

Omniture.constants["RetrievePersonalId"]["EmailSsnSecondTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["EmailSsnSecondTimeError"] = {
    "eventname": "retrieve id personal enter email and SSN user validation failure error2",
    "prop13": "retrieve id personal enter email and SSN user enters wrong info second time"
};

Omniture.constants["RetrievePersonalId"]["EmailSsnThirdTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["EmailSsnThirdTimeError"] = {
    "eventname": "retrieve id personal enter email and SSN user validation failure error3",
    "prop13": "retrieve id personal enter email and SSN user enters wrong info third time"
};

Omniture.constants["RetrievePersonalId"]["EmailSsnFourthTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["EmailSsnFourthTimeError"] = {
    "eventname": "retrieve id personal enter email and SSN user validation failure error4",
    "prop13": "retrieve id personal enter email and SSN user enters wrong info fourth time"
};

Omniture.constants["RetrievePersonalId"]["EmailSsnLockedOutError"] = {};
Omniture.constants["RetrievePersonalId"]["EmailSsnLockedOutError"] = {
    "eventname": "retrieve id personal enter email and SSN user validation locked out error",
    "prop13": "retrieve id personal enter email and SSN user validation locked out error"
};

Omniture.constants["RetrievePersonalId"]["AccountSsnSystemUnavailable"] = {};
Omniture.constants["RetrievePersonalId"]["AccountSsnSystemUnavailable"] = {
    "eventname": "retrieve id personal account enter account ssn system error",
    "prop13": "retrieve id personal account enter account ssn system error"
};

Omniture.constants["RetrievePersonalId"]["AccountSsnValidationError"] = {};
Omniture.constants["RetrievePersonalId"]["AccountSsnValidationError"] = {
    "eventname": "retrieve id personal account enter account ssn user entry validation error",
    "prop13": "retrieve id personal account enter account ssn user entry validation error"
};

Omniture.constants["RetrievePersonalId"]["AccountSsnFirstTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["AccountSsnFirstTimeError"] = {
    "eventname": "retrieve id personal enter account and SSN user validation failure error1",
    "prop13": "retrieve id personal enter account and SSN wrong info entered first time"
};

Omniture.constants["RetrievePersonalId"]["AccountSsnSecondTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["AccountSsnSecondTimeError"] = {
    "eventname": "retrieve id personal enter account and SSN user validation failure error2",
    "prop13": "retrieve id personal enter account and SSN wrong info entered second time"
};

Omniture.constants["RetrievePersonalId"]["AccountSsnThirdTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["AccountSsnThirdTimeError"] = {
    "eventname": "retrieve id personal enter account and SSN user validation failure error3",
    "prop13": "retrieve id personal enter account and SSN wrong info entered third time"
};

Omniture.constants["RetrievePersonalId"]["AccountSsnFourthTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["AccountSsnFourthTimeError"] = {
    "eventname": "retrieve id personal enter account and SSN user validation failure error4",
    "prop13": "retrieve id personal enter account and SSN wrong info entered fourth time"
};

Omniture.constants["RetrievePersonalId"]["AccountSsnLockedOutError"] = {};
Omniture.constants["RetrievePersonalId"]["AccountSsnLockedOutError"] = {
    "eventname": "retrieve id personal enter account and SSN user validation locked out error",
    "prop13": "retrieve id personal enter account and SSN user validation locked out error"
};

Omniture.constants["RetrievePersonalId"]["VerifyIdentitySystemUnavailable"] = {};
Omniture.constants["RetrievePersonalId"]["VerifyIdentitySystemUnavailable"] = {
    "eventname": "retrieve id personal verify id select code or account or pin system error",
    "prop13": "retrieve id personal verify id select code or account or pin system error"
};

Omniture.constants["RetrievePersonalId"]["VerifyIdentityViaTextOrEmailSystemUnavailable"] = {};
Omniture.constants["RetrievePersonalId"]["VerifyIdentityViaTextOrEmailSystemUnavailable"] = {
    "eventname": "retrieve id personal verify identity select OTP destination System error",
    "prop13": "retrieve id personal verify identity select OTP destination System error"
};

Omniture.constants["RetrievePersonalId"]["VerifyIdentityViaTextOrEmailLockedOutError"] = {};
Omniture.constants["RetrievePersonalId"]["VerifyIdentityViaTextOrEmailLockedOutError"] = {
    "eventname": "retrieve id personal verify identity select OTP destination locked out error",
    "prop13": "retrieve id personal verify identity select OTP destination locked out error"
};

Omniture.constants["RetrievePersonalId"]["EnterCodeSystemUnavailable"] = {};
Omniture.constants["RetrievePersonalId"]["EnterCodeSystemUnavailable"] = {
    "eventname": "retrieve id personal enter OTP code system error",
    "prop13": "retrieve id personal enter OTP code system error"
};

Omniture.constants["RetrievePersonalId"]["EnterCodeOtpNotEnteredError"] = {};
Omniture.constants["RetrievePersonalId"]["EnterCodeOtpNotEnteredError"] = {
    "eventname": "retrieve id personal enter OTP code user entry validation error",
    "prop13": "retrieve id personal enter OTP code no user input"
};

Omniture.constants["RetrievePersonalId"]["EnterCodeOtpFormatError"] = {};
Omniture.constants["RetrievePersonalId"]["EnterCodeOtpFormatError"] = {
    "eventname": "retrieve id personal enter OTP code user entry format error",
    "prop13": "retrieve id personal enter OTP code user entered less than six characters"
};

Omniture.constants["RetrievePersonalId"]["EnterCodeOtpExpiredError"] = {};
Omniture.constants["RetrievePersonalId"]["EnterCodeOtpExpiredError"] = {
    "eventname": "retrieve id personal enter OTP code user entry validation error",
    "prop13": "retrieve id personal enter OTP code user enters expired OTP code"
};

Omniture.constants["RetrievePersonalId"]["EnterCodeOtpFirstTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["EnterCodeOtpFirstTimeError"] = {
    "eventname": "retrieve id personal enter OTP code user validation failure error1",
    "prop13": "retrieve id personal enter OTP code user enters wrong OTP code first time"
};

Omniture.constants["RetrievePersonalId"]["EnterCodeOtpSecondTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["EnterCodeOtpSecondTimeError"] = {
    "eventname": "retrieve id personal enter OTP code user validation failure error2",
    "prop13": "retrieve id personal enter OTP code user enters wrong OTP code second time"
};

Omniture.constants["RetrievePersonalId"]["EnterCodeOtpLockedOutError"] = {};
Omniture.constants["RetrievePersonalId"]["EnterCodeOtpLockedOutError"] = {
    "eventname": "retrieve id personal enter OTP code user validation locked out error",
    "prop13": "retrieve id personal enter OTP code user validation locked out error"
};

Omniture.constants["RetrievePersonalId"]["SelectAccountSystemUnavailable"] = {};
Omniture.constants["RetrievePersonalId"]["SelectAccountSystemUnavailable"] = {
    "eventname": "retrieve id personal verify identity select account system error",
    "prop13": "retrieve id personal verify identity select account system error"
};

Omniture.constants["RetrievePersonalId"]["DdaAccountSystemUnavailable"] = {};
Omniture.constants["RetrievePersonalId"]["DdaAccountSystemUnavailable"] = {
    "eventname": "retrieve id personal verify identity DDA enter PIN system error",
    "prop13": "retrieve id personal verify identity DDA enter PIN system error"
};

Omniture.constants["RetrievePersonalId"]["DdaAccountNotEnteredError"] = {};
Omniture.constants["RetrievePersonalId"]["DdaAccountNotEnteredError"] = {
    "eventname": "retrieve id personal verify DDA enter PIN user entry validation error",
    "prop13": "retrieve id personal verify DDA enter PIN no user input"
};

Omniture.constants["RetrievePersonalId"]["DdaAccountFormatError"] = {};
Omniture.constants["RetrievePersonalId"]["DdaAccountFormatError"] = {
    "eventname": "retrieve id personal verify DDA enter PIN user entry format error",
    "prop13": "retrieve id personal verify DDA enter PIN less than four characters entered"
};

Omniture.constants["RetrievePersonalId"]["DdaAccountFirstTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["DdaAccountFirstTimeError"] = {
    "eventname": "retrieve id personal verify DDA enter PIN user validation failure error1",
    "prop13": "retrieve id personal verify DDA enter PIN wrong pin entered first time"
};

Omniture.constants["RetrievePersonalId"]["DdaAccountSecondTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["DdaAccountSecondTimeError"] = {
    "eventname": "retrieve id personal verify DDA enter PIN user validation failure error2",
    "prop13": "retrieve id personal verify DDA enter PIN wrong pin entered second time"
};

Omniture.constants["RetrievePersonalId"]["DdaAccountThirdTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["DdaAccountThirdTimeError"] = {
    "eventname": "retrieve id personal verify DDA enter PIN user validation failure error3",
    "prop13": "retrieve id personal verify DDA enter PIN wrong pin entered third time"
};

Omniture.constants["RetrievePersonalId"]["DdaAccountFourthTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["DdaAccountFourthTimeError"] = {
    "eventname": "retrieve id personal verify DDA enter PIN user validation failure error4",
    "prop13": "retrieve id personal verify DDA enter PIN wrong pin entered fourth time"
};

Omniture.constants["RetrievePersonalId"]["DdaAccountLockedOutError"] = {};
Omniture.constants["RetrievePersonalId"]["DdaAccountLockedOutError"] = {
    "eventname": "retrieve id personal verify DDA enter PIN user validation locked out error",
    "prop13": "retrieve id personal verify DDA enter PIN user validation locked out error"
};

Omniture.constants["RetrievePersonalId"]["CcdAccountSystemUnavailable"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccountSystemUnavailable"] = {
    "eventname": "retrieve id personal verify credit card enter info system error",
    "prop13": "retrieve id personal verify credit card enter info system error"
};

Omniture.constants["RetrievePersonalId"]["CcdAccountNotEnteredError"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccountNotEnteredError"] = {
    "eventname": "retrieve id personal verify credit card info user entry validation error",
    "prop13": "retrieve id personal verify credit card info user entry validation error"
};

Omniture.constants["RetrievePersonalId"]["CcdAccountCvvNotEnteredError"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccountCvvNotEnteredError"] = {
    "eventname": "retrieve id personal verify credit card CVV user entry validation error",
    "prop13": "retrieve id personal verify credit card CVV no user input for cvv"
};

Omniture.constants["RetrievePersonalId"]["CcdAccountCvvFormatError"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccountCvvFormatError"] = {
    "eventname": "retrieve id personal verify credit card CVV user entry format error",
    "prop13": "retrieve id personal verify credit card CVV user entered cvv in wrong format"
};

Omniture.constants["RetrievePersonalId"]["CcdAccountExpirationDateNotEnteredError"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccountExpirationDateNotEnteredError"] = {
    "eventname": "retrieve id personal verify credit card date user entry validation error",
    "prop13": "retrieve id personal verify credit card date no user input"
};

Omniture.constants["RetrievePersonalId"]["CcdAccountExpirationDateFormatError"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccountExpirationDateFormatError"] = {
    "eventname": "retrieve id personal verify credit card date user entry format error",
    "prop13": "retrieve id personal verify credit card date user input in wrong format"
};

Omniture.constants["RetrievePersonalId"]["CcdAccountZipNotEnteredError"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccountZipNotEnteredError"] = {
    "eventname": "retrieve id personal verify credit card zip user entry validation error",
    "prop13": "retrieve id personal verify credit card zip no user input"
};

Omniture.constants["RetrievePersonalId"]["CcdAccountZipFormatError"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccountZipFormatError"] = {
    "eventname": "retrieve id personal verify credit card zip user entry format error",
    "prop13": "retrieve id personal verify credit card zip user entered zip in wrong format"
};

Omniture.constants["RetrievePersonalId"]["CcdAccountFirstTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccountFirstTimeError"] = {
    "eventname": "retrieve id personal verify credit card info user validation failure error1",
    "prop13": "retrieve id personal verify credit card info wrong info entered first time"
};

Omniture.constants["RetrievePersonalId"]["CcdAccountSecondTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccountSecondTimeError"] = {
    "eventname": "retrieve id personal verify credit card info user validation failure error2",
    "prop13": "retrieve id personal verify credit card info wrong info entered second time"
};

Omniture.constants["RetrievePersonalId"]["CcdAccountThirdTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccountThirdTimeError"] = {
    "eventname": "retrieve id personal verify credit card info user validation failure error3",
    "prop13": "retrieve id personal verify credit card info wrong info entered third time"
};

Omniture.constants["RetrievePersonalId"]["CcdAccountFourthTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccountFourthTimeError"] = {
    "eventname": "retrieve id personal verify credit card info user validation failure error4",
    "prop13": "retrieve id personal verify credit card info wrong info entered fourth time"
};

Omniture.constants["RetrievePersonalId"]["CcdAccountLockedOutError"] = {};
Omniture.constants["RetrievePersonalId"]["CcdAccountLockedOutError"] = {
    "eventname": "retrieve id personal verify credit card info user validation locked error",
    "prop13": "retrieve id personal verify credit card info user validation locked error"
};

Omniture.constants["RetrievePersonalId"]["LllmwAccountSystemUnavailable"] = {};
Omniture.constants["RetrievePersonalId"]["LllmwAccountSystemUnavailable"] = {
    "eventname": "retrieve id personal verify identity other account enter zip system error",
    "prop13": "retrieve id personal verify identity other account enter zip system error"
};

Omniture.constants["RetrievePersonalId"]["LllmwAccountNotEnteredError"] = {};
Omniture.constants["RetrievePersonalId"]["LllmwAccountNotEnteredError"] = {
    "eventname": "retrieve id personal verify other account zip user entry validation error",
    "prop13": "retrieve id personal verify other account zip no user input"
};

Omniture.constants["RetrievePersonalId"]["LllmwAccountFormatError"] = {};
Omniture.constants["RetrievePersonalId"]["LllmwAccountFormatError"] = {
    "eventname": "retrieve id personal verify other account zip user entry format error",
    "prop13": "retrieve id personal verify other account zip user entered zip wrong format"
};

Omniture.constants["RetrievePersonalId"]["LllmwAccountFirstTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["LllmwAccountFirstTimeError"] = {
    "eventname": "retrieve id personal verify other account zip user validation failure error1",
    "prop13": "retrieve id personal verify other account zip wrong zip entered first time"
};

Omniture.constants["RetrievePersonalId"]["LllmwAccountSecondTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["LllmwAccountSecondTimeError"] = {
    "eventname": "retrieve id personal verify other account zip user validation failure error2",
    "prop13": "retrieve id personal verify other account zip wrong zip entered second time"
};

Omniture.constants["RetrievePersonalId"]["LllmwAccountThirdTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["LllmwAccountThirdTimeError"] = {
    "eventname": "retrieve id personal verify other account zip user validation failure error3",
    "prop13": "retrieve id personal verify other account zip wrong zip entered third time"
};

Omniture.constants["RetrievePersonalId"]["LllmwAccountFourthTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["LllmwAccountFourthTimeError"] = {
    "eventname": "retrieve id personal verify other account zip user validation failure error4",
    "prop13": "retrieve id personal verify other account zip wrong zip entered fourth time"
};

Omniture.constants["RetrievePersonalId"]["LllmwAccountLockedOutError"] = {};
Omniture.constants["RetrievePersonalId"]["LllmwAccountLockedOutError"] = {
    "eventname": "retrieve id personal verify other account zip user validation locked out error",
    "prop13": "retrieve id personal verify other account zip user validation locked out error"
};

Omniture.constants["RetrievePersonalId"]["PersonalIdSystemUnavailable"] = {};
Omniture.constants["RetrievePersonalId"]["PersonalIdSystemUnavailable"] = {
    "eventname": "retrieve id personal personal id displayed and enter password system error",
    "prop13": "retrieve id personal personal id displayed and enter password system error"
};

Omniture.constants["RetrievePersonalId"]["PersonalIdNotEnteredError"] = {};
Omniture.constants["RetrievePersonalId"]["PersonalIdNotEnteredError"] = {
    "eventname": "retrieve id personal id displayed enter pwd user entry validation error",
    "prop13": "retrieve id personal id displayed enter pwd no input by user"
};

Omniture.constants["RetrievePersonalId"]["PersonalIdFormatError"] = {};
Omniture.constants["RetrievePersonalId"]["PersonalIdFormatError"] = {
    "eventname": "retrieve id personal id displayed enter pwd user entry format error",
    "prop13": "retrieve id personal id displayed enter pwd user entry format error"
};

Omniture.constants["RetrievePersonalId"]["FirstTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["FirstTimeError"] = {
    "eventname": "retrieve id personal id displayed enter pwd user validation failure error1",
    "prop13": "retrieve id personal id displayed enter pwd wrong pwd entered first time"
};


Omniture.constants["RetrievePersonalId"]["SecondTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["SecondTimeError"] = {
    "eventname": "retrieve id personal id displayed enter pwd user validation failure error2",
    "prop13": "retrieve id personal id displayed enter pwd wrong pwd entered second time"
};

Omniture.constants["RetrievePersonalId"]["ThirdTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["ThirdTimeError"] = {
    "eventname": "retrieve id personal id displayed enter pwd user validation failure error3",
    "prop13": "retrieve id personal id displayed enter pwd wrong pwd entered third time"
};

Omniture.constants["RetrievePersonalId"]["FourthTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["FourthTimeError"] = {
    "eventname": "retrieve id personal id displayed enter pwd user validation failure error4",
    "prop13": "retrieve id personal id displayed enter pwd wrong pwd entered fourth time"
};

// Retrieve Id - Pilot user changes start
Omniture.constants["RetrievePersonalId"]["PilotUserPersonalIdNotEnteredError"] = {};
Omniture.constants["RetrievePersonalId"]["PilotUserPersonalIdNotEnteredError"] = {
    "eventname": "retrieve id personal id displayed enter pwd case entry validation error",
    "prop13": "retrieve id personal id displayed enter pwd case entry validation error"
};

Omniture.constants["RetrievePersonalId"]["PilotUserPersonalIdFormatError"] = {};
Omniture.constants["RetrievePersonalId"]["PilotUserPersonalIdFormatError"] = {
    "eventname": "retrieve id personal id displayed enter pwd case user entry format error",
    "prop13": "retrieve id personal id displayed enter pwd case user entry format error"
};

Omniture.constants["RetrievePersonalId"]["PilotUserFirstTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["PilotUserFirstTimeError"] = {
    "eventname": "retrieve id personal id displayed enter pwd invalid pwd case error1",
    "prop13": "retrieve id personal id displayed enter pwd invalid pwd case error1"
};


Omniture.constants["RetrievePersonalId"]["PilotUserSecondTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["PilotUserSecondTimeError"] = {
    "eventname": "retrieve id personal id displayed enter pwd invalid pwd case error2",
    "prop13": "retrieve id personal id displayed enter pwd invalid pwd case error2"
};

Omniture.constants["RetrievePersonalId"]["PilotUserThirdTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["PilotUserThirdTimeError"] = {
    "eventname": "retrieve id personal id displayed enter pwd invalid pwd case error3",
    "prop13": "retrieve id personal id displayed enter pwd invalid pwd case error3"
};

Omniture.constants["RetrievePersonalId"]["PilotUserFourthTimeError"] = {};
Omniture.constants["RetrievePersonalId"]["PilotUserFourthTimeError"] = {
    "eventname": "retrieve id personal id displayed enter pwd invalid pwd case error4",
    "prop13": "retrieve id personal id displayed enter pwd invalid pwd case error4"
};
// Retrieve Id - Pilot user changes end

//Page level values for Login Assist Retrieve Business Id functionality
Omniture.constants["RetrieveBusinessId"] = {};
Omniture.constants["RetrieveBusinessId"]["siteSection"] = "login assistance";
Omniture.constants["RetrieveBusinessId"]["subSiteSection"] = "retrieve id business";
Omniture.constants["RetrieveBusinessId"]["pageMiddleSection"] = "login assistance";

Omniture.constants["RetrieveBusinessId"]["RetrieveBusinessPersonalId"] = {};
Omniture.constants["RetrieveBusinessId"]["RetrieveBusinessPersonalId"] = {
    "eventname": "retrieve id business account select account"
};

Omniture.constants["RetrieveBusinessId"]["SelectIdMethod"] = {};
Omniture.constants["RetrieveBusinessId"]["SelectIdMethod"] = {
    "eventname": "retrieve id business account choose id method"
};

Omniture.constants["RetrieveBusinessId"]["Phone"] = {};
Omniture.constants["RetrieveBusinessId"]["Phone"] = {
    "eventname": "retrieve id business account enter phone and SSN"
};

Omniture.constants["RetrieveBusinessId"]["Email"] = {};
Omniture.constants["RetrieveBusinessId"]["Email"] = {
    "eventname": "retrieve id business account enter email and SSN"
};

// Retrieve Id business - Enter Business Id flow Start
Omniture.constants["RetrieveBusinessId"]["Account"] = {};
Omniture.constants["RetrieveBusinessId"]["Account"] = {
    "eventname": "retrieve id business account enter account card ssn tin"
};

Omniture.constants["RetrieveBusinessId"]["AccountSsnTinFirstTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["AccountSsnTinFirstTimeError"] = {
    "eventname": "retrieve id business enter account card ssn tin user validation failure error1",
    "prop13": "retrieve id business enter account card ssn tin entered wrong info first time"
};

Omniture.constants["RetrieveBusinessId"]["AccountSsnTinSecondTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["AccountSsnTinSecondTimeError"] = {
    "eventname": "retrieve id business enter account card ssn tin user validation failure error2",
    "prop13": "retrieve id business enter account card ssn tin entered wrong info second time"
};

Omniture.constants["RetrieveBusinessId"]["AccountSsnTinThirdTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["AccountSsnTinThirdTimeError"] = {
    "eventname": "retrieve id business enter account card ssn tin user validation failure error3",
    "prop13": "retrieve id business enter account card ssn tin entered wrong info third time"
};

Omniture.constants["RetrieveBusinessId"]["AccountSsnTinFourthTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["AccountSsnTinFourthTimeError"] = {
    "eventname": "retrieve id business enter account card ssn tin user validation failure error4",
    "prop13": "retrieve id business enter account card ssn tin entered wrong info fourth time"
};

Omniture.constants["RetrieveBusinessId"]["AccountSsnTinLockedOutError"] = {};
Omniture.constants["RetrieveBusinessId"]["AccountSsnTinLockedOutError"] = {
    "eventname": "retrieve id business enter account card ssn tin user validation lockout error",
    "prop13": "retrieve id business enter account card ssn tin user validation lockout error"
};

Omniture.constants["RetrieveBusinessId"]["AccountSsnTinSystemUnavailable"] = {};
Omniture.constants["RetrieveBusinessId"]["AccountSsnTinSystemUnavailable"] = {
    "eventname": "retrieve id business enter account card ssn tin system error",
    "prop13": "retrieve id business account enter account card ssn tin system error"
};

Omniture.constants["RetrieveBusinessId"]["AccountSsnTinValidationError"] = {};
Omniture.constants["RetrieveBusinessId"]["AccountSsnTinValidationError"] = {
    "eventname": "retrieve id business enter account card ssn tin user entry validation error",
    "prop13": "retrieve id business enter account card ssn tin user entry validation error"
};
// Retrieve Id business - Enter Business Id flow End

Omniture.constants["RetrieveBusinessId"]["VerifyIdentity"] = {};
Omniture.constants["RetrieveBusinessId"]["VerifyIdentity"] = {
    "eventname": "retrieve id business account verify id select code or account or pin"
};

Omniture.constants["RetrieveBusinessId"]["VerifyIdentityViaTextOrEmail"] = {};
Omniture.constants["RetrieveBusinessId"]["VerifyIdentityViaTextOrEmail"] = {
    "eventname": "retrieve id business account verify id select OTP destination"
};

Omniture.constants["RetrieveBusinessId"]["SelectAccount"] = {};
Omniture.constants["RetrieveBusinessId"]["SelectAccount"] = {
    "eventname": "retrieve id business account verify id select account"
};

Omniture.constants["RetrieveBusinessId"]["EnterCode"] = {};
Omniture.constants["RetrieveBusinessId"]["EnterCode"] = {
    "eventname": "retrieve id business account verify id enter OTP code"
};

Omniture.constants["RetrieveBusinessId"]["DdaAccount"] = {};
Omniture.constants["RetrieveBusinessId"]["DdaAccount"] = {
    "eventname": "retrieve id business account verify id DDA enter pin"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccount"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccount"] = {
    "eventname": "retrieve id business account verify id credit card enter info"
};

Omniture.constants["RetrieveBusinessId"]["LllmwAccount"] = {};
Omniture.constants["RetrieveBusinessId"]["LllmwAccount"] = {
    "eventname": "retrieve id business account verify id other account enter zip"
};

Omniture.constants["RetrieveBusinessId"]["PersonalId"] = {};
Omniture.constants["RetrieveBusinessId"]["PersonalId"] = {
    "eventname": "retrieve id business account id displayed and enter password"
};

//Page level values for Login Assist Retrieve Personal Id Error Message functionality
Omniture.constants["RetrieveBusinessId"]["PhoneSsnSystemUnavailable"] = {};
Omniture.constants["RetrieveBusinessId"]["PhoneSsnSystemUnavailable"] = {
    "eventname": "retrieve id business account enter phone ssn system error",
    "prop13": "retrieve id business account enter phone ssn system error"
};

Omniture.constants["RetrieveBusinessId"]["PhoneSsnValidationError"] = {};
Omniture.constants["RetrieveBusinessId"]["PhoneSsnValidationError"] = {
    "eventname": "retrieve id business account enter phone ssn user entry validation error",
    "prop13": "retrieve id business account enter phone ssn user entry validation error"
};

Omniture.constants["RetrieveBusinessId"]["PhoneSsnFirstTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["PhoneSsnFirstTimeError"] = {
    "eventname": "retrieve id business enter phone number ssn user validation failure error1",
    "prop13": "retrieve id business enter phone number ssn entered wrong info first time"
};

Omniture.constants["RetrieveBusinessId"]["PhoneSsnSecondTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["PhoneSsnSecondTimeError"] = {
    "eventname": "retrieve id business enter phone number ssn user validation failure error2",
    "prop13": "retrieve id business enter phone number ssn entered wrong info second time"
};

Omniture.constants["RetrieveBusinessId"]["PhoneSsnThirdTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["PhoneSsnThirdTimeError"] = {
    "eventname": "retrieve id business enter phone number ssn user validation failure error3",
    "prop13": "retrieve id business enter phone number ssn entered wrong info third time"
};

Omniture.constants["RetrieveBusinessId"]["PhoneSsnFourthTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["PhoneSsnFourthTimeError"] = {
    "eventname": "retrieve id business enter phone number ssn user validation failure error4",
    "prop13": "retrieve id business enter phone number ssn entered wrong info fourth time"
};

Omniture.constants["RetrieveBusinessId"]["PhoneSsnLockedOutError"] = {};
Omniture.constants["RetrieveBusinessId"]["PhoneSsnLockedOutError"] = {
    "eventname": "retrieve id business enter phone number ssn user validation locked out error",
    "prop13": "retrieve id business enter phone number ssn user validation locked out error"
};

Omniture.constants["RetrieveBusinessId"]["EmailSsnSystemUnavailable"] = {};
Omniture.constants["RetrieveBusinessId"]["EmailSsnSystemUnavailable"] = {
    "eventname": "retrieve id business account enter email ssn system error",
    "prop13": "retrieve id business account enter email ssn system error"
};

Omniture.constants["RetrieveBusinessId"]["EmailSsnValidationError"] = {};
Omniture.constants["RetrieveBusinessId"]["EmailSsnValidationError"] = {
    "eventname": "retrieve id business account enter email ssn user entry validation error",
    "prop13": "retrieve id business account enter email ssn user entry validation error"
};

Omniture.constants["RetrieveBusinessId"]["EmailSsnFirstTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["EmailSsnFirstTimeError"] = {
    "eventname": "retrieve id business enter email and SSN user validation failure error1",
    "prop13": "retrieve id business enter email and SSN user enters wrong info first time"
};

Omniture.constants["RetrieveBusinessId"]["EmailSsnSecondTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["EmailSsnSecondTimeError"] = {
    "eventname": "retrieve id business enter email and SSN user validation failure error2",
    "prop13": "retrieve id business enter email and SSN user enters wrong info second time"
};

Omniture.constants["RetrieveBusinessId"]["EmailSsnThirdTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["EmailSsnThirdTimeError"] = {
    "eventname": "retrieve id business enter email and SSN user validation failure error3",
    "prop13": "retrieve id business enter email and SSN user enters wrong info third time"
};

Omniture.constants["RetrieveBusinessId"]["EmailSsnFourthTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["EmailSsnFourthTimeError"] = {
    "eventname": "retrieve id business enter email and SSN user validation failure error4",
    "prop13": "retrieve id business enter email and SSN user enters wrong info fourth time"
};

Omniture.constants["RetrieveBusinessId"]["EmailSsnLockedOutError"] = {};
Omniture.constants["RetrieveBusinessId"]["EmailSsnLockedOutError"] = {
    "eventname": "retrieve id business enter email and SSN user validation locked out error",
    "prop13": "retrieve id business enter email and SSN user validation locked out error"
};

Omniture.constants["RetrieveBusinessId"]["VerifyIdentitySystemUnavailable"] = {};
Omniture.constants["RetrieveBusinessId"]["VerifyIdentitySystemUnavailable"] = {
    "eventname": "retrieve id business verify id select code or account or pin system error",
    "prop13": "retrieve id business verify id select code or account or pin system error"
};

Omniture.constants["RetrieveBusinessId"]["VerifyIdentityViaTextOrEmailSystemUnavailable"] = {};
Omniture.constants["RetrieveBusinessId"]["VerifyIdentityViaTextOrEmailSystemUnavailable"] = {
    "eventname": "retrieve id business verify identity select OTP destination System error",
    "prop13": "retrieve id business verify identity select OTP destination System error"
};

Omniture.constants["RetrieveBusinessId"]["VerifyIdentityViaTextOrEmailLockedOutError"] = {};
Omniture.constants["RetrieveBusinessId"]["VerifyIdentityViaTextOrEmailLockedOutError"] = {
    "eventname": "retrieve id business verify identity select OTP destination locked out error",
    "prop13": "retrieve id business verify identity select OTP destination locked out error"
};

Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpNotEnteredError"] = {};
Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpNotEnteredError"] = {
    "eventname": "retrieve id business enter OTP code user entry validation error",
    "prop13": "retrieve id business enter OTP code no user input"
};

Omniture.constants["RetrieveBusinessId"]["EnterCodeSystemUnavailable"] = {};
Omniture.constants["RetrieveBusinessId"]["EnterCodeSystemUnavailable"] = {
    "eventname": "retrieve id business enter OTP code system error",
    "prop13": "retrieve id business enter OTP code system error"
};

Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpFormatError"] = {};
Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpFormatError"] = {
    "eventname": "retrieve id business enter OTP code user entry format error",
    "prop13": "retrieve id business enter OTP code user entered less than six characters"
};

Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpExpiredError"] = {};
Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpExpiredError"] = {
    "eventname": "retrieve id business enter OTP code user entry validation error",
    "prop13": "retrieve id business enter OTP code user enters expired OTP code"
};

Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpFirstTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpFirstTimeError"] = {
    "eventname": "retrieve id business enter OTP code user validation failure error1",
    "prop13": "retrieve id business enter OTP code user enters wrong OTP code first time"
};

Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpSecondTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpSecondTimeError"] = {
    "eventname": "retrieve id business enter OTP code user validation failure error2",
    "prop13": "retrieve id business enter OTP code user enters wrong OTP code second time"
};

Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpLockedOutError"] = {};
Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpLockedOutError"] = {
    "eventname": "retrieve id business enter OTP code user validation locked out error",
    "prop13": "retrieve id business enter OTP code user validation locked out error"
};

Omniture.constants["RetrieveBusinessId"]["SelectAccountSystemUnavailable"] = {};
Omniture.constants["RetrieveBusinessId"]["SelectAccountSystemUnavailable"] = {
    "eventname": "retrieve id business verify identity select account system error",
    "prop13": "retrieve id business verify identity select account system error"
};

Omniture.constants["RetrieveBusinessId"]["DdaAccountSystemUnavailable"] = {};
Omniture.constants["RetrieveBusinessId"]["DdaAccountSystemUnavailable"] = {
    "eventname": "retrieve id business verify identity DDA enter PIN system error",
    "prop13": "retrieve id business verify identity DDA enter PIN system error"
};

Omniture.constants["RetrieveBusinessId"]["DdaAccountNotEnteredError"] = {};
Omniture.constants["RetrieveBusinessId"]["DdaAccountNotEnteredError"] = {
    "eventname": "retrieve id business verify DDA enter PIN user entry validation error",
    "prop13": "retrieve id business verify DDA enter PIN no user input"
};

Omniture.constants["RetrieveBusinessId"]["DdaAccountFormatError"] = {};
Omniture.constants["RetrieveBusinessId"]["DdaAccountFormatError"] = {
    "eventname": "retrieve id business verify DDA enter PIN user entry format error",
    "prop13": "retrieve id business verify DDA enter PIN less than four characters entered"
};

Omniture.constants["RetrieveBusinessId"]["DdaAccountFirstTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["DdaAccountFirstTimeError"] = {
    "eventname": "retrieve id business verify DDA enter PIN user validation failure error1",
    "prop13": "retrieve id business verify DDA enter PIN wrong pin entered first time"
};

Omniture.constants["RetrieveBusinessId"]["DdaAccountSecondTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["DdaAccountSecondTimeError"] = {
    "eventname": "retrieve id business verify DDA enter PIN user validation failure error2",
    "prop13": "retrieve id business verify DDA enter PIN wrong pin entered second time"
};

Omniture.constants["RetrieveBusinessId"]["DdaAccountThirdTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["DdaAccountThirdTimeError"] = {
    "eventname": "retrieve id business verify DDA enter PIN user validation failure error3",
    "prop13": "retrieve id business verify DDA enter PIN wrong pin entered third time"
};

Omniture.constants["RetrieveBusinessId"]["DdaAccountFourthTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["DdaAccountFourthTimeError"] = {
    "eventname": "retrieve id business verify DDA enter PIN user validation failure error4",
    "prop13": "retrieve id business verify DDA enter PIN wrong pin entered fourth time"
};

Omniture.constants["RetrieveBusinessId"]["DdaAccountLockedOutError"] = {};
Omniture.constants["RetrieveBusinessId"]["DdaAccountLockedOutError"] = {
    "eventname": "retrieve id business verify DDA enter PIN user validation locked out error",
    "prop13": "retrieve id business verify DDA enter PIN user validation locked out error"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccountSystemUnavailable"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccountSystemUnavailable"] = {
    "eventname": "retrieve id business verify credit card enter info system error",
    "prop13": "retrieve id business verify credit card enter info system error"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccountNotEnteredError"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccountNotEnteredError"] = {
    "eventname": "retrieve id business verify credit card info user entry validation error",
    "prop13": "retrieve id business verify credit card info user entry validation error"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccountCvvNotEnteredError"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccountCvvNotEnteredError"] = {
    "eventname": "retrieve id business verify credit card CVV user entry validation error",
    "prop13": "retrieve id business verify credit card CVV no user input for cvv"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccountCvvFormatError"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccountCvvFormatError"] = {
    "eventname": "retrieve id business verify credit card CVV user entry format error",
    "prop13": "retrieve id business verify credit card CVV user entered cvv in wrong format"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccountExpirationDateNotEnteredError"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccountExpirationDateNotEnteredError"] = {
    "eventname": "retrieve id business verify credit card date user entry validation error",
    "prop13": "retrieve id business verify credit card date no user input"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccountExpirationDateFormatError"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccountExpirationDateFormatError"] = {
    "eventname": "retrieve id business verify credit card date user entry format error",
    "prop13": "retrieve id business verify credit card date user input in wrong format"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccountZipNotEnteredError"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccountZipNotEnteredError"] = {
    "eventname": "retrieve id business verify credit card zip user entry validation error",
    "prop13": "retrieve id business verify credit card zip no user input"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccountZipFormatError"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccountZipFormatError"] = {
    "eventname": "retrieve id business verify credit card zip user entry format error",
    "prop13": "retrieve id business verify credit card zip user entered zip in wrong format"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccountFirstTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccountFirstTimeError"] = {
    "eventname": "retrieve id business verify credit card info user validation failure error1",
    "prop13": "retrieve id business verify credit card info wrong info entered first time"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccountSecondTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccountSecondTimeError"] = {
    "eventname": "retrieve id business verify credit card info user validation failure error2",
    "prop13": "retrieve id business verify credit card info wrong info entered second time"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccountThirdTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccountThirdTimeError"] = {
    "eventname": "retrieve id business verify credit card info user validation failure error3",
    "prop13": "retrieve id business verify credit card info wrong info entered third time"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccountFourthTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccountFourthTimeError"] = {
    "eventname": "retrieve id business verify credit card info user validation failure error4",
    "prop13": "retrieve id business verify credit card info wrong info entered fourth time"
};

Omniture.constants["RetrieveBusinessId"]["CcdAccountLockedOutError"] = {};
Omniture.constants["RetrieveBusinessId"]["CcdAccountLockedOutError"] = {
    "eventname": "retrieve id business verify credit card info user validation locked error",
    "prop13": "retrieve id business verify credit card info user validation locked error"
};

Omniture.constants["RetrieveBusinessId"]["LllmwAccountSystemUnavailable"] = {};
Omniture.constants["RetrieveBusinessId"]["LllmwAccountSystemUnavailable"] = {
    "eventname": "retrieve id business verify identity other account enter zip system error",
    "prop13": "retrieve id business verify identity other account enter zip system error"
};

Omniture.constants["RetrieveBusinessId"]["LllmwAccountNotEnteredError"] = {};
Omniture.constants["RetrieveBusinessId"]["LllmwAccountNotEnteredError"] = {
    "eventname": "retrieve id business verify other account zip user entry validation error",
    "prop13": "retrieve id business verify other account zip no user input"
};

Omniture.constants["RetrieveBusinessId"]["LllmwAccountFormatError"] = {};
Omniture.constants["RetrieveBusinessId"]["LllmwAccountFormatError"] = {
    "eventname": "retrieve id business verify other account zip user entry format error",
    "prop13": "retrieve id business verify other account zip user entered zip wrong format"
};

Omniture.constants["RetrieveBusinessId"]["LllmwAccountFirstTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["LllmwAccountFirstTimeError"] = {
    "eventname": "retrieve id business verify other account zip user validation failure error1",
    "prop13": "retrieve id business verify other account zip wrong zip entered first time"
};

Omniture.constants["RetrieveBusinessId"]["LllmwAccountSecondTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["LllmwAccountSecondTimeError"] = {
    "eventname": "retrieve id business verify other account zip user validation failure error2",
    "prop13": "retrieve id business verify other account zip wrong zip entered second time"
};

Omniture.constants["RetrieveBusinessId"]["LllmwAccountThirdTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["LllmwAccountThirdTimeError"] = {
    "eventname": "retrieve id business verify other account zip user validation failure error3",
    "prop13": "retrieve id business verify other account zip wrong zip entered third time"
};

Omniture.constants["RetrieveBusinessId"]["LllmwAccountFourthTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["LllmwAccountFourthTimeError"] = {
    "eventname": "retrieve id business verify other account zip user validation failure error4",
    "prop13": "retrieve id business verify other account zip wrong zip entered fourth time"
};

Omniture.constants["RetrieveBusinessId"]["LllmwAccountLockedOutError"] = {};
Omniture.constants["RetrieveBusinessId"]["LllmwAccountLockedOutError"] = {
    "eventname": "retrieve id business verify other account zip user validation locked out error",
    "prop13": "retrieve id business verify other account zip user validation locked out error"
};

Omniture.constants["RetrieveBusinessId"]["PersonalIdSystemUnavailable"] = {};
Omniture.constants["RetrieveBusinessId"]["PersonalIdSystemUnavailable"] = {
    "eventname": "retrieve id business id displayed and enter password system error",
    "prop13": "retrieve id business id displayed and enter password system error"
};

Omniture.constants["RetrieveBusinessId"]["PersonalIdNotEnteredError"] = {};
Omniture.constants["RetrieveBusinessId"]["PersonalIdNotEnteredError"] = {
    "eventname": "retrieve id business id displayed enter pwd user entry validation error",
    "prop13": "retrieve id business id displayed enter pwd no input by user"
};

Omniture.constants["RetrieveBusinessId"]["PersonalIdFormatError"] = {};
Omniture.constants["RetrieveBusinessId"]["PersonalIdFormatError"] = {
    "eventname": "retrieve id business id displayed enter pwd user entry format error",
    "prop13": "retrieve id business id displayed enter pwd user entry format error"
};

Omniture.constants["RetrieveBusinessId"]["FirstTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["FirstTimeError"] = {
    "eventname": "retrieve id business id displayed enter pwd user validation failure error1",
    "prop13": "retrieve id business id displayed enter pwd wrong pwd entered first time"
};


Omniture.constants["RetrieveBusinessId"]["SecondTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["SecondTimeError"] = {
    "eventname": "retrieve id business id displayed enter pwd user validation failure error2",
    "prop13": "retrieve id business id displayed enter pwd wrong pwd entered second time"
};

Omniture.constants["RetrieveBusinessId"]["ThirdTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["ThirdTimeError"] = {
    "eventname": "retrieve id business id displayed enter pwd user validation failure error3",
    "prop13": "retrieve id business id displayed enter pwd wrong pwd entered third time"
};

Omniture.constants["RetrieveBusinessId"]["FourthTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["FourthTimeError"] = {
    "eventname": "retrieve id business id displayed enter pwd user validation failure error4",
    "prop13": "retrieve id business id displayed enter pwd wrong pwd entered fourth time"
};

// Retrieve Id business - pilot user changes start
Omniture.constants["RetrieveBusinessId"]["PilotUserPersonalIdNotEnteredError"] = {};
Omniture.constants["RetrieveBusinessId"]["PilotUserPersonalIdNotEnteredError"] = {
    "eventname": "retrieve id business id displayed enter pwd case entry validation error",
    "prop13": "retrieve id business id displayed enter pwd case entry validation error"
};

Omniture.constants["RetrieveBusinessId"]["PilotUserPersonalIdFormatError"] = {};
Omniture.constants["RetrieveBusinessId"]["PilotUserPersonalIdFormatError"] = {
    "eventname": "retrieve id business id displayed enter pwd case user entry format error",
    "prop13": "retrieve id business id displayed enter pwd case user entry format error"
};

Omniture.constants["RetrieveBusinessId"]["PilotUserFirstTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["PilotUserFirstTimeError"] = {
    "eventname": "retrieve id business id displayed enter pwd invalid pwd case error1",
    "prop13": "retrieve id business id displayed enter pwd invalid pwd case error1"
};

Omniture.constants["RetrieveBusinessId"]["PilotUserSecondTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["PilotUserSecondTimeError"] = {
    "eventname": "retrieve id business id displayed enter pwd invalid pwd case error2",
    "prop13": "retrieve id business id displayed enter pwd invalid pwd case error2"
};

Omniture.constants["RetrieveBusinessId"]["PilotUserThirdTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["PilotUserThirdTimeError"] = {
    "eventname": "retrieve id business id displayed enter pwd invalid pwd case error3",
    "prop13": "retrieve id business id displayed enter pwd invalid pwd case error3"
};

Omniture.constants["RetrieveBusinessId"]["PilotUserFourthTimeError"] = {};
Omniture.constants["RetrieveBusinessId"]["PilotUserFourthTimeError"] = {
    "eventname": "retrieve id business id displayed enter pwd invalid pwd case error4",
    "prop13": "retrieve id business id displayed enter pwd invalid pwd case error4"
};
// Retrieve Id business - pilot user changes end

//Page level values for Login Assistance Reset Password functionality
Omniture.constants["LaResetPassword"] = {};
Omniture.constants["LaResetPassword"]["siteSection"] = "login assistance";
Omniture.constants["LaResetPassword"]["subSiteSection"] = "reset password";
Omniture.constants["LaResetPassword"]["pageMiddleSection"] = "login assistance";

Omniture.constants["LaResetPassword"]["ResetCommon"] = {};
Omniture.constants["LaResetPassword"]["ResetCommon"] = {
    "eventname": "reset password verify identity enter ssn"
};

Omniture.constants["LaResetPassword"]["VerifyIdentity"] = {};
Omniture.constants["LaResetPassword"]["VerifyIdentity"] = {
    "eventname": "reset password verify identity select code or card or account"
};

Omniture.constants["LaResetPassword"]["VerifyIdentityViaTextOrEmail"] = {};
Omniture.constants["LaResetPassword"]["VerifyIdentityViaTextOrEmail"] = {
    "eventname": "reset password verify identity select OTP destination"
};

Omniture.constants["LaResetPassword"]["EnterCode"] = {};
Omniture.constants["LaResetPassword"]["EnterCode"] = {
    "eventname": "reset password enter OTP code"
};

Omniture.constants["LaResetPassword"]["ResetPassword"] = {};
Omniture.constants["LaResetPassword"]["ResetPassword"] = {
    "eventname": "reset password enter new password"
};

Omniture.constants["LaResetPassword"]["ResetPasswordComplete"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordComplete"] = {
    "eventname": "reset password complete"
};

Omniture.constants["LaResetPassword"]["SelectAccount"] = {};
Omniture.constants["LaResetPassword"]["SelectAccount"] = {
    "eventname": "reset password verify identity select account"
};

Omniture.constants["LaResetPassword"]["DdaAccount"] = {};
Omniture.constants["LaResetPassword"]["DdaAccount"] = {
    "eventname": "reset password verify identity DDA enter pin"
};

Omniture.constants["LaResetPassword"]["CcdAccount"] = {};
Omniture.constants["LaResetPassword"]["CcdAccount"] = {
    "eventname": "reset password verify identity credit card enter info"
};

Omniture.constants["LaResetPassword"]["LllmwAccount"] = {};
Omniture.constants["LaResetPassword"]["LllmwAccount"] = {
    "eventname": "reset password verify identity other account enter zip"
};

//Page level values for Login Assist Reset Password Error Message functionality
Omniture.constants["LaResetPassword"]["ResetCommonSystemUnavailable"] = {};
Omniture.constants["LaResetPassword"]["ResetCommonSystemUnavailable"] = {
    "eventname": "reset password verify identity enter ssn system error",
    "prop13": "reset password verify identity enter ssn system unavailable"
};

Omniture.constants["LaResetPassword"]["ResetCommonDirectedLockedOut"] = {};
Omniture.constants["LaResetPassword"]["ResetCommonDirectedLockedOut"] = {
    "eventname": "reset password verify identity enter ssn directed after locked out",
    "prop13": "reset password verify identity enter ssn directed after locked out"
};

Omniture.constants["LaResetPassword"]["ResetCommonSsnNotEnteredError"] = {};
Omniture.constants["LaResetPassword"]["ResetCommonSsnNotEnteredError"] = {
    "eventname": "reset password verify identity enter ssn user entry validation error",
    "prop13": "reset password verify identity enter ssn no user input"
};

Omniture.constants["LaResetPassword"]["ResetCommonSsnNonNumericError"] = {};
Omniture.constants["LaResetPassword"]["ResetCommonSsnNonNumericError"] = {
    "eventname": "reset password verify identity enter ssn user entry format error",
    "prop13": "reset password verify identity enter ssn non numeric character entered"
};

Omniture.constants["LaResetPassword"]["ResetCommonSsnFormatError"] = {};
Omniture.constants["LaResetPassword"]["ResetCommonSsnFormatError"] = {
    "eventname": "reset password verify identity enter ssn user entry format error",
    "prop13": "reset password verify identity enter ssn less than 4 characters entered"
};

Omniture.constants["LaResetPassword"]["ResetCommonSsnFirstTimeError"] = {};
Omniture.constants["LaResetPassword"]["ResetCommonSsnFirstTimeError"] = {
    "eventname": "reset password verify identity enter ssn user validation failure error1",
    "prop13": "reset password verify identity enter ssn wrong ssn entered first time"
};

Omniture.constants["LaResetPassword"]["ResetCommonSsnSecondTimeError"] = {};
Omniture.constants["LaResetPassword"]["ResetCommonSsnSecondTimeError"] = {
    "eventname": "reset password verify identity enter ssn user validation failure error2",
    "prop13": "reset password verify identity enter ssn wrong ssn entered second time"
};

Omniture.constants["LaResetPassword"]["ResetCommonSsnThirdTimeError"] = {};
Omniture.constants["LaResetPassword"]["ResetCommonSsnThirdTimeError"] = {
    "eventname": "reset password verify identity enter ssn user validation failure error3",
    "prop13": "reset password verify identity enter ssn wrong ssn entered third time"
};

Omniture.constants["LaResetPassword"]["ResetCommonSsnFourthTimeError"] = {};
Omniture.constants["LaResetPassword"]["ResetCommonSsnFourthTimeError"] = {
    "eventname": "reset password verify identity enter ssn user validation failure error4",
    "prop13": "reset password verify identity enter ssn wrong ssn entered fourth time"
};

Omniture.constants["LaResetPassword"]["ResetCommonSsnLockedOutError"] = {};
Omniture.constants["LaResetPassword"]["ResetCommonSsnLockedOutError"] = {
    "eventname": "reset password verify identity enter ssn locked out error",
    "prop13": "reset password verify identity enter ssn locked out error"
};

Omniture.constants["LaResetPassword"]["VerifyIdentitySystemUnavailable"] = {};
Omniture.constants["LaResetPassword"]["VerifyIdentitySystemUnavailable"] = {
    "eventname": "reset password verify identity select code or card or account system error",
    "prop13": "reset password verify identity select code or card or account system error"
};

Omniture.constants["LaResetPassword"]["VerifyIdentityViaTextOrEmailSystemUnavailable"] = {};
Omniture.constants["LaResetPassword"]["VerifyIdentityViaTextOrEmailSystemUnavailable"] = {
    "eventname": "reset password verify identity select OTP destination system error",
    "prop13": "reset password verify identity select OTP destination system error"
};

Omniture.constants["LaResetPassword"]["VerifyIdentityViaTextOrEmailLockedOutError"] = {};
Omniture.constants["LaResetPassword"]["VerifyIdentityViaTextOrEmailLockedOutError"] = {
    "eventname": "reset password verify identity select OTP destination locked out error",
    "prop13": "reset password verify identity select OTP destination locked out error"
};

Omniture.constants["LaResetPassword"]["EnterCodeSystemUnavailable"] = {};
Omniture.constants["LaResetPassword"]["EnterCodeSystemUnavailable"] = {
    "eventname": "reset password enter OTP code system error",
    "prop13": "reset password enter OTP code system error"
};

Omniture.constants["LaResetPassword"]["EnterCodeOtpNotEnteredError"] = {};
Omniture.constants["LaResetPassword"]["EnterCodeOtpNotEnteredError"] = {
    "eventname": "reset password enter OTP code user entry validation error",
    "prop13": "reset password enter OTP code no user input error"
};

Omniture.constants["LaResetPassword"]["EnterCodeOtpFormatError"] = {};
Omniture.constants["LaResetPassword"]["EnterCodeOtpFormatError"] = {
    "eventname": "reset password enter OTP code user entry format error",
    "prop13": "reset password enter OTP code user entered less than six characters"
};

Omniture.constants["LaResetPassword"]["EnterCodeOtpExpiredError"] = {};
Omniture.constants["LaResetPassword"]["EnterCodeOtpExpiredError"] = {
    "eventname": "reset password enter OTP code user entry expiration error",
    "prop13": "reset password enter OTP code user entered expired OTP code"
};

Omniture.constants["LaResetPassword"]["EnterCodeOtpFirstTimeError"] = {};
Omniture.constants["LaResetPassword"]["EnterCodeOtpFirstTimeError"] = {
    "eventname": "reset password enter OTP code user validation failure error1",
    "prop13": "reset password enter OTP code wrong OTP entered first time"
};

Omniture.constants["LaResetPassword"]["EnterCodeOtpSecondTimeError"] = {};
Omniture.constants["LaResetPassword"]["EnterCodeOtpSecondTimeError"] = {
    "eventname": "reset password enter OTP code user validation failure error2",
    "prop13": "reset password enter OTP code wrong OTP entered second time"
};

Omniture.constants["LaResetPassword"]["EnterCodeOtpLockedOutError"] = {};
Omniture.constants["LaResetPassword"]["EnterCodeOtpLockedOutError"] = {
    "eventname": "reset password enter OTP code locked out error",
    "prop13": "reset password enter OTP code user locked out error"
};

Omniture.constants["LaResetPassword"]["SelectAccountSystemUnavailable"] = {};
Omniture.constants["LaResetPassword"]["SelectAccountSystemUnavailable"] = {
    "eventname": "reset password verify identity select account system error",
    "prop13": "reset password verify identity select account system error"
};

Omniture.constants["LaResetPassword"]["DdaAccountSystemUnavailable"] = {};
Omniture.constants["LaResetPassword"]["DdaAccountSystemUnavailable"] = {
    "eventname": "reset password verify identity DDA enter pin system error",
    "prop13": "reset password verify identity DDA enter pin system error"
};

Omniture.constants["LaResetPassword"]["DdaAccountNotEnteredError"] = {};
Omniture.constants["LaResetPassword"]["DdaAccountNotEnteredError"] = {
    "eventname": "reset password verify identity DDA enter pin user entry validation error",
    "prop13": "reset password verify identity DDA enter pin no user input"
};

Omniture.constants["LaResetPassword"]["DdaAccountFormatError"] = {};
Omniture.constants["LaResetPassword"]["DdaAccountFormatError"] = {
    "eventname": "reset password verify identity DDA enter pin entry format error",
    "prop13": "reset password verify identity DDA enter pin user entered less than 4 digits"
};

Omniture.constants["LaResetPassword"]["DdaAccountFirstTimeError"] = {};
Omniture.constants["LaResetPassword"]["DdaAccountFirstTimeError"] = {
    "eventname": "reset password verify identity DDA enter pin user validation failure error1",
    "prop13": "reset password verify identity DDA enter pin wrong pin entered first time"
};

Omniture.constants["LaResetPassword"]["DdaAccountSecondTimeError"] = {};
Omniture.constants["LaResetPassword"]["DdaAccountSecondTimeError"] = {
    "eventname": "reset password verify identity DDA enter pin user validation failure error2",
    "prop13": "reset password verify identity DDA enter pin wrong pin entered second time"
};

Omniture.constants["LaResetPassword"]["DdaAccountThirdTimeError"] = {};
Omniture.constants["LaResetPassword"]["DdaAccountThirdTimeError"] = {
    "eventname": "reset password verify identity DDA enter pin user validation failure error3",
    "prop13": "reset password verify identity DDA enter pin wrong pin entered third time"
};

Omniture.constants["LaResetPassword"]["DdaAccountFourthTimeError"] = {};
Omniture.constants["LaResetPassword"]["DdaAccountFourthTimeError"] = {
    "eventname": "reset password verify identity DDA enter pin user validation failure error4",
    "prop13": "reset password verify identity DDA enter pin wrong pin entered fourth time"
};

Omniture.constants["LaResetPassword"]["DdaAccountLockedOutError"] = {};
Omniture.constants["LaResetPassword"]["DdaAccountLockedOutError"] = {
    "eventname": "reset password verify identity DDA enter pin locked out error",
    "prop13": "reset password verify identity DDA enter pin user locked out error"
};

Omniture.constants["LaResetPassword"]["CcdAccountSystemUnavailable"] = {};
Omniture.constants["LaResetPassword"]["CcdAccountSystemUnavailable"] = {
    "eventname": "reset password verify identity credit card enter info system error",
    "prop13": "reset password verify identity credit card enter info system error"
};

Omniture.constants["LaResetPassword"]["CcdAccountValidationError"] = {};
Omniture.constants["LaResetPassword"]["CcdAccountValidationError"] = {
    "eventname": "reset password verify identity credit card info user entry validation error",
    "prop13": "reset password verify identity credit card info user entry validation error"
};

Omniture.constants["LaResetPassword"]["CcdAccountFirstTimeError"] = {};
Omniture.constants["LaResetPassword"]["CcdAccountFirstTimeError"] = {
    "eventname": "reset password verify identity credit card info user validation failure error1",
    "prop13": "reset password verify credit card info user entered wrong info first time"
};

Omniture.constants["LaResetPassword"]["CcdAccountSecondTimeError"] = {};
Omniture.constants["LaResetPassword"]["CcdAccountSecondTimeError"] = {
    "eventname": "reset password verify identity credit card info user validation failure error2",
    "prop13": "reset password verify credit card info user entered wrong info second time"
};

Omniture.constants["LaResetPassword"]["CcdAccountThirdTimeError"] = {};
Omniture.constants["LaResetPassword"]["CcdAccountThirdTimeError"] = {
    "eventname": "reset password verify identity credit card info user validation failure error3",
    "prop13": "reset password verify credit card info user entered wrong info third time"
};

Omniture.constants["LaResetPassword"]["CcdAccountFourthTimeError"] = {};
Omniture.constants["LaResetPassword"]["CcdAccountFourthTimeError"] = {
    "eventname": "reset password verify identity credit card info user validation failure error4",
    "prop13": "reset password verify credit card info user entered wrong info fourth time"
};

Omniture.constants["LaResetPassword"]["CcdAccountLockedOutError"] = {};
Omniture.constants["LaResetPassword"]["CcdAccountLockedOutError"] = {
    "eventname": "reset password verify identity credit card info user validation locked error",
    "prop13": "reset password verify credit card info user locked out error"
};

Omniture.constants["LaResetPassword"]["LllmwAccountSystemUnavailable"] = {};
Omniture.constants["LaResetPassword"]["LllmwAccountSystemUnavailable"] = {
    "eventname": "reset password verify identity other account enter zip system error",
    "prop13": "reset password verify identity other account enter zip system error"
};

Omniture.constants["LaResetPassword"]["LllmwAccountNotEnteredError"] = {};
Omniture.constants["LaResetPassword"]["LllmwAccountNotEnteredError"] = {
    "eventname": "reset password verify identity other account zip user entry validation error",
    "prop13": "reset password verify identity other account zip no user input"
};

Omniture.constants["LaResetPassword"]["LllmwAccountFormatError"] = {};
Omniture.constants["LaResetPassword"]["LllmwAccountFormatError"] = {
    "eventname": "reset password verify identity other account zip user entry format error",
    "prop13": "reset password verify identity other account zip user entry format error"
};

Omniture.constants["LaResetPassword"]["LllmwAccountFirstTimeError"] = {};
Omniture.constants["LaResetPassword"]["LllmwAccountFirstTimeError"] = {
    "eventname": "reset password verify identity other account zip user validation failed error1",
    "prop13": "reset password verify other account zip user entered wrong zip first time"
};

Omniture.constants["LaResetPassword"]["LllmwAccountSecondTimeError"] = {};
Omniture.constants["LaResetPassword"]["LllmwAccountSecondTimeError"] = {
    "eventname": "reset password verify identity other account zip user validation failed error2",
    "prop13": "reset password verify other account zip user entered wrong zip second time"
};

Omniture.constants["LaResetPassword"]["LllmwAccountThirdTimeError"] = {};
Omniture.constants["LaResetPassword"]["LllmwAccountThirdTimeError"] = {
    "eventname": "reset password verify identity other account zip user validation failed error3",
    "prop13": "reset password verify other account zip user entered wrong zip third time"
};

Omniture.constants["LaResetPassword"]["LllmwAccountFourthTimeError"] = {};
Omniture.constants["LaResetPassword"]["LllmwAccountFourthTimeError"] = {
    "eventname": "reset password verify identity other account zip user validation failed error4",
    "prop13": "reset password verify other account zip user entered wrong zip fourth time"
};

Omniture.constants["LaResetPassword"]["LllmwAccountLockedOutError"] = {};
Omniture.constants["LaResetPassword"]["LllmwAccountLockedOutError"] = {
    "eventname": "reset password verify identity other account zip user validation locked error",
    "prop13": "reset password verify other account zip user locked out error"
};

Omniture.constants["LaResetPassword"]["ResetPasswordSystemUnavailable"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordSystemUnavailable"] = {
    "eventname": "reset password enter new password system error",
    "prop13": "reset password enter new password system error"
};

Omniture.constants["LaResetPassword"]["ResetPasswordNotEnteredError"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordNotEnteredError"] = {
    "eventname": "reset password enter new password user entry validation error",
    "prop13": "reset password enter new password no user input"
};

Omniture.constants["LaResetPassword"]["ResetPasswordFormatError"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordFormatError"] = {
    "eventname": "reset password enter new password user entry format error",
    "prop13": "reset password enter new password user entry format error"
};

Omniture.constants["LaResetPassword"]["ResetPasswordSameAsPersonalIdError"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordSameAsPersonalIdError"] = {
    "eventname": "reset password enter new password user entry same as ID error",
    "prop13": "reset password enter new password user entry same as ID error"
};

Omniture.constants["LaResetPassword"]["ResetPasswordWordPasswordError"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordWordPasswordError"] = {
    "eventname": "reset password enter new password user entry is word password error",
    "prop13": "reset password enter new password user entry is word password error"
};

Omniture.constants["LaResetPassword"]["ResetPasswordCurrentPasswordError"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordCurrentPasswordError"] = {
    "eventname": "reset password enter new password user entry same as current password error",
    "prop13": "reset password enter new password user entry same as current password error"
};

Omniture.constants["LaResetPassword"]["ResetPasswordDoesNotMatchError"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordDoesNotMatchError"] = {
    "eventname": "reset password enter new password user entry password mismatch error",
    "prop13": "reset password enter new password user entry password mismatch error"
};

Omniture.constants["LaResetPassword"]["ResetPasswordCompletedSystemUnavailable"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordCompletedSystemUnavailable"] = {
    "eventname": "reset password complete system error",
    "prop13": "reset password complete system error"
};


//Page level values for Login Assistance Reset Id Shield functionality
Omniture.constants["ResetIdShield"] = {};
Omniture.constants["ResetIdShield"]["siteSection"] = "login assistance";
Omniture.constants["ResetIdShield"]["subSiteSection"] = "reset id shield";
Omniture.constants["ResetIdShield"]["pageMiddleSection"] = "login assistance";

Omniture.constants["ResetIdShield"]["ResetCommon"] = {};
Omniture.constants["ResetIdShield"]["ResetCommon"] = {
    "eventname": "reset id shield verify identity enter ssn"
};

Omniture.constants["ResetIdShield"]["VerifyIdentity"] = {};
Omniture.constants["ResetIdShield"]["VerifyIdentity"] = {
    "eventname": "reset id shield verify identity select code or card or account"
};

Omniture.constants["ResetIdShield"]["VerifyIdentityViaTextOrEmail"] = {};
Omniture.constants["ResetIdShield"]["VerifyIdentityViaTextOrEmail"] = {
    "eventname": "reset id shield verify identity select OTP destination"
};

Omniture.constants["ResetIdShield"]["EnterCode"] = {};
Omniture.constants["ResetIdShield"]["EnterCode"] = {
    "eventname": "reset id shield enter OTP code"
};

Omniture.constants["ResetIdShield"]["SelectAccount"] = {};
Omniture.constants["ResetIdShield"]["SelectAccount"] = {
    "eventname": "reset id shield verify identity select account"
};

Omniture.constants["ResetIdShield"]["DdaAccount"] = {};
Omniture.constants["ResetIdShield"]["DdaAccount"] = {
    "eventname": "reset id shield verify identity DDA enter pin"
};

Omniture.constants["ResetIdShield"]["CcdAccount"] = {};
Omniture.constants["ResetIdShield"]["CcdAccount"] = {
    "eventname": "reset id shield verify identity credit card enter info"
};

Omniture.constants["ResetIdShield"]["LllmwAccount"] = {};
Omniture.constants["ResetIdShield"]["LllmwAccount"] = {
    "eventname": "reset id shield verify identity other account enter zip"
};

Omniture.constants["ResetIdShield"]["EnterPassword"] = {};
Omniture.constants["ResetIdShield"]["EnterPassword"] = {
    "eventname": "reset id shield verify id enter password"
};

//Page level values for Login Assist Reset Id Shield Error Message functionality
Omniture.constants["ResetIdShield"]["ResetCommonSystemUnavailable"] = {};
Omniture.constants["ResetIdShield"]["ResetCommonSystemUnavailable"] = {
    "eventname": "reset id shield verify id enter ssn system error",
    "prop13": "reset id shield verify id enter ssn system error"
};

Omniture.constants["ResetIdShield"]["ResetCommonDirectedLockedOut"] = {};
Omniture.constants["ResetIdShield"]["ResetCommonDirectedLockedOut"] = {
    "eventname": "reset id shield verify identity enter ssn directed after locked out",
    "prop13": "reset id shield verify identity enter ssn directed after locked out"
};

Omniture.constants["ResetIdShield"]["ResetCommonSsnNotEnteredError"] = {};
Omniture.constants["ResetIdShield"]["ResetCommonSsnNotEnteredError"] = {
    "eventname": "reset id shield verify id enter ssn user entry validation error",
    "prop13": "reset id shield verify id enter ssn no input by the user"
};

Omniture.constants["ResetIdShield"]["ResetCommonSsnNonNumericError"] = {};
Omniture.constants["ResetIdShield"]["ResetCommonSsnNonNumericError"] = {
    "eventname": "reset id shield verify id enter ssn user entry format error",
    "prop13": "reset id shield verify id enter ssn user entered non numeric character"
};

Omniture.constants["ResetIdShield"]["ResetCommonSsnFormatError"] = {};
Omniture.constants["ResetIdShield"]["ResetCommonSsnFormatError"] = {
    "eventname": "reset id shield verify id enter ssn user entry format error",
    "prop13": "reset id shield verify id enter ssn user entered less than 4 digits"
};

Omniture.constants["ResetIdShield"]["ResetCommonSsnFirstTimeError"] = {};
Omniture.constants["ResetIdShield"]["ResetCommonSsnFirstTimeError"] = {
    "eventname": "reset id shield verify id enter ssn user validation failure error1",
    "prop13": "reset id shield verify id enter ssn wrong ssn entered first time"
};

Omniture.constants["ResetIdShield"]["ResetCommonSsnSecondTimeError"] = {};
Omniture.constants["ResetIdShield"]["ResetCommonSsnSecondTimeError"] = {
    "eventname": "reset id shield verify id enter ssn user validation failure error2",
    "prop13": "reset id shield verify id enter ssn wrong ssn entered second time"
};

Omniture.constants["ResetIdShield"]["ResetCommonSsnThirdTimeError"] = {};
Omniture.constants["ResetIdShield"]["ResetCommonSsnThirdTimeError"] = {
    "eventname": "reset id shield verify id enter ssn user validation failure error3",
    "prop13": "reset id shield verify id enter ssn wrong ssn entered third time"
};

Omniture.constants["ResetIdShield"]["ResetCommonSsnFourthTimeError"] = {};
Omniture.constants["ResetIdShield"]["ResetCommonSsnFourthTimeError"] = {
    "eventname": "reset id shield verify id enter ssn user validation failure error4",
    "prop13": "reset id shield verify id enter ssn wrong ssn entered fourth time"
};

Omniture.constants["ResetIdShield"]["ResetCommonSsnLockedOutError"] = {};
Omniture.constants["ResetIdShield"]["ResetCommonSsnLockedOutError"] = {
    "eventname": "reset id shield verify id enter ssn locked out error",
    "prop13": "reset id shield verify id enter ssn locked out error"
};

Omniture.constants["ResetIdShield"]["VerifyIdentitySystemUnavailable"] = {};
Omniture.constants["ResetIdShield"]["VerifyIdentitySystemUnavailable"] = {
    "eventname": "reset id shield verify id select code or card or account system error",
    "prop13": "reset id shield verify id select code or card or account system error"
};

Omniture.constants["ResetIdShield"]["VerifyIdentityViaTextOrEmailSystemUnavailable"] = {};
Omniture.constants["ResetIdShield"]["VerifyIdentityViaTextOrEmailSystemUnavailable"] = {
    "eventname": "reset id shield verify id select OTP destination system error",
    "prop13": "reset id shield verify id select OTP destination system error"
};

Omniture.constants["ResetIdShield"]["VerifyIdentityViaTextOrEmailLockedOutError"] = {};
Omniture.constants["ResetIdShield"]["VerifyIdentityViaTextOrEmailLockedOutError"] = {
    "eventname": "reset id shield verify id select OTP destination locked out error",
    "prop13": "reset id shield verify id select OTP destination locked out error"
};

Omniture.constants["ResetIdShield"]["EnterCodeSystemUnavailable"] = {};
Omniture.constants["ResetIdShield"]["EnterCodeSystemUnavailable"] = {
    "eventname": "reset id shield verify id enter OTP code system error",
    "prop13": "reset id shield verify id enter OTP code system error"
};

Omniture.constants["ResetIdShield"]["EnterCodeOtpNotEnteredError"] = {};
Omniture.constants["ResetIdShield"]["EnterCodeOtpNotEnteredError"] = {
    "eventname": "reset id shield verify id enter OTP code user entry validation error",
    "prop13": "reset id shield verify id enter OTP code no user input"
};

Omniture.constants["ResetIdShield"]["EnterCodeOtpFormatError"] = {};
Omniture.constants["ResetIdShield"]["EnterCodeOtpFormatError"] = {
    "eventname": "reset id shield verify id enter OTP code user entry format error",
    "prop13": "reset id shield verify id enter OTP code user entered less than six characters"
};

Omniture.constants["ResetIdShield"]["EnterCodeOtpExpiredError"] = {};
Omniture.constants["ResetIdShield"]["EnterCodeOtpExpiredError"] = {
    "eventname": "reset id shield verify id enter OTP code user entry expiration error",
    "prop13": "reset id shield verify id enter OTP code user entered expired otp code"
};

Omniture.constants["ResetIdShield"]["EnterCodeOtpFirstTimeError"] = {};
Omniture.constants["ResetIdShield"]["EnterCodeOtpFirstTimeError"] = {
    "eventname": "reset id shield verify id enter OTP code user validation failure error1",
    "prop13": "reset id shield verify id enter OTP code wrong otp code entered first time"
};

Omniture.constants["ResetIdShield"]["EnterCodeOtpSecondTimeError"] = {};
Omniture.constants["ResetIdShield"]["EnterCodeOtpSecondTimeError"] = {
    "eventname": "reset id shield verify id enter OTP code user validation failure error2",
    "prop13": "reset id shield verify id enter OTP code wrong otp code entered second time"
};

Omniture.constants["ResetIdShield"]["EnterCodeOtpLockedOutError"] = {};
Omniture.constants["ResetIdShield"]["EnterCodeOtpLockedOutError"] = {
    "eventname": "reset id shield verify id enter OTP code locked out error",
    "prop13": "reset id shield verify id enter OTP code locked out error"
};

Omniture.constants["ResetIdShield"]["SelectAccountSystemUnavailable"] = {};
Omniture.constants["ResetIdShield"]["SelectAccountSystemUnavailable"] = {
    "eventname": "reset id shield verify id select account system error",
    "prop13": "reset id shield verify id select account system error"
};

Omniture.constants["ResetIdShield"]["DdaAccountSystemUnavailable"] = {};
Omniture.constants["ResetIdShield"]["DdaAccountSystemUnavailable"] = {
    "eventname": "reset id shield verify id DDA enter pin system error",
    "prop13": "reset id shield verify id DDA enter pin system error"
};

Omniture.constants["ResetIdShield"]["DdaAccountNotEnteredError"] = {};
Omniture.constants["ResetIdShield"]["DdaAccountNotEnteredError"] = {
    "eventname": "reset id shield verify id DDA enter pin user entry validation error",
    "prop13": "reset id shield verify id DDA enter pin no user input"
};

Omniture.constants["ResetIdShield"]["DdaAccountFormatError"] = {};
Omniture.constants["ResetIdShield"]["DdaAccountFormatError"] = {
    "eventname": "reset id shield verify id DDA enter pin entry format error",
    "prop13": "reset id shield verify id DDA enter pin user entered less than 4 digits"
};

Omniture.constants["ResetIdShield"]["DdaAccountFirstTimeError"] = {};
Omniture.constants["ResetIdShield"]["DdaAccountFirstTimeError"] = {
    "eventname": "reset id shield verify id DDA enter pin user validation failure error1",
    "prop13": "reset id shield verify id DDA enter pin wrong pin entered first time"
};

Omniture.constants["ResetIdShield"]["DdaAccountSecondTimeError"] = {};
Omniture.constants["ResetIdShield"]["DdaAccountSecondTimeError"] = {
    "eventname": "reset id shield verify id DDA enter pin user validation failure error2",
    "prop13": "reset id shield verify id DDA enter pin wrong pin entered second time"
};

Omniture.constants["ResetIdShield"]["DdaAccountThirdTimeError"] = {};
Omniture.constants["ResetIdShield"]["DdaAccountThirdTimeError"] = {
    "eventname": "reset id shield verify id DDA enter pin user validation failure error3",
    "prop13": "reset id shield verify id DDA enter pin wrong pin entered third time"
};

Omniture.constants["ResetIdShield"]["DdaAccountFourthTimeError"] = {};
Omniture.constants["ResetIdShield"]["DdaAccountFourthTimeError"] = {
    "eventname": "reset id shield verify id DDA enter pin user validation failure error4",
    "prop13": "reset id shield verify id DDA enter pin wrong pin entered fourth time"
};

Omniture.constants["ResetIdShield"]["DdaAccountLockedOutError"] = {};
Omniture.constants["ResetIdShield"]["DdaAccountLockedOutError"] = {
    "eventname": "reset id shield verify identity DDA enter pin locked out error",
    "prop13": "reset id shield verify identity DDA enter pin locked out error"
};

Omniture.constants["ResetIdShield"]["CcdAccountSystemUnavailable"] = {};
Omniture.constants["ResetIdShield"]["CcdAccountSystemUnavailable"] = {
    "eventname": "reset id shield verify id credit card enter info system error",
    "prop13": "reset id shield verify id credit card enter info system error"
};

Omniture.constants["ResetIdShield"]["CcdAccountValidationError"] = {};
Omniture.constants["ResetIdShield"]["CcdAccountValidationError"] = {
    "eventname": "reset id shield verify id credit card info user entry validation error",
    "prop13": "reset id shield verify id credit card info user entry validation error"
};

Omniture.constants["ResetIdShield"]["CcdAccountFirstTimeError"] = {};
Omniture.constants["ResetIdShield"]["CcdAccountFirstTimeError"] = {
    "eventname": "reset id shield verify id cc enter info user validation failure error1",
    "prop13": "reset id shield verify id cc enter info wrong info entered first time"
};

Omniture.constants["ResetIdShield"]["CcdAccountSecondTimeError"] = {};
Omniture.constants["ResetIdShield"]["CcdAccountSecondTimeError"] = {
    "eventname": "reset id shield verify id cc enter info user validation failure error2",
    "prop13": "reset id shield verify id cc enter info wrong info entered second time"
};

Omniture.constants["ResetIdShield"]["CcdAccountThirdTimeError"] = {};
Omniture.constants["ResetIdShield"]["CcdAccountThirdTimeError"] = {
    "eventname": "reset id shield verify id cc enter info user validation failure error3",
    "prop13": "reset id shield verify id cc enter info wrong info entered third time"
};

Omniture.constants["ResetIdShield"]["CcdAccountFourthTimeError"] = {};
Omniture.constants["ResetIdShield"]["CcdAccountFourthTimeError"] = {
    "eventname": "reset id shield verify id cc enter info user validation failure error4",
    "prop13": "reset id shield verify id cc enter info wrong info entered fourth time"
};

Omniture.constants["ResetIdShield"]["CcdAccountLockedOutError"] = {};
Omniture.constants["ResetIdShield"]["CcdAccountLockedOutError"] = {
    "eventname": "reset id shield verify id cc enter info user validation locked error",
    "prop13": "reset id shield verify id cc enter info user validation locked error"
};

Omniture.constants["ResetIdShield"]["LllmwAccountSystemUnavailable"] = {};
Omniture.constants["ResetIdShield"]["LllmwAccountSystemUnavailable"] = {
    "eventname": "reset id shield verify id other account enter zip system error",
    "prop13": "reset id shield verify id other account enter zip system error"
};

Omniture.constants["ResetIdShield"]["LllmwAccountNotEnteredError"] = {};
Omniture.constants["ResetIdShield"]["LllmwAccountNotEnteredError"] = {
    "eventname": "reset id shield verify id other account zip user entry validation error",
    "prop13": "reset id shield verify id other account zip no user input"
};

Omniture.constants["ResetIdShield"]["LllmwAccountFormatError"] = {};
Omniture.constants["ResetIdShield"]["LllmwAccountFormatError"] = {
    "eventname": "reset id shield verify id other account zip user entry format error",
    "prop13": "reset id shield verify id other account zip user entered zip in wrong format"
};

Omniture.constants["ResetIdShield"]["LllmwAccountFirstTimeError"] = {};
Omniture.constants["ResetIdShield"]["LllmwAccountFirstTimeError"] = {
    "eventname": "reset id shield verify id other account zip user validation failed error1",
    "prop13": "reset id shield verify id other account zip wrong zip entered first time"
};

Omniture.constants["ResetIdShield"]["LllmwAccountSecondTimeError"] = {};
Omniture.constants["ResetIdShield"]["LllmwAccountSecondTimeError"] = {
    "eventname": "reset id shield verify id other account zip user validation failed error2",
    "prop13": "reset id shield verify id other account zip wrong zip entered second time"
};

Omniture.constants["ResetIdShield"]["LllmwAccountThirdTimeError"] = {};
Omniture.constants["ResetIdShield"]["LllmwAccountThirdTimeError"] = {
    "eventname": "reset id shield verify id other account zip user validation failed error3",
    "prop13": "reset id shield verify id other account zip wrong zip entered third time"
};

Omniture.constants["ResetIdShield"]["LllmwAccountFourthTimeError"] = {};
Omniture.constants["ResetIdShield"]["LllmwAccountFourthTimeError"] = {
    "eventname": "reset id shield verify id other account zip user validation failed error4",
    "prop13": "reset id shield verify id other account zip wrong zip entered fourth time"
};

Omniture.constants["ResetIdShield"]["LllmwAccountLockedOutError"] = {};
Omniture.constants["ResetIdShield"]["LllmwAccountLockedOutError"] = {
    "eventname": "reset id shield verify id other account zip user validation locked error",
    "prop13": "reset id shield verify id other account zip user validation locked error"
};

Omniture.constants["ResetIdShield"]["EnterPasswordSystemUnavailable"] = {};
Omniture.constants["ResetIdShield"]["EnterPasswordSystemUnavailable"] = {
    "eventname": "reset id shield verify id enter password system error",
    "prop13": "reset id shield verify id enter password system error"
};

Omniture.constants["ResetIdShield"]["EnterPasswordNotEnteredError"] = {};
Omniture.constants["ResetIdShield"]["EnterPasswordNotEnteredError"] = {
    "eventname": "reset id shield verify id enter password user entry validation error",
    "prop13": "reset id shield verify id enter password no user input"
};

Omniture.constants["ResetIdShield"]["EnterPasswordFormatError"] = {};
Omniture.constants["ResetIdShield"]["EnterPasswordFormatError"] = {
    "eventname": "reset id shield verify id enter password user entry format error",
    "prop13": "reset id shield verify id enter password user entered password wrong format"
};

Omniture.constants["ResetIdShield"]["FirstTimeError"] = {};
Omniture.constants["ResetIdShield"]["FirstTimeError"] = {
    "eventname": "reset id shield verify id enter password user validation failure error1",
    "prop13": "reset id shield verify id enter password wrong password entered first time"
};

Omniture.constants["ResetIdShield"]["SecondTimeError"] = {};
Omniture.constants["ResetIdShield"]["SecondTimeError"] = {
    "eventname": "reset id shield verify id enter password user validation failure error2",
    "prop13": "reset id shield verify id enter password wrong password entered second time"
};

Omniture.constants["ResetIdShield"]["ThirdTimeError"] = {};
Omniture.constants["ResetIdShield"]["ThirdTimeError"] = {
    "eventname": "reset id shield verify id enter password user validation failure error3",
    "prop13": "reset id shield verify id enter password wrong password entered third time"
};

Omniture.constants["ResetIdShield"]["FourthTimeError"] = {};
Omniture.constants["ResetIdShield"]["FourthTimeError"] = {
    "eventname": "reset id shield verify id enter password user validation failure error4",
    "prop13": "reset id shield verify id enter password wrong password entered fourth time"
};

//Page level values for AutoInvestment functionality
Omniture.constants["AutoInvestment"] = {};
Omniture.constants["AutoInvestment"]["siteSection"] = "automated portfolio";//auto invest";
Omniture.constants["AutoInvestment"]["subSiteSection"] = "automated portfolio dashboard";//auto invest dashboard";
Omniture.constants["AutoInvestment"]["pageMiddleSection"] = "automated portfolio dashboard";//"auto invest dashboard";

//Event level values for AutoInvestment functionality
Omniture.constants["AutoInvestment"]["ProductOverviewPage"] = {};
Omniture.constants["AutoInvestment"]["ProductOverviewPage"] = {
    "eventname": "product splash page overview",
    //"pageName": "product splash page overview",
    //"prop1": "auto invest",
    //"prop2": "auto invest dashboard"
};
Omniture.constants["AutoInvestment"]["LoadDotCom"] = {};
Omniture.constants["AutoInvestment"]["LoadDotCom"] = {
    "pageName": "launch pad page",
    "prop1": "automated portfolio",
    "prop2": "automated portfolio dashboard"
};
Omniture.constants["AutoInvestment"]["DotComContinue"] = {};
Omniture.constants["AutoInvestment"]["DotComContinue"] = {
    "pageName": "launch pad page:continue button",
    "prop1": "automated portfolio",
    "prop2": "automated portfolio dashboard"
};

Omniture.constants["AutoInvestment"]["StartNowTopButton"] = {};
Omniture.constants["AutoInvestment"]["StartNowTopButton"] = {
    "eventname": "get started top button",
    //"pageName": "start now for free top button",
    //"prop1": "auto invest",
    //"prop2": "auto invest dashboard"
    "prop1": "automated portfolio",
    "prop2": "automated portfolio dashboard"
};

Omniture.constants["AutoInvestment"]["StartNowBottomButton"] = {};
Omniture.constants["AutoInvestment"]["StartNowBottomButton"] = {
    "eventname": "get started bottom button",
    //"pageName": "start now for free bottom button",
    //"prop1": "auto invest",
    //"prop2": "auto invest dashboard"
    "prop1": "automated portfolio",
    "prop2": "automated portfolio dashboard"
};
Omniture.constants["AutoInvestment"]["PlayVideo"] = {
    "prop53": "product splash page overview:why ap:video:video play",
    "linkTrackVars" :',prop53,prop1,prop2'
};
Omniture.constants["AutoInvestment"]["PauseVideo"] = {
    "prop53": "product splash page overview:why ap:video:video pause",
    "linkTrackVars": ',prop53,prop1,prop2'
};
Omniture.constants["AutoInvestment"]["ReplayVideo"] = {
    "prop53": "product splash page overview:why ap:video:video replay",
    "linkTrackVars": ',prop53,prop1,prop2'
};
Omniture.constants["AutoInvestment"]["CompleteVideo"] = {
    "prop53": "product splash page overview:why ap:video:video complete 1.28",
    "linkTrackVars": ',prop53,prop1,prop2'
};
Omniture.constants["AutoInvestment"]["OpenTranscript"] = {
    "prop53": "product splash page overview:why ap:video transcript",
    "linkTrackVars": ',prop53,prop1,prop2'
};
Omniture.constants["AutoInvestment"]["MyAccounts"] = {};
Omniture.constants["AutoInvestment"]["MyAccounts"] = {
    "eventname": "product splash my accounts button",
    //"pageName": "product splash my accounts button",
    //"prop1": "auto invest",
    //"prop2": "auto invest dashboard"
};

//Page level values for AutoInvestment T&C functionality
Omniture.constants["AutoInvestmentTandC"] = {};
Omniture.constants["AutoInvestmentTandC"]["siteSection"] = "auto invest";
Omniture.constants["AutoInvestmentTandC"]["subSiteSection"] = "terms and conditions";
Omniture.constants["AutoInvestmentTandC"]["pageMiddleSection"] = "auto invest";

//Event level values for AutoInvestment T&C functionality
Omniture.constants["AutoInvestmentTandC"]["TandCPage"] = {};
Omniture.constants["AutoInvestmentTandC"]["TandCPage"] = {
    "eventname": "terms and conditions page",
    "pageName": "terms and conditions page",
    "prop1": "auto invest",
    "prop2": "terms and conditions"
};

//Autoinvestment : T&C page load omniture constant
Omniture.constants["AutoInvestmentTandC"]["TandCPageLoad"] = {};
Omniture.constants["AutoInvestmentTandC"]["TandCPageLoad"] = {
    "eventname": "terms and conditions",
    //"pageName": "terms and conditions",
    //"prop1": "auto invest",
    //"prop2": "terms and conditions"
};

Omniture.constants["AutoInvestmentTandC"]["TandCAgreeButton"] = {};
Omniture.constants["AutoInvestmentTandC"]["TandCAgreeButton"] = {
    "eventname": "terms and conditions agree button",
    //"pageName": "terms and conditions agree button",
    //"prop1": "auto invest",
    //"prop2": "terms and conditions"
};

Omniture.constants["AutoInvestmentTandC"]["TandCCancel"] = {};
Omniture.constants["AutoInvestmentTandC"]["TandCCancel"] = {
    "eventname": "terms and conditions disagree button",
    //"pageName": "terms and conditions disagree button",
    //"prop1": "auto invest",
    //"prop2": "terms and conditions"
};

//Page level values for AutoInvestment SSO Error functionality
Omniture.constants["AutoInvestmentSSOError"] = {};
Omniture.constants["AutoInvestmentSSOError"]["siteSection"]= "customer dashboard";
Omniture.constants["AutoInvestmentSSOError"]["subSiteSection"]= "auto invest";
Omniture.constants["AutoInvestmentSSOError"]["pageMiddleSection"]= "customer dashboard";

//Event level values for AutoInvestment T&C functionality
Omniture.constants["AutoInvestmentSSOError"]["SSOErrorPage"]= { };
Omniture.constants["AutoInvestmentSSOError"]["SSOErrorPage"]= {
    "errorStatus": "auto invest sso failure error",
    "pageName": "auto invest sso failure error",
    "prop1": "customer dashboard",
    "prop2": "auto invest"
};


//External accounts Constants - Start
//Page level values for Manage ExternalAccount functionality
Omniture.constants["ManageExternalAccounts"] = {};
Omniture.constants["ManageExternalAccounts"]["siteSection"] = "external accounts";
Omniture.constants["ManageExternalAccounts"]["subSiteSection"] = "account aggregation";
Omniture.constants["ManageExternalAccounts"]["pageMiddleSection"] = "account aggregation";

//Event level values for Start Smart Dashboard functionality

Omniture.constants["ManageExternalAccounts"]["Overview"] = {};
Omniture.constants["ManageExternalAccounts"]["Overview"] = {
    "eventname": "external account bank overview",
    //"pageName": "external account bank overview",
    //"prop1": "external accounts",
    //"prop2": "account aggregation"
};
Omniture.constants["ManageExternalAccounts"]["Delete"] = {};
Omniture.constants["ManageExternalAccounts"]["Delete"] = {
    "eventname": "delete confirmation popup page",
    //"pageName": "external account delete link",
    //"prop1": "external accounts",
    //"prop2": "account aggregation"
};

Omniture.constants["ManageExternalAccounts"]["Save"] = {};
Omniture.constants["ManageExternalAccounts"]["Save"] = {
    "eventname": "external account save button",
    //"pageName": "external account save button",
    //"prop1": "external accounts",
    //"prop2": "account aggregation"
};

//Changes addd for the fix for  Defect # 9114
Omniture.constants["ManageExternalAccounts"]["SaveConfirm"] = {};
Omniture.constants["ManageExternalAccounts"]["SaveConfirm"] = {
    "eventname": "settings update confirmation page",
    //"pageName": "settings update confirmation page",
    //"prop1": "external accounts",
    //"prop2": "account aggregation"
};

//Commented as per new requirement from Omniture team
//Omniture.constants["ManageExternalAccounts"]["DeleteIndividualAccount"] = {};
//Omniture.constants["ManageExternalAccounts"]["DeleteIndividualAccount"] = {
//    "eventname": "delete an individual account page",
//    "pageName": "delete an individual account page",
//    "prop1": "external accounts",
//    "prop2": "account aggregation"
//};

Omniture.constants["ManageExternalAccounts"]["DeleteConfirm"] = {};
Omniture.constants["ManageExternalAccounts"]["DeleteConfirm"] = {
    "prop53": "splash page yes to continue delete button"
};

Omniture.constants["ManageExternalAccounts"]["DeleteCancel"] = {};
Omniture.constants["ManageExternalAccounts"]["DeleteCancel"] = {
    "eventname": "cancel button on delete an account",
    //"pageName": "cancel button on delete an account",
    //"prop1": "external accounts",
    //"prop2": "account aggregation"
};

Omniture.constants["ManageExternalAccounts"]["DeleteSuccess"] = {};
Omniture.constants["ManageExternalAccounts"]["DeleteSuccess"] = {
    "eventname": "successfully deleted account page",
    //"pageName": "successfully deleted account page",
    //"prop1": "external accounts",
    //"prop2": "account aggregation"
};

Omniture.constants["ManageExternalAccounts"]["OKOnDeleteSuccess"] = {};
Omniture.constants["ManageExternalAccounts"]["OKOnDeleteSuccess"] = {
    "eventname": "ok button on successfully deleted popup page",
    //"pageName": "ok button on successfully deleted popup page",
    //"prop1": "external accounts",
    //"prop2": "account aggregation"
};

Omniture.constants["ManageExternalAccounts"]["DisplayAccountClick"] = {};
Omniture.constants["ManageExternalAccounts"]["DisplayAccountClick"] = {
    "prop53": "external account manage ext account pg display account button click",
    "linkTrackVars": ",prop53,prop8,eVar8,eVar9,eVar35,eVar40",
};

Omniture.constants["ManageExternalAccounts"]["DeleteAccountClick"] = {};
Omniture.constants["ManageExternalAccounts"]["DeleteAccountClick"] = {
    "prop53": "external account manage ext account pg delete account button click",
    "linkTrackVars": ",prop53,prop8,eVar8,eVar9,eVar35,eVar40",
};

Omniture.constants["ManageExternalAccounts"]["HelpDisplayIconClick"] = {};
Omniture.constants["ManageExternalAccounts"]["HelpDisplayIconClick"] = {
    "prop53": "external account manage ext account pg display help icon click",
    "linkTrackVars": ",prop53,prop8,eVar8,eVar9,eVar35,eVar40",
};

Omniture.constants["ManageExternalAccounts"]["HelpDeleteIconClick"] = {};
Omniture.constants["ManageExternalAccounts"]["HelpDeleteIconClick"] = {
    "prop53": "external account manage ext account pg delete help icon click",
    "linkTrackVars": ",prop53,prop8,eVar8,eVar9,eVar35,eVar40",
};

Omniture.constants["ManageExternalAccountsSystemError"] = {};
Omniture.constants["ManageExternalAccountsSystemError"]["siteSection"] = "customer dashboard";
Omniture.constants["ManageExternalAccountsSystemError"]["subSiteSection"] = "account aggregation";
Omniture.constants["ManageExternalAccountsSystemError"]["pageMiddleSection"] = "customer dashboard";

Omniture.constants["ManageExternalAccountsSystemError"]["SystemDown"] = {};
Omniture.constants["ManageExternalAccountsSystemError"]["SystemDown"] = {
    "errorStatus": "external account aggregation system down error message",
    "pageName": "acc aggregation system down error",
    "prop1": "customer dashboard",
    "prop2": "account aggregation"
};

//Page level values for Account Aggregation T&C functionality
Omniture.constants["AccountAggregationTandC"] = {};
Omniture.constants["AccountAggregationTandC"]["siteSection"] = "external accounts";
Omniture.constants["AccountAggregationTandC"]["subSiteSection"] = "account aggregation";
Omniture.constants["AccountAggregationTandC"]["pageMiddleSection"] = "account aggregation";

//Event level values for Account Aggregation T&C functionality
Omniture.constants["AccountAggregationTandC"]["TandCPage"] = {};
Omniture.constants["AccountAggregationTandC"]["TandCPage"] = {
    "eventname": "terms and conditions",
    "pageName": "terms and conditions",
    "prop1": "account aggregation",
    "prop2": "terms and conditions"
};

//Event level values for Account Aggregation Splash page
Omniture.constants["AccountAggregationTandC"]["SplashPage"] = {};
Omniture.constants["AccountAggregationTandC"]["SplashPage"] = {
    "eventname": "external account splash page"
};

Omniture.constants["AccountAggregationTandC"]["TandCAgreeButton"] = {};
Omniture.constants["AccountAggregationTandC"]["TandCAgreeButton"] = {
    "eventname": "agree button on terms and conditions",
    "pageName": "agree button on terms and conditions",
    "prop1": "account aggregation",
    "prop2": "terms and conditions"
};

Omniture.constants["AccountAggregationTandC"]["TandCBack"] = {};
Omniture.constants["AccountAggregationTandC"]["TandCBack"] = {
    "linkTrackVars": "prop53,prop1,prop2,prop40,eVar35,eVar8,prop8,eVar9,prop9,eVar71,prop30;",
    "prop53": "external account splash page back button click"
};

Omniture.constants["AccountAggregationTandC"]["TandCCancel"] = {};
Omniture.constants["AccountAggregationTandC"]["TandCCancel"] = {
    "linkTrackVars": "prop53,prop1,prop2,prop40,eVar35,eVar8,prop8,eVar9,prop9,eVar71,prop30;",
    "prop53": "external account splash page cancel button click"
};

Omniture.constants["AccountAggregationTandC"]["PrivacyPledge"] = {};
Omniture.constants["AccountAggregationTandC"]["PrivacyPledge"] = {
    "linkTrackVars": "prop53,prop1,prop2,prop40,eVar35,eVar8,prop8,eVar9,prop9,eVar71,prop30",
    "prop53": "external account splash page privacy pledge link"
};

Omniture.constants["AccountAggregationTandC"]["OnlinePrivacy"] = {};
Omniture.constants["AccountAggregationTandC"]["OnlinePrivacy"] = {
    "linkTrackVars": "prop53,prop1,prop2,prop40,eVar35,eVar8,prop8,eVar9,prop9,eVar71,prop30'",
    "prop53": "external account splash page privacy & security link"
};

Omniture.constants["AccountAggregationTandC"]["TermsAndCondition"] = {};
Omniture.constants["AccountAggregationTandC"]["TermsAndCondition"] = {
    "linkTrackVars": "prop53,prop1,prop2,prop40,eVar35,eVar8,prop8,eVar9,prop9,eVar71,prop30",
    "prop53": "external account splash page terms & condition link"
};

Omniture.constants["AccountAggregationTandC"]["GetStarted"] = {};
Omniture.constants["AccountAggregationTandC"]["GetStarted"] = {
    "linkTrackVars": "prop53,prop1,prop2,prop40,eVar35,eVar8,prop8,eVar9,prop9,eVar71,prop30",
    "prop53": "external account splash page get started button click"
};

Omniture.constants["AccountAggregationTandC"]["frequentlyAskedQuestions"] = {};
Omniture.constants["AccountAggregationTandC"]["frequentlyAskedQuestions"] = {
    "linkTrackVars": "prop53,prop1,prop2,prop40,eVar35,eVar8,prop8,eVar9,prop9,eVar71,prop30",
    "prop53": "external account splash page frequently asked question link"
};

//Page level values for Account Aggregation SSO Error functionality
Omniture.constants["AccountAggregationSSOError"] = {};
Omniture.constants["AccountAggregationSSOError"]["siteSection"] = "account dashboard";
Omniture.constants["AccountAggregationSSOError"]["subSiteSection"] = "account aggregation";
Omniture.constants["AccountAggregationSSOError"]["pageMiddleSection"] = "account dashboard";

//Event level values for Account Aggregation SSO Error T&C functionality
Omniture.constants["AccountAggregationSSOError"]["SSOErrorPage"] = {};
Omniture.constants["AccountAggregationSSOError"]["SSOErrorPage"] = {
    "errorStatus": "account aggregation sso failure error",
    "pageName": "account aggregation sso failure error",
    "prop1": "account dashboard",
    "prop2": "account aggregation"
};
// Start 9	Tagging for Pilot Wave of Password Case Sensitivity Error Message – Login Assistance Reset ID Shield
Omniture.constants["ResetIdShield"]["EnterPasswordPilotNotEnteredError"] = {};
Omniture.constants["ResetIdShield"]["EnterPasswordPilotNotEnteredError"] = {
    "eventname": "reset id shield verify id enter pwd case user entry validation error",
    "prop13": "reset id shield verify id enter pwd case user entry validation error"
};
Omniture.constants["ResetIdShield"]["EnterPasswordPilotFormatError"] = {};
Omniture.constants["ResetIdShield"]["EnterPasswordPilotFormatError"] = {
    "eventname": "reset id shield verify id enter pwd case user entry format error",
    "prop13": "reset id shield verify id enter pwd case user entry format error"
};
Omniture.constants["ResetIdShield"]["PilotUserFirstTimeError"] = {};
Omniture.constants["ResetIdShield"]["PilotUserFirstTimeError"] = {
    "eventname": "reset id shield verify id enter pwd case user validation failure error1",
    "prop13": "reset id shield verify id enter pwd case user validation failure error1"
};

Omniture.constants["ResetIdShield"]["PilotUserSecondTimeError"] = {};
Omniture.constants["ResetIdShield"]["PilotUserSecondTimeError"] = {
    "eventname": "reset id shield verify id enter pwd case user validation failure error2",
    "prop13": "reset id shield verify id enter pwd case user validation failure error2"
};
Omniture.constants["ResetIdShield"]["PilotUserThirdTimeError"] = {};
Omniture.constants["ResetIdShield"]["PilotUserThirdTimeError"] = {
    "eventname": "reset id shield verify id enter pwd case user validation failure error3",
    "prop13": "reset id shield verify id enter pwd case user validation failure error3"
};
Omniture.constants["ResetIdShield"]["PilotUserFourthTimeError"] = {};
Omniture.constants["ResetIdShield"]["PilotUserFourthTimeError"] = {
    "eventname": "reset id shield verify id enter pwd case user validation failure error4",
    "prop13": "reset id shield verify id enter pwd case user validation failure error4"
};
// End 9	Tagging for Pilot Wave of Password Case Sensitivity Error Message – Login Assistance Reset ID Shield
//Start B-25916 10.Tagging for Pilot Wave of Password Case Sensitivity Error Message – Login Assistance Reset Password
Omniture.constants["LaResetPassword"]["ResetPasswordPilotNoInput"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordPilotNoInput"] = {
    "eventname": "reset password enter new password case user entry validation error",
    "prop13": "reset password enter new password case user entry validation error"
};

Omniture.constants["LaResetPassword"]["ResetPasswordPilotDoNotMet"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordPilotDoNotMet"] = {
    "eventname": "reset password enter new password case user entry format error",
    "prop13": "reset password enter new password case user entry format error"
};
Omniture.constants["LaResetPassword"]["ResetPasswordPilotSameAsPersonalID"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordPilotSameAsPersonalID"] = {
    "eventname": "reset password enter new password case user entry same as ID error",
    "prop13": "reset password enter new password case user entry same as ID error"
};
Omniture.constants["LaResetPassword"]["ResetPasswordPilotWordPassword"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordPilotWordPassword"] = {
    "eventname": "reset password enter new password case user entry is word password error",
    "prop13": "reset password enter new password case user entry is word password error"
};
Omniture.constants["LaResetPassword"]["ResetPasswordPilotCurrentPassword"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordPilotCurrentPassword"] = {
    "eventname": "reset password enter new password case new pwd same as current pwd error",
    "prop13": "reset password enter new password case new pwd same as current pwd error"
};
Omniture.constants["LaResetPassword"]["ResetPasswordPilotDoNotMatch"] = {};
Omniture.constants["LaResetPassword"]["ResetPasswordPilotDoNotMatch"] = {
    "eventname": "reset password enter new password case user entry pwd mismatch error",
    "prop13": "reset password enter new password case user entry pwd mismatch error"
};
//End B-25916 10.Tagging for Pilot Wave of Password Case Sensitivity Error Message – Login Assistance Reset Password
//AugmentedBalanceBonus Constants - Start
//Page level values for Manage AugmentedBalanceBonus functionality
Omniture.constants["AugmentedBalanceBonus"] = {};
Omniture.constants["AugmentedBalanceBonus"]["siteSection"] = "augmented balance bonus";
Omniture.constants["AugmentedBalanceBonus"]["subSiteSection"] = "balance bonus";
Omniture.constants["AugmentedBalanceBonus"]["pageMiddleSection"] = "balance bonus program";

Omniture.constants["AugmentedBalanceBonus"]["AugmentOverview"] = {};
Omniture.constants["AugmentedBalanceBonus"]["AugmentOverview"] = {
    "currentPage": "overview"
};

//Event level values for AugmentBalanceBonus.
Omniture.constants["AugmentedBalanceBonus"]["AugmentT&C"] = {};
Omniture.constants["AugmentedBalanceBonus"]["AugmentT&C"] = {
    "currentPage": "terms and conditions"
};

Omniture.constants["AugmentedBalanceBonus"]["AugmentAgreeOffer"] = {};
Omniture.constants["AugmentedBalanceBonus"]["AugmentAgreeOffer"] = {
    "currentPage": "accept offer check box"
};

Omniture.constants["AugmentedBalanceBonus"]["AugmentNoThank"] = {};
Omniture.constants["AugmentedBalanceBonus"]["AugmentNoThank"] = {
    "currentPage": "reject offer"
};

Omniture.constants["AugmentedBalanceBonus"]["AugmentCancelButton"] = {};
Omniture.constants["AugmentedBalanceBonus"]["AugmentCancelButton"] = {
    "prop53": "cancel button"
};

Omniture.constants["AugmentedBalanceBonus"]["AugmentConfirmation"] = {};
Omniture.constants["AugmentedBalanceBonus"]["AugmentConfirmation"] = {
    "currentPage": "confirmation page"
};

Omniture.constants["AugmentedBalanceBonus"]["AugmentDetailsOverview"] = {};
Omniture.constants["AugmentedBalanceBonus"]["AugmentDetailsOverview"] = {
    "currentPage": "deserve a bonus"
};



//Page level values for DolConversion functionality
Omniture.constants["DolConversion"] = {};
Omniture.constants["DolConversion"]["siteSection"] = "dol notice overlay";
Omniture.constants["DolConversion"]["subSiteSection"] = "auto invest portfolio dashboard";
Omniture.constants["DolConversion"]["pageMiddleSection"] = "dol conversion";

//Event level values for DolConversion functionality
Omniture.constants["DolConversion"]["PortfolioDashboard"] = {};
Omniture.constants["DolConversion"]["PortfolioDashboard"] = {
    "eventname": "auto investment portfolio"
};

Omniture.constants["DolConversion"]["StartNowTopButton"] = {};
Omniture.constants["DolConversion"]["StartNowTopButton"] = {
    "eventname": "get started top button"
};

Omniture.constants["DolConversion"]["StartNowBottomButton"] = {};
Omniture.constants["DolConversion"]["StartNowBottomButton"] = {
    "eventname": "get started bottom button"
};

Omniture.constants["DolConversion"]["NoThanks"] = {};
Omniture.constants["DolConversion"]["NoThanks"] = {
    "eventname": "no thanks button"
};

Omniture.constants["DolConversion"]["MyAccount"] = {};
Omniture.constants["DolConversion"]["MyAccount"] = {
    "eventname": "my accounts button"
};


Omniture.constants["DolConversion"]["TandCPageLoad"] = {};
Omniture.constants["DolConversion"]["TandCPageLoad"] = {
    "eventname": "terms and conditions",
    //"pageName": "terms and conditions",
    //"prop1": "auto invest",
    //"prop2": "terms and conditions"
};


Omniture.constants["LoginAssistanceResend"] = {};
Omniture.constants["LoginAssistanceResend"]["pageMiddleSection"] = "login assistance";
Omniture.constants["LoginAssistanceResend"]["resetPassword"] =
{
    "prop53": "reset password enter OTP code resend button"
};
Omniture.constants["LoginAssistanceResend"]["resetIDShield"] =
{
    "prop53": "reset id shield enter OTP code resend button'"
};
Omniture.constants["LoginAssistanceResend"]["retrievePersonalID"] =
{
    "prop53": "retrieve id personal account enter OTP code resend button"
};
Omniture.constants["LoginAssistanceResend"]["retrieveBusinessID"] =
{
    "prop53": "retrieve id business account enter OTP code resend button"
};

// CI B-55052 START
Omniture.constants["RetrievePersonalId"]["FourthTimePinErrorOverlay"] = {};
Omniture.constants["RetrievePersonalId"]["FourthTimePinErrorOverlay"] = {
    "eventname": "retrieve id personal verify id DDA pin user validation warning msg overlay",
    "prop13": "retrieve id personal verify id DDA pin user validation warning msg overlay"
};

Omniture.constants["RetrieveBusinessId"]["FourthTimePinErrorOverlay"] = {};
Omniture.constants["RetrieveBusinessId"]["FourthTimePinErrorOverlay"] = {
    "eventname": "retrieve id business verify id DDA pin user validation warning msg overlay",
    "prop13": "retrieve id business verify id DDA pin user validation warning msg overlay"
};

Omniture.constants["RetrievePersonalId"]["EnterCodeOtpErrorOverLay"] = {};
Omniture.constants["RetrievePersonalId"]["EnterCodeOtpErrorOverLay"] = {
    "eventname": "retrieve personal id verify id wrong otp code entered warning msg overlay",
    "prop13": "retrieve personal id verify id wrong otp code entered warning msg overlay"
};

Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpErrorOverLay"] = {};
Omniture.constants["RetrieveBusinessId"]["EnterCodeOtpErrorOverLay"] = {
    "eventname": "retrieve business id verify id wrong otp code entered warning msg overlay",
    "prop13": "retrieve business id verify id wrong otp code entered warning msg overlay"
};

Omniture.constants["RetrievePersonalId"]["FourthTimeCCDAccountErrorOverlay"] = {};
Omniture.constants["RetrievePersonalId"]["FourthTimeCCDAccountErrorOverlay"] = {
    "eventname": "retrieve id personal account verify id credit card info warning msg overlay",
    "prop13": "retrieve id personal account verify id credit card info warning msg overlay"
};

Omniture.constants["RetrieveBusinessId"]["FourthTimeCCDAccountErrorOverlay"] = {};
Omniture.constants["RetrieveBusinessId"]["FourthTimeCCDAccountErrorOverlay"] = {
    "eventname": "retrieve id business account verify id credit card info warning msg overlay",
    "prop13": "retrieve id business account verify id credit card info warning msg overlay"
};

Omniture.constants["RetrievePersonalId"]["FourthTimeLLLMWAccountErrorOverlay"] = {};
Omniture.constants["RetrievePersonalId"]["FourthTimeLLLMWAccountErrorOverlay"] = {
    "eventname": "retrieve id personal account verify id enter zip warning msg overlay",
    "prop13": "retrieve id personal account verify id enter zip warning msg overlay"
};

Omniture.constants["RetrieveBusinessId"]["FourthTimeLLLMWAccountErrorOverlay"] = {};
Omniture.constants["RetrieveBusinessId"]["FourthTimeLLLMWAccountErrorOverlay"] = {
    "eventname": "retrieve id business account verify id enter zip warning msg overlay",
    "prop13": "retrieve id business account verify id enter zip warning msg overlay"
};

Omniture.constants["ResetIdShield"]["FourthTimePinErrorOverlay"] = {};
Omniture.constants["ResetIdShield"]["FourthTimePinErrorOverlay"] = {
    "eventname": "reset id shield verify id DDA enter pin warning msg overlay",
    "prop13": "reset id shield verify id DDA enter pin warning msg overlay"
};

Omniture.constants["ResetIdShield"]["FourthTimeCCDAccountErrorOverlay"] = {};
Omniture.constants["ResetIdShield"]["FourthTimeCCDAccountErrorOverlay"] = {
    "eventname": "reset id shield verify identity credit card info warning msg overlay",
    "prop13": "reset id shield verify identity credit card info warning msg overlay"
};

Omniture.constants["ResetIdShield"]["FourthTimeLLLMWAccountErrorOverlay"] = {};
Omniture.constants["ResetIdShield"]["FourthTimeLLLMWAccountErrorOverlay"] = {
    "eventname": "reset id shield account verify id other account enter zip warning msg overlay",
    "prop13": "reset id shield account verify id other account enter zip warning msg overlay"
};

Omniture.constants["ResetIdShield"]["EnterCodeOtpErrorOverLay"] = {};
Omniture.constants["ResetIdShield"]["EnterCodeOtpErrorOverLay"] = {
    "eventname": "reset id shield verify id wrong otp code entered warning msg overlay",
    "prop13": "reset id shield verify id wrong otp code entered warning msg overlay"
};

Omniture.constants["ResetIdShield"]["ResetCommonWrongSSNErrorOverlay"] = {};
Omniture.constants["ResetIdShield"]["ResetCommonWrongSSNErrorOverlay"] = {
    "eventname": "reset id shield verify identity enter ssn warning message overlay error",
    "prop13": "reset id shield verify identity enter ssn warning msg overlay error"
};

Omniture.constants["LaResetPassword"]["EnterCodeOtpErrorOverLay"] = {};
Omniture.constants["LaResetPassword"]["EnterCodeOtpErrorOverLay"] = {
    "eventname": "reset password verify id enter otp code entered warning msg overlay",
    "prop13": "reset password verify id enter otp code entered warning msg overlay"
};

Omniture.constants["LaResetPassword"]["FourthTimePinErrorOverlay"] = {};
Omniture.constants["LaResetPassword"]["FourthTimePinErrorOverlay"] = {
    "eventname": "reset password verify id DDA enter pin warning msg overlay",
    "prop13": "reset password verify id DDA enter pin warning msg overlay"
};

Omniture.constants["LaResetPassword"]["FourthTimeCCDAccountErrorOverlay"] = {};
Omniture.constants["LaResetPassword"]["FourthTimeCCDAccountErrorOverlay"] = {
    "eventname": "reset password verify identity credit card info warning msg overlay",
    "prop13": "reset password verify identity credit card info warning msg overlay"
};

Omniture.constants["LaResetPassword"]["FourthTimeLLLMWAccountErrorOverlay"] = {};
Omniture.constants["LaResetPassword"]["FourthTimeLLLMWAccountErrorOverlay"] = {
    "eventname": "reset password account verify id other account enter zip warning msg overlay",
    "prop13": "reset password account verify id other account enter zip warning msg overlay"
};

Omniture.constants["LaResetPassword"]["ResetCommonWrongSSNErrorOverlay"] = {};
Omniture.constants["LaResetPassword"]["ResetCommonWrongSSNErrorOverlay"] = {
    "eventname": "reset password verify identity enter ssn warning msg overlay error",
    "prop13": "reset password verify identity enter ssn warning msg overlay error"
};
// CI B-55052 END

//Card Activation  changes start
Omniture.constants["CardActivation"] = {};
Omniture.constants["CardActivation"]["siteSection"] = "self service";
Omniture.constants["CardActivation"]["subSiteSection"] = "credit card activation";
Omniture.constants["CardActivation"]["pageMiddleSection"] = "credit card activation";
Omniture.constants["CardActivation"]["NavigateToMyAccountLinkSuccessOverlay"] = {
    "prop53": "activation success go to my accounts link",
};
Omniture.constants["CardActivation"]["NavigateToMyAccountLinkFailedOverlay"] = {
    "prop53": "card activation failure go to my accounts link",
};
Omniture.constants["CardActivation"]["ActivateAnotherCardSuccess"] = {
    "prop53": "activation success activate another card link",
};
Omniture.constants["CardActivation"]["ActivateAnotherCardFailure"] = {
    "prop53": "activation failure activate another card link",
};
Omniture.constants["CardActivation"]["ActivateCardSecurityCodeEmpty"] = {
    "prop53": "field syntax error",
    "prop13": "security code empty",
    "linkTrackVars": ",prop53,prop13"
};
Omniture.constants["CardActivation"]["ActivateCardSecurityCodeFormatError"] = {
    "prop53": "field syntax error",
    "prop13": "security code format error",
    "linkTrackVars": ",prop53,prop13"
};
Omniture.constants["CardActivation"]["ActivateCardSecurityNumberEmpty"] = {
    "prop53": "field syntax error",
    "prop13": "ssn field empty",
    "linkTrackVars": ",prop53,prop13"
};
Omniture.constants["CardActivation"]["ActivateCardSecurityNumberFormatError"] = {
    "prop53": "field syntax error",
    "prop13": "ssn format error",
    "linkTrackVars": ",prop53,prop13"
};
Omniture.constants["CardActivation"]["CancelCardActivation"] = {
    "prop53": "activate card enter credentials cancel link",
};
Omniture.constants["CardActivation"]["BackCardActivation"] = {
    "prop53": "activate card enter credentials back button",
};
Omniture.constants["CardActivation"]["NoCardToActivateBackOption"] = {
    "prop53": "no cards to activate back button",
};

Omniture.constants["CardActivation"]["SubmitSuccess"] = {
    transactionStatus: "credit card activation success",
    siteSection: "self service",
    subSiteSection: "credit card activation",
    currentPage:"activation success",
};

Omniture.constants["CardActivation"]["ActivatedOverlay"] = {
    errorStatus: "card already activated",
    siteSection: "self service",
    subSiteSection: "credit card activation",
    currentPage: "card already activated",
};
Omniture.constants["CardActivation"]["CCASecondFailure"] = {
    errorStatus: "activation failure second message",
    siteSection: "self service",
    subSiteSection: "credit card activation",
    currentPage: "activation failure second message",
};
Omniture.constants["CardActivation"]["CardActivationPageLoad"] = {
    siteSection: "self service",
    subSiteSection: "credit card activation",
    currentPage: "activate card enter credentials",
};
Omniture.constants["CardActivation"]["CCASystemDown"] = {
    errorStatus: "system error",
    siteSection: "self service",
    subSiteSection: "credit card activation",
    currentPage : "system error",
};
Omniture.constants["CardActivation"]["CCANoEligibleCard"] = {
    errorStatus: "no card to activate",
    siteSection: "self service",
    subSiteSection: "credit card activation",
    currentPage: "no card to activate",
};
Omniture.constants["CardActivation"]["CCAFirstFailure"] = {
    errorStatus: "activation failure first message",
    siteSection: "self service",
    subSiteSection: "credit card activation",
    currentPage: "activation failure first message",
};
Omniture.constants["CardActivation"]["ActivateCardInvalidSSN"] = {
    "siteSection": "self service",
    "subSiteSection": "credit card activation",
    "errorStatus": "activation failure first message ssn mismatch",
    "currentPage": "activation failure first message"
};

//Card Activation  changes ends
//page level values for New User and Update User Zelle Register
//added for Send Money - New user reg - 24066 -Start

Omniture.constants["OmniSendMoneyUpdateRegister"] = {};
Omniture.constants["OmniSendMoneyUpdateRegister"]["siteSection"] = "send money";
Omniture.constants["OmniSendMoneyUpdateRegister"]["pageMiddleSection"] = "send money";
Omniture.constants["OmniSendMoneyUpdateRegister"]["subSiteSection"] = "user registration";


Omniture.constants["OmniSendMoneyUpdateRegister"]["p5Updatereguser"] = {};
Omniture.constants["OmniSendMoneyUpdateRegister"]["p5Updatereguser"] = {
    "eventname": "user reg display details",
    "registrationType": "update user registration"
};




//Page level values for Omni Register - New USer Registration eligible account
Omniture.constants["OmniSendMoneyRegister"] = {};
Omniture.constants["OmniSendMoneyRegister"]["siteSection"] = "send money";
Omniture.constants["OmniSendMoneyRegister"]["pageMiddleSection"] = "send money";
Omniture.constants["OmniSendMoneyRegister"]["subSiteSection"] = "user registration";


Omniture.constants["OmniSendMoneyRegister"]["p5newreguser"] = {};
Omniture.constants["OmniSendMoneyRegister"]["p5newreguser"] = {
    "eventname": "user reg select eligible acct"
};


Omniture.constants["OmniSendMoneyRegister"]["AcctErr"] = {};
Omniture.constants["OmniSendMoneyRegister"]["AcctErr"] = {
    "eventname": "user reg select eligible account cannot retrieve acct/token error"  
};

Omniture.constants["OmniSendMoneyRegister"]["noeligibleaccount"] = {};
Omniture.constants["OmniSendMoneyRegister"]["noeligibleaccount"] = {
    "eventname": "user reg customer login no eligible accounts"
};


//Page level values for Omni Register - USer Registration Select/Update Token account
Omniture.constants["OmniSendMoneyRegisterToken"] = {};
Omniture.constants["OmniSendMoneyRegisterToken"]["siteSection"] = "send money";
Omniture.constants["OmniSendMoneyRegisterToken"]["pageMiddleSection"] = "send money";
Omniture.constants["OmniSendMoneyRegisterToken"]["subSiteSection"] = "user registration";



Omniture.constants["OmniSendMoneyRegisterToken"]["p6Regusertoken"] = {};
Omniture.constants["OmniSendMoneyRegisterToken"]["p6Regusertoken"] = {
    "eventname": "user reg select token"
};

Omniture.constants["OmniSendMoneyRegisterToken"]["p6Regusertokenemail"] = {};
Omniture.constants["OmniSendMoneyRegisterToken"]["p6Regusertokenemail"] = {
    "eventname": "user reg select token email",
    "tokentype": "send money user reg select token email"
};
Omniture.constants["OmniSendMoneyRegisterToken"]["p6Regusertokenmobile"] = {};
Omniture.constants["OmniSendMoneyRegisterToken"]["p6Regusertokenmobile"] = {
    "eventname": "user reg select token mobile",
    "tokentype": "send money user reg select token mobile"
    //"eventname": "user reg select token no token registered error"
};
Omniture.constants["OmniSendMoneyRegisterToken"]["p6Regusernotokenselected"] = {};
Omniture.constants["OmniSendMoneyRegisterToken"]["p6Regusernotokenselected"] = {
    "eventname": "user reg select token no token registered error",
    "transactionError": "send money user reg select token error"
   
};


//Page level values for Omni Register - USer Registration OTP Screen
Omniture.constants["OmniSendMoneyRegisterOTP"] = {};
Omniture.constants["OmniSendMoneyRegisterOTP"]["siteSection"] = "send money";
Omniture.constants["OmniSendMoneyRegisterOTP"]["pageMiddleSection"] = "send money";
Omniture.constants["OmniSendMoneyRegisterOTP"]["subSiteSection"] = "user registration";



Omniture.constants["OmniSendMoneyRegisterOTP"]["p7ReguserenterOTP"] = {};
Omniture.constants["OmniSendMoneyRegisterOTP"]["p7ReguserenterOTP"] = {
    "eventname": "user reg otp verify method email"
};

Omniture.constants["OmniSendMoneyRegisterOTP"]["p7ReguserenterOTPerror"] = {};
Omniture.constants["OmniSendMoneyRegisterOTP"]["p7ReguserenterOTPerror"] = {
    "eventname": "user reg verify method email non-successful otp entry error",
    "transactionError": "send money user reg verify method email non-successful otp entry error"
};
Omniture.constants["OmniSendMoneyRegisterOTP"]["p7ReguserenterOTPmaxfailed"] = {};
Omniture.constants["OmniSendMoneyRegisterOTP"]["p7ReguserenterOTPmaxfailed"] = {
    "eventname": "user reg verify method email max failed attempts error",
    "transactionError": "send money user reg verify method email max failed attempts error"
};



//Page level values for Omni Register - USer Registration Confirmation screen
Omniture.constants["OmniSendMoneyRegisterConfirm"] = {};
Omniture.constants["OmniSendMoneyRegisterConfirm"]["siteSection"] = "send money";
Omniture.constants["OmniSendMoneyRegisterConfirm"]["pageMiddleSection"] = "send money";
Omniture.constants["OmniSendMoneyRegisterConfirm"]["subSiteSection"] = "user registration";



Omniture.constants["OmniSendMoneyRegisterConfirm"]["p8ReguserenterConfirm"] = {};
Omniture.constants["OmniSendMoneyRegisterConfirm"]["p8ReguserenterConfirm"] = {
    "eventname": "user reg confirmation"
};


Omniture.constants["OmniSendMoneyRegisterConfirm"]["p8ReguserenterConfirmmiderror"] = {};
Omniture.constants["OmniSendMoneyRegisterConfirm"]["p8ReguserenterConfirmmiderror"] = {
    "eventname": "user reg confirmation no mid cxc acct created error",
    "transactionError": "send money user reg confirmation no cxc mid cxc acct created error"
};


//Page level values for Omni Register - USer Registration Review screen
Omniture.constants["OmniSendMoneyRegisterreview"] = {};
Omniture.constants["OmniSendMoneyRegisterreview"]["siteSection"] = "send money";
Omniture.constants["OmniSendMoneyRegisterreview"]["pageMiddleSection"] = "send money";
Omniture.constants["OmniSendMoneyRegisterreview"]["subSiteSection"] = "user registration";



Omniture.constants["OmniSendMoneyRegisterreview"]["p9Reguserenterreview"] = {};
Omniture.constants["OmniSendMoneyRegisterreview"]["p9Reguserenterreview"] = {
    "eventname": "user reg review"
};

Omniture.constants["OmniSendMoneyRegisterreview"]["p9Reguserreviewerror"] = {};
Omniture.constants["OmniSendMoneyRegisterreview"]["p9Reguserreviewerror"] = {
    "eventname": "user reg review error"   
};

//Page level values for Start Smart Enrollment functionality
Omniture.constants["StartSmartEnrollment"] = {};
Omniture.constants["StartSmartEnrollment"]["siteSection"] = "account dashboard";
Omniture.constants["StartSmartEnrollment"]["subSiteSection"] = "start smart enrollment";
Omniture.constants["StartSmartEnrollment"]["pageMiddleSection"] = "start smart enrollment";

//Event level values for Start Smart Enrollment functionality
Omniture.constants["StartSmartEnrollment"]["p5"] = {};
Omniture.constants["StartSmartEnrollment"]["p5"] = {
    "eventname": "start smart enroll intro",
    "enrollStatus": "start smart step 1 non-banker"
};

Omniture.constants["StartSmartEnrollment"]["p6"] = {};
Omniture.constants["StartSmartEnrollment"]["p6"] = {
    "eventname": "start smart program agreement"
};

Omniture.constants["StartSmartEnrollment"]["p6Disagree"] = {};
Omniture.constants["StartSmartEnrollment"]["p6Disagree"] = {
    "eventname": "start smart enrollment program agreement disagree",
    "prop53": "start smart enrollment program agreement disagree"
};

Omniture.constants["StartSmartEnrollment"]["p7"] = {};
Omniture.constants["StartSmartEnrollment"]["p7"] = {
    "eventname": "start smart initial transfer to account selection",
    "enrollStatus": "start smart initial transfer to account"
};

Omniture.constants["StartSmartEnrollment"]["p8"] = {};
Omniture.constants["StartSmartEnrollment"]["p8"] = {
    "eventname": "start smart initial transfer amount",
    "enrollStatus": "start smart initial transfer amount"
};

Omniture.constants["StartSmartEnrollment"]["p9"] = {};
Omniture.constants["StartSmartEnrollment"]["p9"] = {
    "eventname": "start smart initial transfer frequency selection step 1",
    "enrollStatus": "start smart initial transfer frequency selection step 1"
};

Omniture.constants["StartSmartEnrollment"]["p10"] = {};
Omniture.constants["StartSmartEnrollment"]["p10"] = {
    "eventname": "start smart initial transfer frequency selection step 2",
    "enrollStatus": "start smart initial transfer frequency selection step 2"
};

Omniture.constants["StartSmartEnrollment"]["p15"] = {};
Omniture.constants["StartSmartEnrollment"]["p15"] = {
    "eventname": "start smart initial transfer frequency selection step 3",
    "enrollStatus": "start smart initial transfer frequency selection step 3"
};

Omniture.constants["StartSmartEnrollment"]["p16"] = {};
Omniture.constants["StartSmartEnrollment"]["p16"] = {
    "eventname": "start smart initial transfer start date",
    "enrollStatus": "start smart initial transfer start date"
};

Omniture.constants["StartSmartEnrollment"]["p17"] = {};
Omniture.constants["StartSmartEnrollment"]["p17"] = {
    "eventname": "start smart initial transfer end date selector",
    "enrollStatus": "start smart initial transfer end date selector"
};

Omniture.constants["StartSmartEnrollment"]["p17FrequencyEndDatePicker"] = {};
Omniture.constants["StartSmartEnrollment"]["p17FrequencyEndDatePicker"] = {
    "eventname": "start smart initial transfer end date picker",
    "enrollStatus": "start smart initial transfer end date picker"
};

Omniture.constants["StartSmartEnrollment"]["p19"] = {};
Omniture.constants["StartSmartEnrollment"]["p19"] = {
    "eventname": "start smart initial transfer review",
    "enrollStatus": "start smart initial transfer review"
};

Omniture.constants["StartSmartEnrollment"]["p19Edit"] = {};
Omniture.constants["StartSmartEnrollment"]["p19Edit"] = {
    "eventname": "start smart initial transfer edit",
    "enrollStatus": "start smart initial transfer edit"
};

Omniture.constants["StartSmartEnrollment"]["p20"] = {};
Omniture.constants["StartSmartEnrollment"]["p20"] = {
    "eventname": "start smart initial transfer confirm success",
    "enrollStatus": "start smart initial transfer confirm success"
};

Omniture.constants["StartSmartEnrollment"]["p20Failure"] = {};
Omniture.constants["StartSmartEnrollment"]["p20Failure"] = {
    "eventname": "start smart initial transfer failure",
    "enrollStatus": "start smart initial transfer failure"
};

Omniture.constants["StartSmartEnrollment"]["p21"] = {};
Omniture.constants["StartSmartEnrollment"]["p21"] = {
    "eventname": "start smart enrollment confirmation print link",
    "prop53": "start smart enrollment confirmation print link"
};

//Page level values for Start Smart Transfers functionality
Omniture.constants["StartSmartTransfers"] = {};
Omniture.constants["StartSmartTransfers"]["siteSection"] = "account dashboard";
Omniture.constants["StartSmartTransfers"]["subSiteSection"] = "start smart manage transfers";
Omniture.constants["StartSmartTransfers"]["pageMiddleSection"] = "start smart dashboard";


//Event level values for Start Smart Transfers (Home) functionality
Omniture.constants["StartSmartTransfers"]["p5"] = {};
Omniture.constants["StartSmartTransfers"]["p5"] = {
    "eventname": "manage transfers overview"
};

Omniture.constants["StartSmartTransfers"]["p5TransferDetails"] = {};
Omniture.constants["StartSmartTransfers"]["p5TransferDetails"] = {
    "eventname": "manage transfers detail overlay"
};

Omniture.constants["StartSmartTransfers"]["p5TransferDetailsAction"] = {};
Omniture.constants["StartSmartTransfers"]["p5TransferDetailsAction"] = {
    "eventname": "manage transfers detail overlay action",
    "transactionType": "" //Value gets added dynamically
    /*"start smart transfer edit"
    "start smart transfer cancel"
    "start smart transfer skip"*/
};

Omniture.constants["StartSmartTransfers"]["TransferDescriptions"] = {};
Omniture.constants["StartSmartTransfers"]["TransferDescriptions"] = {
    "eventname": "dashboard transfer descriptions"
};

//Event level values for Start Smart Transfers (Recurring) functionality
Omniture.constants["StartSmartTransfers"]["p5Amount"] = {};
Omniture.constants["StartSmartTransfers"]["p5Amount"] = {
    "eventname": "manage transfers recurring set up amount",
    "transactionType": "start smart transfer recurring"
};

Omniture.constants["StartSmartTransfers"]["p5Frequency"] = {};
Omniture.constants["StartSmartTransfers"]["p5Frequency"] = {
    "eventname": "manage transfers recurring set up frequency step 1",
    "transactionType": "start smart transfer recurring"
};

Omniture.constants["StartSmartTransfers"]["p11"] = {};
Omniture.constants["StartSmartTransfers"]["p11"] = {
    "eventname": "manage transfers recurring set up frequency step 2",
    "transactionType": "start smart transfer recurring"
};

Omniture.constants["StartSmartTransfers"]["p11Frequency3"] = {};
Omniture.constants["StartSmartTransfers"]["p11Frequency3"] = {
    "eventname": "manage transfers recurring set up frequency step 3",
    "transactionType": "start smart transfer recurring"
};

Omniture.constants["StartSmartTransfers"]["p12"] = {};
Omniture.constants["StartSmartTransfers"]["p12"] = {
    "eventname": "manage transfers recurring set up start date",
    "transactionType": "start smart transfer recurring"
};

Omniture.constants["StartSmartTransfers"]["p12FrequencyEndDateIndefinitely"] = {};
Omniture.constants["StartSmartTransfers"]["p12FrequencyEndDateIndefinitely"] = {
    "eventname": "manage transfers recurring set up end date selector",
    "transactionType": "start smart transfer recurring"
};

Omniture.constants["StartSmartTransfers"]["p12FrequencyEndDatePicker"] = {};
Omniture.constants["StartSmartTransfers"]["p12FrequencyEndDatePicker"] = {
    "eventname": "manage transfers recurring set up end date picker",
    "transactionType": "start smart transfer recurring"
};

Omniture.constants["StartSmartTransfers"]["p15"] = {};
Omniture.constants["StartSmartTransfers"]["p15"] = {
    "eventname": "manage transfers recurring set up review",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring review"
};

Omniture.constants["StartSmartTransfers"]["p15Review&SubmitEdit"] = {};
Omniture.constants["StartSmartTransfers"]["p15Review&SubmitEdit"] = {
    "eventname": "manage transfers recurring set up edit",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring edit"
};

Omniture.constants["StartSmartTransfers"]["p15ConfirmationSuccess"] = {};
Omniture.constants["StartSmartTransfers"]["p15ConfirmationSuccess"] = {
    "eventname": "manage transfers recurring set up confirm success",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring confirm"
};

Omniture.constants["StartSmartTransfers"]["p15ConfirmationFailure"] = {};
Omniture.constants["StartSmartTransfers"]["p15ConfirmationFailure"] = {
    "eventname": "manage transfers recurring set up failure",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring failure",
    "errorStatus": ""  //Value gets added dynamically
};

//Event level values for Start Smart Transfers (Purchase) functionality
Omniture.constants["StartSmartTransfers"]["p18"] = {};
Omniture.constants["StartSmartTransfers"]["p18"] = {
    "eventname": "manage transfers purchase transfer select card",
    "transactionType": "start smart transfer purchase setup"
};

Omniture.constants["StartSmartTransfers"]["p19"] = {};
Omniture.constants["StartSmartTransfers"]["p19"] = {
    "eventname": "manage transfers purchase transfer amount",
    "transactionType": "start smart transfer purchase"
};

Omniture.constants["StartSmartTransfers"]["p20"] = {};
Omniture.constants["StartSmartTransfers"]["p20"] = {
    "eventname": "manage transfers purchase transfer start date",
    "transactionType": "start smart transfer purchase"
};

Omniture.constants["StartSmartTransfers"]["p21"] = {};
Omniture.constants["StartSmartTransfers"]["p21"] = {
    "eventname": "manage transfers purchase transfer review",
    "transactionType": "start smart transfer purchase",
    "transactionStatus": "start smart transfer purchase review"
};

Omniture.constants["StartSmartTransfers"]["p15PurchaseReview"] = {};
Omniture.constants["StartSmartTransfers"]["p15PurchaseReview"] = {
    "eventname": "manage transfers purchase transfer edit",
    "transactionType": "start smart transfer purchase",
    "transactionStatus": "start smart transfer purchase edit"
};

Omniture.constants["StartSmartTransfers"]["p15PurchaseConfirmationSuccess"] = {};
Omniture.constants["StartSmartTransfers"]["p15PurchaseConfirmationSuccess"] = {
    "eventname": "manage transfers purchase transfer confirm success",
    "transactionType": "start smart transfer purchase",
    "transactionStatus": "start smart transfer purchase confirm"
};

Omniture.constants["StartSmartTransfers"]["p15PurchaseConfirmationFailure"] = {};
Omniture.constants["StartSmartTransfers"]["p15PurchaseConfirmationFailure"] = {
    "eventname": "manage transfers purchase transfer failure",
    "transactionType": "start smart transfer purchase",
    "transactionStatus": "start smart transfer purchase failure",
    "errorStatus": "" //Value to be added dynamically
};

//Event level values for Start Smart Transfers (Rewards) functionality
Omniture.constants["StartSmartTransfers"]["p24"] = {};
Omniture.constants["StartSmartTransfers"]["p24"] = {
    "eventname": "manage transfers rewards transfer select card",
    "transactionType": "start smart transfer rewards setup"
};

Omniture.constants["StartSmartTransfers"]["p25"] = {};
Omniture.constants["StartSmartTransfers"]["p25"] = {
    "eventname": "manage transfers rewards transfer review",
    "transactionType": "start smart transfer rewards",
    "transactionStatus": "start smart transfer rewards review"
};

Omniture.constants["StartSmartTransfers"]["p15RewardsSuccess"] = {};
Omniture.constants["StartSmartTransfers"]["p15RewardsSuccess"] = {
    "eventname": "manage transfers rewards transfer confirm success",
    "transactionType": "start smart transfer rewards",
    "transactionStatus": "start smart transfer rewards confirm"
};

Omniture.constants["StartSmartTransfers"]["p15RewardFailure"] = {};
Omniture.constants["StartSmartTransfers"]["p15RewardFailure"] = {
    "eventname": "manage transfers rewards transfer failure",
    "transactionType": "start smart transfer rewards",
    "transactionStatus": "start smart transfer rewards failure",
    "errorStatus": "" //Value to be added dynamically
};

//Event level values for Start Smart Transfers (Maintain Recurring) functionality
Omniture.constants["StartSmartTransfers"]["p28"] = {};
Omniture.constants["StartSmartTransfers"]["p28"] = {
    "eventname": "manage transfers recurring transfer edit overview"
};

Omniture.constants["StartSmartTransfers"]["p28Edit"] = {};
Omniture.constants["StartSmartTransfers"]["p28Edit"] = {
    "eventname": "manage transfers recurring transfer edit selected",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring edit start"
};

Omniture.constants["StartSmartTransfers"]["p28EditAmount"] = {};
Omniture.constants["StartSmartTransfers"]["p28EditAmount"] = {
    "eventname": "manage transfers edit recurring transfer amount",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring edit"
};

Omniture.constants["StartSmartTransfers"]["p28EditFrequency1"] = {};
Omniture.constants["StartSmartTransfers"]["p28EditFrequency1"] = {
    "eventname": "manage transfers edit recurring transfer frequency selection step 1",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring edit"
};

Omniture.constants["StartSmartTransfers"]["p28EditFrequency2"] = {};
Omniture.constants["StartSmartTransfers"]["p28EditFrequency2"] = {
    "eventname": "manage transfers edit recurring transfer frequency selection step 2",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring edit"
};

Omniture.constants["StartSmartTransfers"]["p28EditFrequency3"] = {};
Omniture.constants["StartSmartTransfers"]["p28EditFrequency3"] = {
    "eventname": "manage transfers edit recurring transfer frequency selection step 3",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring edit"
};

Omniture.constants["StartSmartTransfers"]["p28EditStartDate"] = {};
Omniture.constants["StartSmartTransfers"]["p28EditStartDate"] = {
    "eventname": "manage transfers edit recurring transfer start date",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring edit"
};

Omniture.constants["StartSmartTransfers"]["p28EditEndDateIndefinitely"] = {};
Omniture.constants["StartSmartTransfers"]["p28EditEndDateIndefinitely"] = {
    "eventname": "manage transfers edit recurring transfer end date selector",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring edit"
};

Omniture.constants["StartSmartTransfers"]["p28EditEndDatePicker"] = {};
Omniture.constants["StartSmartTransfers"]["p28EditEndDatePicker"] = {
    "eventname": "manage transfers edit regular transfer end date picker",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring edit"
};

Omniture.constants["StartSmartTransfers"]["p28EditSubmit"] = {};
Omniture.constants["StartSmartTransfers"]["p28EditSubmit"] = {
    "eventname": "manage transfers recurring transfer edit review submit click",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring edit review"
};

Omniture.constants["StartSmartTransfers"]["p29"] = {};
Omniture.constants["StartSmartTransfers"]["p29"] = {
    "eventname": "manage transfers recurring transfer edit confirm success",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring edit confirm"
};

Omniture.constants["StartSmartTransfers"]["p29EditFailure"] = {};
Omniture.constants["StartSmartTransfers"]["p29EditFailure"] = {
    "eventname": "manage transfers recurring transfer edit failure",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring transfer edit failure",
    "errorStatus": "" //Value to be added dynamically
};

Omniture.constants["StartSmartTransfers"]["p30"] = {};
Omniture.constants["StartSmartTransfers"]["p30"] = {
    "eventname": "manage transfers recurring transfer skip review",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring skip review"
};

Omniture.constants["StartSmartTransfers"]["p30GoBack"] = {};
Omniture.constants["StartSmartTransfers"]["p30GoBack"] = {
    "eventname": "manage transfers recurring transfer skip review go back"
};

Omniture.constants["StartSmartTransfers"]["p31"] = {};
Omniture.constants["StartSmartTransfers"]["p31"] = {
    "eventname": "manage transfers recurring transfer skip confirm success",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring skip confirm"
};

Omniture.constants["StartSmartTransfers"]["p31SkipFailure"] = {};
Omniture.constants["StartSmartTransfers"]["p31SkipFailure"] = {
    "eventname": "manage transfers recurring transfer skip failure",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart recurring transfer skip failure",
    "errorStatus": "" //Value to be added dynamically
};

Omniture.constants["StartSmartTransfers"]["p32"] = {};
Omniture.constants["StartSmartTransfers"]["p32"] = {
    "eventname": "manage transfers recurring transfer cancel review",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer recurring cancel review"
};

Omniture.constants["StartSmartTransfers"]["p32GoBack"] = {};
Omniture.constants["StartSmartTransfers"]["p32GoBack"] = {
    "eventname": "manage transfers recurring transfer cancel review go back"
};

Omniture.constants["StartSmartTransfers"]["p33"] = {};
Omniture.constants["StartSmartTransfers"]["p33"] = {
    "eventname": "manage transfers recurring transfer cancel confirm success",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart transfer regular cancel confirm"
};

Omniture.constants["StartSmartTransfers"]["p33CancelFailure"] = {};
Omniture.constants["StartSmartTransfers"]["p33CancelFailure"] = {
    "eventname": "manage transfers recurring transfer cancel failure",
    "transactionType": "start smart transfer recurring",
    "transactionStatus": "start smart recurring transfer cancel failure",
    "errorStatus": "" //Value to be added dynamically
};

//Event level values for Start Smart Transfers (Maintain Purchase) functionality
Omniture.constants["StartSmartTransfers"]["p35"] = {};
Omniture.constants["StartSmartTransfers"]["p35"] = {
    "eventname": "manage transfers purchase transfer edit overview"
};

Omniture.constants["StartSmartTransfers"]["p35Edit"] = {};
Omniture.constants["StartSmartTransfers"]["p35Edit"] = {
    "eventname": "manage transfers purchase transfer edit selected",
    "transactionType": "start smart transfer purchase",
    "transactionStatus": "start smart transfer purchase edit start"
};

Omniture.constants["StartSmartTransfers"]["p35EditAmountPageLoad"] = {};
Omniture.constants["StartSmartTransfers"]["p35EditAmountPageLoad"] = {
    "eventname": "manage transfers purchase transfer edit amount",
    "transactionType": "start smart transfer purchase",
    "transactionStatus": "start smart transfer purchase edit"
};

Omniture.constants["StartSmartTransfers"]["p35EditStartDatePageLoad"] = {};
Omniture.constants["StartSmartTransfers"]["p35EditStartDatePageLoad"] = {
    "eventname": "manage transfers purchase transfer edit start date",
    "transactionType": "start smart transfer purchase",
    "transactionStatus": "start smart transfer purchase edit"
};

Omniture.constants["StartSmartTransfers"]["p35EditSubmit"] = {};
Omniture.constants["StartSmartTransfers"]["p35EditSubmit"] = {
    "eventname": "manage transfers purchase transfer edit review submit click",
    "transactionType": "start smart transfer purchase",
    "transactionStatus": "start smart transfer purchase edit review"
};

Omniture.constants["StartSmartTransfers"]["p36EditSuccess"] = {};
Omniture.constants["StartSmartTransfers"]["p36EditSuccess"] = {
    "eventname": "manage transfers purchase transfer edit confirm success",
    "transactionType": "start smart transfer purchase",
    "transactionStatus": "start smart transfer purchase edit confirm"
};

Omniture.constants["StartSmartTransfers"]["p36EditFailure"] = {};
Omniture.constants["StartSmartTransfers"]["p36EditFailure"] = {
    "eventname": "manage transfers purchase transfer edit failure",
    "transactionType": "start smart transfer purchase",
    "transactionStatus": "start smart purchase transfer edit failure",
    "errorStatus": "" //Value to be added dynamically
};

Omniture.constants["StartSmartTransfers"]["p37"] = {};
Omniture.constants["StartSmartTransfers"]["p37"] = {
    "eventname": "manage transfers purchase transfer cancel review",
    "transactionType": "start smart transfer purchase",
    "transactionStatus": "start smart transfer purchase cancel review"
};

Omniture.constants["StartSmartTransfers"]["p37GoBack"] = {};
Omniture.constants["StartSmartTransfers"]["p37GoBack"] = {
    "eventname": "manage transfers purchase transfer cancel review go back"
};

Omniture.constants["StartSmartTransfers"]["p38CancelSuccess"] = {};
Omniture.constants["StartSmartTransfers"]["p38CancelSuccess"] = {
    "eventname": "manage transfers purchase transfer cancel confirm success",
    "transactionType": "start smart transfer purchase",
    "transactionStatus": "start smart transfer purchase cancel confirm"
};

Omniture.constants["StartSmartTransfers"]["p38CancelFailure"] = {};
Omniture.constants["StartSmartTransfers"]["p38CancelFailure"] = {
    "eventname": "manage transfers purchase transfer cancel failure",
    "transactionType": "start smart transfer rewards",
    "transactionStatus": "start smart purchase transfer cancel failure",
    "errorStatus": "" //Value to be added dynamically
};


//Event level values for Start Smart Transfers (Maintain Rewards) functionality
Omniture.constants["StartSmartTransfers"]["p40"] = {};
Omniture.constants["StartSmartTransfers"]["p40"] = {
    "eventname": "manage transfers rewards transfer cancel review",
    "transactionType": "start smart transfer rewards",
    "transactionStatus": "start smart transfer rewards cancel review"
};

Omniture.constants["StartSmartTransfers"]["p40GoBack"] = {};
Omniture.constants["StartSmartTransfers"]["p40GoBack"] = {
    "eventname": "manage transfers rewards transfer cancel review go back"
};

Omniture.constants["StartSmartTransfers"]["p41CancelSuccess"] = {};
Omniture.constants["StartSmartTransfers"]["p41CancelSuccess"] = {
    "eventname": "manage transfers rewards transfer cancel confirm success",
    "transactionType": "start smart transfer rewards",
    "transactionStatus": "start smart transfer rewards cancel confirm"
};

Omniture.constants["StartSmartTransfers"]["p41CancelFailure"] = {};
Omniture.constants["StartSmartTransfers"]["p41CancelFailure"] = {
    "eventname": "manage transfers rewards transfer cancel failure",
    "transactionType": "start smart transfer rewards",
    "transactionStatus": "start smart rewards transfer cancel failure",
    "errorStatus": "" //Value to be added dynamically
};

Omniture.constants["System"] = {};
Omniture.constants["System"]["siteSection"] = "system";
Omniture.constants["System"]["subSiteSection"] = "omni";
Omniture.constants["System"]["pageMiddleSection"] = "system";
Omniture.constants["System"]["systemUnavailable"] = {};
Omniture.constants["System"]["systemUnavailable"] = {
    "eventname": "system unavailable error",
    "errorStatus": "" //Value to be added dynamically
};

Omniture.constants["shared_access"] = {};
Omniture.constants["shared_access"]["siteSection"] = "";
Omniture.constants["shared_access"]["subSiteSection"] = "";
Omniture.constants["shared_access"]["pageMiddleSection"] = "shared access";

Omniture.constants["shared_access"]["ineligible"] = {};
Omniture.constants["shared_access"]["ineligible"] = {
    "currentPage": "kyc:search:results:selected user not eligible",
    "siteSection": "kyc search tool",
    "errorStatus": "" //Value to be added dynamically
};

Omniture.constants["shared_access"]["toenroll"] = {};
Omniture.constants["shared_access"]["toenroll"] = {
    "currentPage": "kyc:search:results:selected user not yet enrolled",
    "siteSection": "kyc search tool",
    "errorStatus": "" //Value to be added dynamically
};

Omniture.constants["shared_access"]["unenrolled"] = {};
Omniture.constants["shared_access"]["unenrolled"] = {
    "currentPage": "kyc:search:results:selected user unenrolled",
    "siteSection": "kyc search tool",
    "errorStatus": "" //Value to be added dynamically
};

//Page level values for Stepup functionality
Omniture.constants["StepUp"] = {};
Omniture.constants["StepUp"]["siteSection"] = "system";
Omniture.constants["StepUp"]["subSiteSection"] = "system";
Omniture.constants["StepUp"]["pageMiddleSection"] = "system";

Omniture.constants["StepUp"]["page"] = {};
Omniture.constants["StepUp"]["page"] = {
    "eventname": "stepup",
    "transactionType": "",
    "transactionStatus": "",
    "errorStatus": ""
};

Omniture.constants["StepUp"]["locked"] = {};
Omniture.constants["StepUp"]["locked"] = {
    "eventname": "step up failure locked out",
    "transactionType": "",
    "transactionStatus": "",
    "errorStatus": "step up failure locked out"
};

Omniture.constants["StepUp"]["failed"] = {};
Omniture.constants["StepUp"]["failed"] = {
    "eventname": "step up failure",
    "transactionType": "",
    "transactionStatus": "",
    "errorStatus": "step up failure"
};

Omniture.constants["sendMoney"] = {};
Omniture.constants["sendMoney"]["siteSection"] = "send money";
Omniture.constants["sendMoney"]["subSiteSection"] = "send money";
Omniture.constants["sendMoney"]["pageMiddleSection"] = "send money";

Omniture.constants["sendMoney"]["p8OverView"] = {};
Omniture.constants["sendMoney"]["p8OverView"] = {
    "eventname": "overview",
    "transactionType": "send money",
    "transactionStatus": "send money start"
};

Omniture.constants["sendMoney"]["p8new"] = {};
Omniture.constants["sendMoney"]["p8new"] = {
    "eventname": "select recipient new",
    "transactionType": "send money",
    "transactionStatus": "send money select recipient"
};

Omniture.constants["sendMoney"]["p8AccountError"] = {};
Omniture.constants["sendMoney"]["p8AccountError"] = {
    "eventname": "no valid DDA account error",
    "transactionType": "send money"
};


Omniture.constants["sendMoney"]["p8existing"] = {};
Omniture.constants["sendMoney"]["p8existing"] = {
    "eventname": "select recipient existing",
    "transactionType": "send money",
    "transactionStatus": "send money start"
};

Omniture.constants["sendMoney"]["p9error"] = {};
Omniture.constants["sendMoney"]["p9error"] = {
    "eventname": "select recipient error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p9nosearch"] = {};
Omniture.constants["sendMoney"]["p9nosearch"] = {
    "eventname": "select recipient no search results",
    "transactionType": "send money"
};


Omniture.constants["sendMoney"]["p9errorNoEligibleAccts"] = {};
Omniture.constants["sendMoney"]["p9errorNoEligibleAccts"] = {
    "eventname": "select recipient error no eligible accts error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p9errorContactsError"] = {};
Omniture.constants["sendMoney"]["p9errorContactsError"] = {
    "eventname": "select recipient retrieve user contacts error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p9errorInvalidCharacters"] = {};
Omniture.constants["sendMoney"]["p9errorInvalidCharacters"] = {
    "eventname": "select recipient invalid characters entered error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p9errorNameNotUnique"] = {};
Omniture.constants["sendMoney"]["p9errorNameNotUnique"] = {
    "eventname": "select recipient name not unique",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p9errorNoRecipientSelected"] = {};
Omniture.constants["sendMoney"]["p9errorNoRecipientSelected"] = {
    "eventname": "select recipient no recipient selected error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p3TransactionWidget"] = {};
Omniture.constants["sendMoney"]["p3TransactionWidget"] = {
    "eventname": "send money scheduled transactions widget manage payments link",
    "prop53": "send money scheduled transactions widget manage payments link"
};

Omniture.constants["sendMoney"]["p3SendMoneyWidget"] = {};
Omniture.constants["sendMoney"]["p3SendMoneyWidget"] = {
    "eventname": "send money scheduled transactions widget send money link",
    "prop53": "send money scheduled transactions widget send money link"
};

Omniture.constants["sendMoney"]["p22SelectRecipient"] = {};
Omniture.constants["sendMoney"]["p22SelectRecipient"] = {
    "eventname": "select recipient existing",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p22SelectDeliverySpeed"] = {};
Omniture.constants["sendMoney"]["p22SelectDeliverySpeed"] = {
    "eventname": "select delivery speed",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p22SelectDeliveryMethod"] = {};
Omniture.constants["sendMoney"]["p22SelectDeliveryMethod"] = {
    "eventname": "select delivery method",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p22SelectAmount"] = {};
Omniture.constants["sendMoney"]["p22SelectAmount"] = {
    "eventname": "select amount",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p22SelectAccount"] = {};
Omniture.constants["sendMoney"]["p22SelectAccount"] = {
    "eventname": "select account",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p9confirm"] = {};
Omniture.constants["sendMoney"]["p9confirm"] = {
    "eventname": "add/select recipient confirmation",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p9Deleteconfirm"] = {};
Omniture.constants["sendMoney"]["p9Deleteconfirm"] = {
    "eventname": "delete recipient confirmation",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p9norecipient"] = {};
Omniture.constants["sendMoney"]["p9norecipient"] = {
    "eventname": "select recipient no recipient",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p10editRecipient"] = {};
Omniture.constants["sendMoney"]["p10editRecipient"] = {
    "eventname": "overview",
    "transactionType": "send money"
    //"transactionStatus": "send money edit recipient"
};

Omniture.constants["sendMoney"]["p10addEmail"] = {};
Omniture.constants["sendMoney"]["p10addEmail"] = {
    "eventname": "add/edit recipient add email link",
    "prop53": "add/edit recipient add email link",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p10addMobile"] = {};
Omniture.constants["sendMoney"]["p10addMobile"] = {
    "eventname": "add/edit recipient add mobile link",
    "prop53": "add/edit recipient add mobile link",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p3sendmoneyAction"] = {};
Omniture.constants["sendMoney"]["p3sendmoneyAction"] = {
    "eventname": "send money actions widget send money link",
    "prop53": "send money actions widget send money link"
};

Omniture.constants["sendMoney"]["p3sendmoneyzelleAction"] = {};
Omniture.constants["sendMoney"]["p3sendmoneyzelleAction"] = {
    "eventname": "send money zelle actions widget send money zelle link",
    "prop53": "send money zelle actions widget send money zelle link"
};

Omniture.constants["sendMoney"]["p3managerecipientAction"] = {};
Omniture.constants["sendMoney"]["p3managerecipientAction"] = {
    "eventname": "send money zelle actions widget manage recipient link",
    "prop53": "send money zelle actions widget manage recipient link"
};

Omniture.constants["sendMoney"]["p3registertoreceiveAction"] = {};
Omniture.constants["sendMoney"]["p3registertoreceiveAction"] = {
    "eventname": "send money zelle actions widget register to receive link",
    "prop53": "send money zelle actions widget register to receive link"
};
Omniture.constants["sendMoney"]["p3updateregisterredirectAction"] = {};
Omniture.constants["sendMoney"]["p3updateregisterredirectAction"] = {
    "eventname": "send money zelle actions widget update register to receive link",
    "prop53": "send money zelle actions widget update register to receive link"
};

Omniture.constants["sendMoney"]["p3requestmoneyAction"] = {};
Omniture.constants["sendMoney"]["p3requestmoneyAction"] = {
    "eventname": "send money actions widget request money link",
    "prop53": "send money actions widget request money link"
};

Omniture.constants["sendMoney"]["p3timelineAction"] = {};
Omniture.constants["sendMoney"]["p3timelineAction"] = {
    "eventname": "send money actions widget transactions timeline link",
    "prop53": "send money actions widget transactions timeline link"
};

Omniture.constants["sendMoney"]["addeditmobilenumber"] = {};
Omniture.constants["sendMoney"]["addeditmobilenumber"] = {
    "eventname": "add/edit mobile error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["addeditemail"] = {};
Omniture.constants["sendMoney"]["addeditemail"] = {
    "eventname": "add/edit email error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["addeditrmemail"] = {};
Omniture.constants["sendMoney"]["addeditrmemail"] = {
    "eventname": "request money add/edit email error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["addeditaddress"] = {};
Omniture.constants["sendMoney"]["addeditaddress"] = {
    "eventname": "add/edit address error",
    "transactionType": "send money"
};


Omniture.constants["sendMoney"]["p10addAccount"] = {};
Omniture.constants["sendMoney"]["p10addAccount"] = {
    "eventname": "add bank account link",
    "prop53": "add bank account link"
};


Omniture.constants["sendMoney"]["p10delRecipientLink"] = {};
Omniture.constants["sendMoney"]["p10delRecipientLink"] = {
    "eventname": "delete recipient review delete link",
    "prop53": "delete recipient review delete link"
};

Omniture.constants["sendMoney"]["p10NoConfirm"] = {};
Omniture.constants["sendMoney"]["p10NoConfirm"] = {
    "eventname": "send money requested payments cancel requested payment review cancel no link",
    "prop53": "send money requested payments cancel requested payment review cancel no link",
    "subSiteSection": "transactions timeline cancel requested payment send money"
};

Omniture.constants["sendMoney"]["p10error"] = {};
Omniture.constants["sendMoney"]["p10error"] = {
    "eventname": "edit recipient overlay error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p10unexpectederror"] = {};
Omniture.constants["sendMoney"]["p10unexpectederror"] = {
    "eventname": "edit recipient error unexpected error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p10emailerror"] = {};
Omniture.constants["sendMoney"]["p10emailerror"] = {
    "eventname": "edit recipient error invalid email format",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p13saveMobile"] = {};
Omniture.constants["sendMoney"]["p13saveMobile"] = {
    "eventname": "add/edit mobile save",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p12saveEmail"] = {};
Omniture.constants["sendMoney"]["p12saveEmail"] = {
    "eventname": "add/edit email save",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p10DelEmail"] = {};
Omniture.constants["sendMoney"]["p10DelEmail"] = {
    "eventname": "add/edit email delete",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p10DelConfirm"] = {};
Omniture.constants["sendMoney"]["p10DelConfirm"] = {
    "eventname": "add/edit email/mobile delete",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p10DelAccount"] = {};
Omniture.constants["sendMoney"]["p10DelAccount"] = {
    "eventname": "add/edit bank account delete",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["addEditAccountError"] = {};
Omniture.constants["sendMoney"]["addEditAccountError"] = {
    "eventname": "add/edit account error",
    "transactionType": "send money"
};


Omniture.constants["sendMoney"]["p10DelAddress"] = {};
Omniture.constants["sendMoney"]["p10DelAddress"] = {
    "eventname": "add/edit address delete",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p10DelMobil"] = {};
Omniture.constants["sendMoney"]["p10DelMobil"] = {
    "eventname": "add/edit mobile delete",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p12delMobileError"] = {};
Omniture.constants["sendMoney"]["p12delMobileError"] = {
    "eventname": "delete mobile token in use error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p12delEmailError"] = {};
Omniture.constants["sendMoney"]["p12delEmailError"] = {
    "eventname": "delete email token in use error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p14delAddressError"] = {};
Omniture.constants["sendMoney"]["p14delAddressError"] = {
    "eventname": "delete address token in use error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p14addAddress"] = {};
Omniture.constants["sendMoney"]["p14addAddress"] = {
    "eventname": "add/edit recipient add address to send a check link",
    "prop53": "add/edit recipient add address to send a check link"
};

Omniture.constants["sendMoney"]["p15saveAccount"] = {};
Omniture.constants["sendMoney"]["p15saveAccount"] = {
    "eventname": "add/edit bank account info save",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p15saveAccountError"] = {};
Omniture.constants["sendMoney"]["p15saveAccountError"] = {
    "eventname": "add/edit account error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p15editAccount"] = {};
Omniture.constants["sendMoney"]["p15editAccount"] = {
    "eventname": "delete bank account token in use error",
    "transactionType": "send money"
};


Omniture.constants["sendMoney"]["p14saveAddress"] = {};
Omniture.constants["sendMoney"]["p14saveAddress"] = {
    "eventname": "add/edit address save",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p10deleteRecipient"] = {};
Omniture.constants["sendMoney"]["p10deleteRecipient"] = {
    "eventname": "delete recipient review",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p10delReviewPendError"] = {};
Omniture.constants["sendMoney"]["p10delReviewPendError"] = {
    "eventname": "delete recipient review transaction pending error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p10editNotEnrollCheckLink"] = {};
Omniture.constants["sendMoney"]["p10editNotEnrollCheckLink"] = {
    "eventname": "edit recipient not enrolled enroll to send a check link"
};

Omniture.constants["sendMoney"]["p10editNotEnrollAccountLink"] = {};
Omniture.constants["sendMoney"]["p10editNotEnrollAccountLink"] = {
    "eventname": "edit recipient not enrolled enroll direct to account link"
};

Omniture.constants["sendMoney"]["p10editSave"] = {};
Omniture.constants["sendMoney"]["p10editSave"] = {
    "eventname": "edit recipient save",
    "transactionType": "send money"
};

//Event
Omniture.constants["sendMoney"]["p10cancel"] = {};
Omniture.constants["sendMoney"]["p10cancel"] = {
    "eventname": "edit recipient cancel link",
    "prop53": "edit recipient cancel link"
};

Omniture.constants["sendMoney"]["p16selectAccount"] = {};
Omniture.constants["sendMoney"]["p16selectAccount"] = {
    "eventname": "select from account",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p16FromAccount"] = {};
Omniture.constants["sendMoney"]["p16FromAccount"] = {
    "eventname": "from account",
    "transactionType": "send money"
};


Omniture.constants["sendMoney"]["p20EnterAmount"] = {};
Omniture.constants["sendMoney"]["p20EnterAmount"] = {
    "eventname": "enter amount",
    "transactionType": "send money"
};


Omniture.constants["sendMoney"]["p18"] = {};
Omniture.constants["sendMoney"]["p18"] = {
    "eventname": "select delivery method",
    "transactionType": "send money"
};

//Event
Omniture.constants["sendMoney"]["p16Next"] = {};
Omniture.constants["sendMoney"]["p16Next"] = {
    "eventname": "enter amount",
    "prop53": "delivery method next/continue link"
};

//Event
Omniture.constants["sendMoney"]["p16Edit"] = {};
Omniture.constants["sendMoney"]["p16Edit"] = {
    "eventname": "delivery method edit link",
    "prop53": "delivery method edit link",
    "transactionStatus": "send money edit delivery method"
};

Omniture.constants["sendMoney"]["p20"] = {};
Omniture.constants["sendMoney"]["p20"] = {
    "eventname": "amount entered continue",
    "transactionStatus": "send money edit amount"
};

Omniture.constants["sendMoney"]["p18Error"] = {};
Omniture.constants["sendMoney"]["p18Error"] = {
    "eventname": "amount validation error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p25ReviewMissingError"] = {};
Omniture.constants["sendMoney"]["p25ReviewMissingError"] = {
    "eventname": "send money review missing message error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p7Dialog"] = {};
Omniture.constants["sendMoney"]["p7Dialog"] = {
    "eventname": "send money how do recurring payments work",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p22deliverySpeed"] = {};
Omniture.constants["sendMoney"]["p22deliverySpeed"] = {
    "eventname": "select delivery speed",
    "transactionStatus": "send money delivery speed",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p20Error"] = {};
Omniture.constants["sendMoney"]["p20Error"] = {
    "eventname": "delivery speed error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p29recurring"] = {};
Omniture.constants["sendMoney"]["p29recurring"] = {
    "eventname": "frequency recurring save selection",
    "transactionFrequency": "send money review recurring send",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p29recurringcontinue"] = {};
Omniture.constants["sendMoney"]["p29recurringcontinue"] = {
    "eventname": "frequency recurring start date selection",
    "transactionFrequency": "send money review recurring send",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p28OneTimeSave"] = {};
Omniture.constants["sendMoney"]["p28OneTimeSave"] = {
    "eventname": "frequency one time save selection",
    "transactionFrequency": "send money review one time send",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p25SendMoneyReview"] = {};
Omniture.constants["sendMoney"]["p25SendMoneyReview"] = {
    "eventname": "send money review",
    "transactionStatus": "send money review",
    "transactionFrequency": "send money review one time send",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p22Recurring"] = {};
Omniture.constants["sendMoney"]["p22Recurring"] = {
    "eventname": "send money review",
    "transactionStatus": "send money review",
    "transactionFrequency": "send money review recurring",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p22cancelLink"] = {};
Omniture.constants["sendMoney"]["p22cancelLink"] = {
    "eventname": "send money review cancel link",
    "transactionStatus": "send money review cancel",
    "prop53": "send money review cancel link"
};

Omniture.constants["sendMoney"]["p25"] = {};
Omniture.constants["sendMoney"]["p25"] = {
    "eventname": "send money confirm success",
    "transactionStatus": "send money confirm",
    "deliverySpeed": "send money confirm Standard Delivery",
    "transactionType": "send money"

};

Omniture.constants["sendMoney"]["sendmoneyConfirm"] = {};
Omniture.constants["sendMoney"]["sendmoneyConfirm"] = {
    "eventname": "send money confirm success",
    "transactionStatus": "send money confirm",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p25Error"] = {};
Omniture.constants["sendMoney"]["p25Error"] = {
    "eventname": "send money confirm failure error",
    "transactionStatus": "send money confirm failure",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p25ErrorOTP"] = {};
Omniture.constants["sendMoney"]["p25ErrorOTP"] = {
    "eventname": "send money FFS verify OTP",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p25ErrorOTPInvalidCode"] = {};
Omniture.constants["sendMoney"]["p25ErrorOTPInvalidCode"] = {
    "eventname": "send money FFS verify OTP incorrect code",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p25ErrorOTPExpiredCode"] = {};
Omniture.constants["sendMoney"]["p25ErrorOTPExpiredCode"] = {
    "eventname": "send money FFS verify OTP expired code",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p25ErrorOTPLockedOut"] = {};
Omniture.constants["sendMoney"]["p25ErrorOTPLockedOut"] = {
    "eventname": "send money FFS verify OTP locked out error",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p25ErrorOTPCancelVerify"] = {};
Omniture.constants["sendMoney"]["p25ErrorOTPCancelVerify"] = {
    "eventname": "send money FFS verify OTP cancel verification",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p25ErrorOTPCancelVerifyNB"] = {};
Omniture.constants["sendMoney"]["p25ErrorOTPCancelVerifyNB"] = {
    "eventname": "send money FFS verify OTP cancel verification no button",
    "prop53": "send money FFS verify OTP cancel verification no button"
};

Omniture.constants["sendMoney"]["p28"] = {};
Omniture.constants["sendMoney"]["p28"] = {
    "eventname": "send money how it works",
    "transactionType": "send money"
};


Omniture.constants["sendMoney"]["p29"] = {};
Omniture.constants["sendMoney"]["p29"] = {
    "eventname": "send money transfer limits",
    "transactionType": "send money"
};

//Event
Omniture.constants["sendMoney"]["p29Link"] = {};
Omniture.constants["sendMoney"]["p29Link"] = {
    "eventname": "transfer limits learn more link",
    "prop53": "transfer limits learn more link"
};

Omniture.constants["sendMoney"]["p29Limits"] = {};
Omniture.constants["sendMoney"]["p29Limits"] = {
    "eventname": "send money send limits",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p31"] = {};
Omniture.constants["sendMoney"]["p31"] = {
    "eventname": "send money fees delivery times",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p32"] = {};
Omniture.constants["sendMoney"]["p32"] = {
    "eventname": "send money how do recurring payments work",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p33"] = {};
Omniture.constants["sendMoney"]["p33"] = {
    "eventname": "send money request limits",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p34"] = {};
Omniture.constants["sendMoney"]["p34"] = {
    "eventname": "send money request money",
    "transactionType": "send money"
};


Omniture.constants["sendMoney"]["p8RequestMoney"] = {};
Omniture.constants["sendMoney"]["p8RequestMoney"] = {
    "eventname": "send money about request money",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p10Overlay"] = {};
Omniture.constants["sendMoney"]["p10Overlay"] = {
    "eventname": "edit recipient overlay",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p12EditRecPaymentOptions"] = {};
Omniture.constants["sendMoney"]["p12EditRecPaymentOptions"] = {
    "eventname": "transactions timeline edit recurring payment options",
    "subSiteSection": "transactions timeline edit send money",
    //"transactionType": "transactions timeline edit recurring payment send money",
    "transactionType": "send money"
};

Omniture.constants["sendMoney"]["p15PrintLink"] = {};
Omniture.constants["sendMoney"]["p15PrintLink"] = {
    "eventname": "confirm print link",
    "prop53": "confirm print link"
};

// START : B-19049 - Tagging: P2P: Sending money to person and allowing periods, numbers and spaces MESSAGE
Omniture.constants["sendMoney"]["OneNameOrNoSpaceError"] = {};
Omniture.constants["sendMoney"]["OneNameOrNoSpaceError"] = {
    "eventname": "add new recipient one name no space error"
};
// END : B-19049 - Tagging: P2P: Sending money to person and allowing periods, numbers and spaces MESSAGE


// End Send Money Constants -------------------------------------------------------

// Begin Request Money Constants

Omniture.constants["requestmoney"] = {};
Omniture.constants["requestmoney"]["siteSection"] = "send money";
Omniture.constants["requestmoney"]["subSiteSection"] = "request money";
Omniture.constants["requestmoney"]["pageMiddleSection"] = "send money";

Omniture.constants["requestmoney"]["p5Overview"] = {};
Omniture.constants["requestmoney"]["p5Overview"] = {
    "eventname": "request money overview",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p5NoToken"] = {};
Omniture.constants["requestmoney"]["p5NoToken"] = {
    "eventname": "request money no registered token",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p10cancel"] = {};
Omniture.constants["requestmoney"]["p10cancel"] = {
    "eventname": "request money edit recipient cancel link",
    "prop53": "request money edit recipient cancel link"
};

Omniture.constants["requestmoney"]["p10deleteRecipient"] = {};
Omniture.constants["requestmoney"]["p10deleteRecipient"] = {
    "eventname": "request money delete recipient review",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p13saveMobile"] = {};
Omniture.constants["requestmoney"]["p13saveMobile"] = {
    "eventname": "request money add/edit mobile save",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p3sendmoneyAction"] = {};
Omniture.constants["requestmoney"]["p3sendmoneyAction"] = {
    "eventname": "send money actions widget send money link",
    "prop53": "send money actions widget send money link"
};

Omniture.constants["requestmoney"]["p3requestmoneyAction"] = {};
Omniture.constants["requestmoney"]["p3requestmoneyAction"] = {
    "eventname": "send money actions widget request money link",
    "prop53": "send money actions widget request money link"
};

Omniture.constants["requestmoney"]["p10delRecipientLink"] = {};
Omniture.constants["requestmoney"]["p10delRecipientLink"] = {
    "eventname": "request money delete recipient review delete link",
    "prop53": "request money delete recipient review delete link",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p3timelineAction"] = {};
Omniture.constants["requestmoney"]["p3timelineAction"] = {
    "eventname": "send money actions widget transactions timeline link",
    "prop53": "send money actions widget transactions timeline link"
};

Omniture.constants["requestmoney"]["p3receivemoneyAction"] = {};
Omniture.constants["requestmoney"]["p3receivemoneyAction"] = {
    "eventname": "send requestmoney actions widget preferences link",
    "prop53": "send money actions widget preferences link"
};

Omniture.constants["requestmoney"]["p3managerecipientAction"] = {};
Omniture.constants["requestmoney"]["p3managerecipientAction"] = {
    "eventname": "send money zelle actions widget manage recipient link",
    "prop53": "send money zelle actions widget manage recipient link"
};

Omniture.constants["requestmoney"]["p3registertoreceiveAction"] = {};
Omniture.constants["requestmoney"]["p3registertoreceiveAction"] = {
    "eventname": "send money actions widget register to receive link",
    "prop53": "send money actions widget register to receive link"
};

Omniture.constants["requestmoney"]["p5preferenceslink"] = {};
Omniture.constants["requestmoney"]["p5preferenceslink"] = {
    "eventname": "request money no registered token preferences link",
    "prop53": "request money no registered token preferences link"
};

Omniture.constants["requestmoney"]["p5registertoreceive"] = {};
Omniture.constants["requestmoney"]["p5registertoreceive"] = {
    "eventname": "request money no registered token preferences link",
    "prop53": "request money no registered token preferences link"
};

Omniture.constants["requestmoney"]["p12saveEmail"] = {};
Omniture.constants["requestmoney"]["p12saveEmail"] = {
    "eventname": "request money add/edit email save",
    "transactionType": "request money"
};




Omniture.constants["requestmoney"]["p6ValidationMsg"] = {};
Omniture.constants["requestmoney"]["p6ValidationMsg"] = {
    "eventname": "request money validation message",
    "prop53": "request money validation message"
};

Omniture.constants["requestmoney"]["p5AddRecipient"] = {};
Omniture.constants["requestmoney"]["p5AddRecipient"] = {
    "eventname": "request money add recipient",
    "transactionType": "request money"
};


Omniture.constants["requestmoney"]["p7NewRecipient"] = {};
Omniture.constants["requestmoney"]["p7NewRecipient"] = {
    "eventname": "request money select recipient new",
    "transactionStatus": "request money select recipient",
    "transactionType": "request money"
};


Omniture.constants["requestmoney"]["p7SelectRecipient"] = {};
Omniture.constants["requestmoney"]["p7SelectRecipient"] = {
    "eventname": "request money select recipient existing",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p9Rconfirm"] = {};
Omniture.constants["requestmoney"]["p9Rconfirm"] = {
    "eventname": "add/select recipient confirmation",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p9RDeleteconfirm"] = {};
Omniture.constants["requestmoney"]["p9RDeleteconfirm"] = {
    "eventname": "delete recipient confirmation",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p9Error"] = {};
Omniture.constants["requestmoney"]["p9Error"] = {
    "eventname": "request money select recipient error",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p7SelectNotification"] = {};
Omniture.constants["requestmoney"]["p7SelectNotification"] = {
    "eventname": "request money token list select notification method",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p7RecipientList"] = {};
Omniture.constants["requestmoney"]["p7RecipientList"] = {
    "eventname": "request money recipient list",
    "transactionType": "request money"
};


Omniture.constants["requestmoney"]["p8NoRecipient"] = {};
Omniture.constants["requestmoney"]["p8NoRecipient"] = {
    "eventname": "request money select recipient no recipient",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p9NoSearch"] = {};
Omniture.constants["requestmoney"]["p9NoSearch"] = {
    "eventname": "request money select recipient no search results"
};

Omniture.constants["requestmoney"]["p10Overlay"] = {};
Omniture.constants["requestmoney"]["p10Overlay"] = {
    "eventname": "request money edit recipient overlay",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p10OverlayError"] = {};
Omniture.constants["requestmoney"]["p10OverlayError"] = {
    "eventname": "request money edit recipient overlay error",
    "transactionType": "request money"
};


Omniture.constants["requestmoney"]["p10AddEmail"] = {};
Omniture.constants["requestmoney"]["p10AddEmail"] = {
    "eventname": "request money add/edit recipient add email link",
    "prop53": "request money add/edit recipient add email link"
};


Omniture.constants["requestmoney"]["addeditmobilenumber"] = {};
Omniture.constants["requestmoney"]["addeditmobilenumber"] = {
    "eventname": "request money add/edit mobile error",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["addeditrmemail"] = {};
Omniture.constants["requestmoney"]["addeditrmemail"] = {
    "eventname": "request money add/edit email error",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p10AddMobile"] = {};
Omniture.constants["requestmoney"]["p10AddMobile"] = {
    "eventname": "request money add/edit recipient add mobile link",
    "prop53": "request money add/edit recipient add mobile link"
};


Omniture.constants["requestmoney"]["p10AddAddress"] = {};
Omniture.constants["requestmoney"]["p10AddAddress"] = {
    "eventname": "request money add/edit address save",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p10AddAddress"] = {};
Omniture.constants["requestmoney"]["p10AddAddress"] = {
    "eventname": "request money add/edit address save",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p10Save"] = {};
Omniture.constants["requestmoney"]["p10Save"] = {
    "eventname": "request money edit recipient save",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p12memo"] = {};
Omniture.constants["requestmoney"]["p12memo"] = {
    "eventname": "request money memo",
    "transactionStatus": "request money memo",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p5Next"] = {};
Omniture.constants["requestmoney"]["p5Next"] = {
    "eventname": "request money next",
    "transactionStatus": "request money next",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p14Review"] = {};
Omniture.constants["requestmoney"]["p14Review"] = {
    "eventname": "request money review",
    "transactionStatus": "request money review",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p14EditLink"] = {};
Omniture.constants["requestmoney"]["p14EditLink"] = {
    "eventname": "request money review edit link",
    "prop53": "request money review edit link"
};

Omniture.constants["requestmoney"]["p14ReviewCancelLink"] = {};
Omniture.constants["requestmoney"]["p14ReviewCancelLink"] = {
    "eventname": "request money review cancel link",
    "prop53": "request money review cancel link"
};

Omniture.constants["requestmoney"]["p14CancelLink"] = {};
Omniture.constants["requestmoney"]["p14CancelLink"] = {
    "eventname": "request money cancel link",
    "prop53": "request money cancel link"
};

Omniture.constants["requestmoney"]["p14ConfirmSuccess"] = {};
Omniture.constants["requestmoney"]["p14ConfirmSuccess"] = {
    "eventname": "request money confirm success",
    "transactionStatus": "request money confirm",
    "serviceType": "request money confirm cxc",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p15FailureError"] = {};
Omniture.constants["requestmoney"]["p15FailureError"] = {
    "eventname": "request money confirm failure",
    "transactionStatus": "request money confirm failure",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p11RequestMoneyDetails"] = {};
Omniture.constants["requestmoney"]["p11RequestMoneyDetails"] = {
    "eventname": "request money money details",
    "transactionStatus": "request money money details",
    "transactionType": "request money"
};

Omniture.constants["requestmoney"]["p13SentFrom"] = {};
Omniture.constants["requestmoney"]["p13SentFrom"] = {
    "eventname": "request money sent from",
    "transactionStatus": "request money sent from",
    "transactionType": "request money"
};



Omniture.constants["requestmoney"]["p15SendAnotherRequest"] = {};
Omniture.constants["requestmoney"]["p15SendAnotherRequest"] = {
    "eventname": "request money confirm send another request link",
    "prop53": "request money confirm send another request link"
};

Omniture.constants["requestmoney"]["p15ViewPaymentRequest"] = {};
Omniture.constants["requestmoney"]["p15ViewPaymentRequest"] = {
    "eventname": "request money confirm view payment requests link",
    "prop53": "request money confirm view payment requests link"
};

Omniture.constants["requestmoney"]["p15PrintLink"] = {};
Omniture.constants["requestmoney"]["p15PrintLink"] = {
    "eventname": "request money confirm print link",
    "prop53": "request money confirm print link"
};

// START : B-19049 - Tagging: P2P: Sending money to person and allowing periods, numbers and spaces MESSAGE
Omniture.constants["requestmoney"]["OneNameOrNoSpaceError"] = {};
Omniture.constants["requestmoney"]["OneNameOrNoSpaceError"] = {
    "eventname": "request money add new recipient one name no space error"
};
// END : B-19049 - Tagging: P2P: Sending money to person and allowing periods, numbers and spaces MESSAGE

// End Request Money Constants -------------------------------------------------------


// Begin Timeline Constants

Omniture.constants["timeline"] = {};
Omniture.constants["timeline"]["siteSection"] = "send money";
Omniture.constants["timeline"]["pageMiddleSection"] = "send money";
//Omniture.constants["timeline"]["subSiteSection"] = "transactions timeline past payments";


//Omniture.constants["timeline"]["p5ShowPayments"] = {};
//Omniture.constants["timeline"]["p5ShowPayments"] = {
//    "eventname": "send money scheduled payments search show all payments link",
//    "prop53": "send money scheduled payments search show all payments link"
//};

Omniture.constants["timeline"]["p7ViewRequest"] = {};
Omniture.constants["timeline"]["p7ViewRequest"] = {
    "eventname": "transactions timeline requested payments view request initiate",
    "subSiteSection": "transactions timeline requested payments",
    "transactionType": "transactions timeline view requested send money"
};


Omniture.constants["timeline"]["p7CancelRequest"] = {};
Omniture.constants["timeline"]["p7CancelRequest"] = {
    "eventname": "transactions timeline requested payments cancel request initiate",
    "subSiteSection": "transactions timeline requested payments",
    "transactionType": "transactions timeline cancel requested send money"
};

Omniture.constants["timeline"]["p21CancelRequest"] = {};
Omniture.constants["timeline"]["p21CancelRequest"] = {
    "eventname": "transactions timeline cancel requested payment step 1 select request",
    "subSiteSection": "transactions timeline send money cancel requested payment",
    "transactionType": "transactions timeline send money cancel requested payment"
};

Omniture.constants["timeline"]["p22CancelRequestReview"] = {};
Omniture.constants["timeline"]["p22CancelRequestReview"] = {
    "eventname": "transactions timeline cancel requested payment review",
    "subSiteSection": "transactions timeline cancel requested payment send money"
};


Omniture.constants["timeline"]["p21CancelRequestReview"] = {};
Omniture.constants["timeline"]["p21CancelRequestReview"] = {
    "eventname": "transactions timeline cancel requested payment confirm success",
    "subSiteSection": "transactions timeline cancel requested payment send money"
};

Omniture.constants["timeline"]["p21ConfirmReview"] = {};
Omniture.constants["timeline"]["p21ConfirmReview"] = {
    "eventname": "transactions timeline cancel requested payment confirm success",
    "subSiteSection": "transactions timeline cancel requested payment send money"
};

Omniture.constants["timeline"]["p10DoNotCancel"] = {};
Omniture.constants["timeline"]["p10DoNotCancel"] = {
    "eventname": "send money cancel payment step 1 do not cancel link",
    "prop53": "send money cancel payment step 1 do not cancel link",
    "subSiteSection": "transactions timeline edit send money"
};

Omniture.constants["timeline"]["p3pastPayments"] = {};
Omniture.constants["timeline"]["p3pastPayments"] = {
    "eventname": "transactions timeline past payments overview",
    "subSiteSection": "transactions timeline past payments"
};

Omniture.constants["timeline"]["p4Edittransaction"] = {};
Omniture.constants["timeline"]["p4Edittransaction"] = {
    "eventname": "transactions timeline scheduled payments edit payment initiate",
    "subSiteSection": "transactions timeline scheduled payments",
    "transactionType": "transactions timeline edit send money"
};

Omniture.constants["timeline"]["p4Canceltransaction"] = {};
Omniture.constants["timeline"]["p4Canceltransaction"] = {
    "eventname": "transactions timeline scheduled payments cancel payment initiate",
    "subSiteSection": "transactions timeline scheduled payments",
    "transactionType": "transactions timeline cancel send money"
};


Omniture.constants["timeline"]["p5searchTransaction"] = {};
Omniture.constants["timeline"]["p5searchTransaction"] = {
    "eventname": "transactions timeline search transactions",
    "subSiteSection": "transactions timeline",
    "transactionType": "transactions timeline search"
};

Omniture.constants["timeline"]["p5ShowAllPayments"] = {};
Omniture.constants["timeline"]["p5ShowAllPayments"] = {
    "eventname": "send money timeline search show all payments link",
    "prop53": "send money timeline search show all payments link"
};

Omniture.constants["timeline"]["p5searchResults"] = {};
Omniture.constants["timeline"]["p5searchResults"] = {
    "eventname": "transactions timeline search results",
    "subSiteSection": "transactions timeline",
    "transactionType": "transactions timeline search"
};

Omniture.constants["timeline"]["p5NoSearchResults"] = {};
Omniture.constants["timeline"]["p5NoSearchResults"] = {
    "eventname": "transactions timeline no search results",
    "subSiteSection": "transactions timeline",
    "transactionType": "transactions timeline search"
};

Omniture.constants["timeline"]["p10CancelPayment"] = {};
Omniture.constants["timeline"]["p10CancelPayment"] = {
    "eventname": "transactions timeline cancel payment step 1",
    "subSiteSection": "transactions timeline edit send money",
    "transactionType": "transactions timeline edit send money"
};

Omniture.constants["timeline"]["p4scheduledPayments"] = {};
Omniture.constants["timeline"]["p4scheduledPayments"] = {
    "eventname": "transactions timeline scheduled payments overview",
    "subSiteSection": "transactions timeline scheduled payments"
};
Omniture.constants["timeline"]["p6recurringPayments"] = {};
Omniture.constants["timeline"]["p6recurringPayments"] = {
    "eventname": "transactions timeline recurring payments overview",
    "subSiteSection": "transactions timeline recurring payments"
};
Omniture.constants["timeline"]["p7requestPayments"] = {};
Omniture.constants["timeline"]["p7requestPayments"] = {
    "eventname": "transactions timeline requested payments overview",
    "subSiteSection": "transactions timeline requested payments"
};

Omniture.constants["timeline"]["p3tooltipPastPay"] = {};
Omniture.constants["timeline"]["p3tooltipPastPay"] = {
    "eventname": "send money past payments transaction details click overlay",
    "prop53": "send money past payments transaction details click overlay",
    "subSiteSection": "transactions timeline past payments"
};

Omniture.constants["timeline"]["p3tooltipSchePay"] = {};
Omniture.constants["timeline"]["p3tooltipSchePay"] = {
    "eventname": "send money scheduled payments transaction details click overlay",
    "prop53": "send money scheduled payments transaction details click overlay",
    "subSiteSection": "transactions timeline scheduled payments"
};

Omniture.constants["timeline"]["p3tooltipTransacPay"] = {};
Omniture.constants["timeline"]["p3tooltipTransacPay"] = {
    "eventname": "send money recurring payments transaction details click overlay",
    "prop53": "send money recurring payments transaction details click overlay",
    "subSiteSection": "transactions timeline recurring payments"
};



Omniture.constants["timeline"]["p3tooltipReqPay"] = {};
Omniture.constants["timeline"]["p3tooltipReqPay"] = {
    "eventname": "send money requested payments transaction details click overlay",
    "subSiteSection": "transactions timeline requested payments"
};

Omniture.constants["timeline"]["p6EditNextPayments"] = {};
Omniture.constants["timeline"]["p6EditNextPayments"] = {
    "eventname": "transactions timeline recurring payments edit next payment initiate",
    "subSiteSection": "transactions timeline recurring payments",
    "transactionType": "transactions timeline edit next recurring send money"
};


Omniture.constants["timeline"]["p6NoPastTransactions"] = {};
Omniture.constants["timeline"]["p6NoPastTransactions"] = {
    "eventname": "transactions timeline past payments can't display transactions",
    "subSiteSection": "transactions timeline past payments"
};


Omniture.constants["timeline"]["p6NoscheduledTransactions"] = {};
Omniture.constants["timeline"]["p6NoscheduledTransactions"] = {
    "eventname": "transactions timeline scheduled payments can't display transactions",
    "subSiteSection": "transactions timeline scheduled payments"
};

Omniture.constants["timeline"]["p6NoRecurringTransactions"] = {};
Omniture.constants["timeline"]["p6NoRecurringTransactions"] = {
    "eventname": "transactions timeline recurring payments can't display transactions",
    "subSiteSection": "transactions timeline recurring payments"
};

Omniture.constants["timeline"]["p6NoRequestTransactions"] = {};
Omniture.constants["timeline"]["p6NoRequestTransactions"] = {
    "eventname": "transactions timeline requested payments can't display transactions",
    "subSiteSection": "transactions timeline requested payments"
};

Omniture.constants["timeline"]["p6EditReccPayments"] = {};
Omniture.constants["timeline"]["p6EditReccPayments"] = {
    "eventname": "transactions timeline recurring payments edit recurring payment initiate",
    "subSiteSection": "transactions timeline recurring payments",
    "transactionType": "transactions timeline edit recurring send money"
};

Omniture.constants["timeline"]["p6CancelReccPayments"] = {};
Omniture.constants["timeline"]["p6CancelReccPayments"] = {
    "eventname": "transactions timeline recurring payments cancel recurring payment initiate",
    "subSiteSection": "transactions timeline recurring payments",
    "transactionType": "transactions timeline cancel recurring send money"
};

Omniture.constants["timeline"]["p6CancelNextPayments"] = {};
Omniture.constants["timeline"]["p6CancelNextPayments"] = {
    "eventname": "transactions timeline recurring payments cancel next payment initiate",
    "subSiteSection": "transactions timeline recurring payments",
    "transactionType": "transactions timeline cancel next recurring send money"
};

Omniture.constants["timeline"]["p8EditPayment"] = {};
Omniture.constants["timeline"]["p8EditPayment"] = {
    "eventname": "transactions timeline edit payment step 1",
    "subSiteSection": "transactions timeline edit send money",
    "transactionType": "transactions timeline edit send money"
};

Omniture.constants["timeline"]["p8EditPaymentOptions"] = {};
Omniture.constants["timeline"]["p8EditPaymentOptions"] = {
    "eventname": "transactions timeline edit payment options",
    "subSiteSection": "transactions timeline edit send money",
    "transactionType": "transactions timeline edit send money"
};

Omniture.constants["timeline"]["p12EditRecPaymentOptions"] = {};
Omniture.constants["timeline"]["p12EditRecPaymentOptions"] = {
    "eventname": "transactions timeline edit recurring payment options",
    "subSiteSection": "transactions timeline edit send money",
    "transactionType": "transactions timeline edit recurring payment send money"
};

Omniture.constants["timeline"]["p16EditNextPaymentOptions"] = {};
Omniture.constants["timeline"]["p16EditNextPaymentOptions"] = {
    "eventname": "transactions timeline edit next payment options",
    "subSiteSection": "transactions timeline edit send money",
    "transactionType": "transactions timeline edit next payment send money"
};

Omniture.constants["timeline"]["p16EditPaymentCancel"] = {};
Omniture.constants["timeline"]["p16EditPaymentCancel"] = {
    "eventname": "send money edit next payment step 1 cancel link",
    "prop53": "send money edit next payment step 1 cancel link",
    "subSiteSection": "transactions timeline edit send money"
};

Omniture.constants["timeline"]["p14DoNotCancelRec"] = {};
Omniture.constants["timeline"]["p14DoNotCancelRec"] = {
    "eventname": "send money cancel recurring payment do not cancel link",
    "prop53": "send money cancel recurring payment do not cancel link",
    "subSiteSection": "transactions timeline send money cancel recurring payment"
};

Omniture.constants["timeline"]["p16EditNextPay"] = {};
Omniture.constants["timeline"]["p16EditNextPay"] = {
    "eventname": "transactions timeline edit next payment step 1",
    "subSiteSection": "transactions timeline send money edit next payment",
    "transactionType": "transactions timeline send money edit next payment"
};

Omniture.constants["timeline"]["p18CancelNextPay"] = {};
Omniture.constants["timeline"]["p18CancelNextPay"] = {
    "eventname": "transactions timeline cancel next payment step 1",
    "subSiteSection": "transactions timeline send money cancel next payment",
    "transactionType": "transactions timeline send money cancel cancel payment"
};

Omniture.constants["timeline"]["p17EditNextPrintPage"] = {};
Omniture.constants["timeline"]["p17EditNextPrintPage"] = {
    "eventname": "send money edit next payment confirm success print link",
    "prop53": "send money edit next payment confirm success print link",
    "subSiteSection": "transactions timeline edit send money"
};

Omniture.constants["timeline"]["p17EditRecPrintPage"] = {};
Omniture.constants["timeline"]["p17EditRecPrintPage"] = {
    "eventname": "send money edit recurring payment confirm success print link",
    "prop53": "send money edit recurring payment confirm success print link",
    "subSiteSection": "transactions timeline send money edit recurring payment"
};

Omniture.constants["timeline"]["p15CancelRecPrintPage"] = {};
Omniture.constants["timeline"]["p15CancelRecPrintPage"] = {
    "eventname": "send money cancel recurring payment confirm success print link",
    "prop53": "send money cancel recurring payment confirm success print link",
    "subSiteSection": "transactions timeline cancel recurring payment send money"
};

Omniture.constants["timeline"]["p19CancelNextPrintPage"] = {};
Omniture.constants["timeline"]["p19CancelNextPrintPage"] = {
    "eventname": "send money cancel next payment confirm success print link",
    "prop53": "send money cancel next payment confirm success print link",
    "subSiteSection": "transactions timeline send money cancel next payment"
};


Omniture.constants["timeline"]["p19EditPrintPage"] = {};
Omniture.constants["timeline"]["p19EditPrintPage"] = {
    "eventname": "send money edit payment confirm success print link",
    "subSiteSection": "transactions timeline edit send money"
};

//

Omniture.constants["timeline"]["p19PastPaymentsPrint"] = {};
Omniture.constants["timeline"]["p19PastPaymentsPrint"] = {
    "eventname": "transactions timeline past payments print link",
    "prop53": "transactions timeline past payments print link",
    "subSiteSection": "transactions timeline past payments"
}

Omniture.constants["timeline"]["p19ScheduledPaymentsPrint"] = {};
Omniture.constants["timeline"]["p19ScheduledPaymentsPrint"] = {
    "eventname": "transactions timeline scheduled payments print link",
    "prop53": "transactions timeline scheduled payments print link",
    "subSiteSection": "transactions timeline scheduled payments"
}

Omniture.constants["timeline"]["p19RecurringPaymentsPrint"] = {};
Omniture.constants["timeline"]["p19RecurringPaymentsPrint"] = {
    "eventname": "transactions timeline recurring payments print link",
    "prop53": "transactions timeline recurring payments print link",
    "subSiteSection": "transactions timeline recurring payments"
}

Omniture.constants["timeline"]["p19CancelPaymentPrint"] = {};
Omniture.constants["timeline"]["p19CancelPaymentPrint"] = {
    "eventname": "send money cancel payment confirm success print link",
    "subSiteSection": "transactions timeline edit send money",
    "prop53": "send money cancel payment confirm success print link"
}


Omniture.constants["timeline"]["p19RequestPaymentsPrint"] = {};
Omniture.constants["timeline"]["p19RequestPaymentsPrint"] = {
    "eventname": "transactions timeline requested payments print link",
    "prop53": "transactions timeline requested payments print link",
    "subSiteSection": "transactions timeline requested payments"
}


Omniture.constants["timeline"]["p8CancelEdit"] = {};
Omniture.constants["timeline"]["p8CancelEdit"] = {
    "eventname": "send money edit payment step 1 cancel link",
    "subSiteSection": "transactions timeline edit send money",
    "prop53": "send money edit payment step 1 cancel link"
};

Omniture.constants["timeline"]["p8CancelEditRec"] = {};
Omniture.constants["timeline"]["p8CancelEditRec"] = {
    "eventname": "send money edit recurring payment step 1 cancel link",
    "prop53": "send money edit recurring payment step 1 cancel link",
    "subSiteSection": "transactions timeline send money edit recurring payment"
};

Omniture.constants["timeline"]["p12RecurringEditPayment"] = {};
Omniture.constants["timeline"]["p12RecurringEditPayment"] = {
    "eventname": "transactions timeline edit recurring payment step 1",
    "subSiteSection": "transactions timeline send money edit recurring payment",
    "transactionType": "transactions timeline send money edit recurring payment"
};


Omniture.constants["timeline"]["p14CancelRec"] = {};
Omniture.constants["timeline"]["p14CancelRec"] = {
    "eventname": "transactions timeline cancel recurring payment step 1",
    "subSiteSection": "transactions timeline send money cancel recurring payment",
    "transactionType": "transactions timeline send money cancel recurring payment"
};

Omniture.constants["timeline"]["p20ViewRequestedPayments"] = {};
Omniture.constants["timeline"]["p20ViewRequestedPayments"] = {
    "eventname": "transactions timeline view requested payment",
    "subSiteSection": "transactions timeline view requested payment"
};

Omniture.constants["timeline"]["p20ViewRequestedPaymentsError"] = {};
Omniture.constants["timeline"]["p20ViewRequestedPaymentsError"] = {
    "eventname": "transactions timeline view requested payment error",
    "subSiteSection": "transactions timeline view requested payment"
};

Omniture.constants["timeline"]["p20SendAnotherPayment"] = {};
Omniture.constants["timeline"]["p20SendAnotherPayment"] = {
    "eventname": "send money requested payments send another request link",
    "prop53": "send money requested payments send another request link",
    "subSiteSection": "transactions timeline view requested payment"
};

Omniture.constants["timeline"]["p20CancelAnotherPayment"] = {};
Omniture.constants["timeline"]["p20CancelAnotherPayment"] = {
    "eventname": "send money requested payments cancel payment request link",
    "prop53": "send money requested payments cancel payment request link",
    "subSiteSection": "transactions timeline view requested payment"
};



Omniture.constants["timeline"]["p18Donotcancel"] = {};
Omniture.constants["timeline"]["p18Donotcancel"] = {
    "eventname": "send money cancel next payment do not cancel link",
    "prop53": "send money cancel next payment do not cancel link",
    "subSiteSection": "transactions timeline send money cancel next payment"
};



Omniture.constants["timeline"]["p17EditConfirmSuccess"] = {};
Omniture.constants["timeline"]["p17EditConfirmSuccess"] = {
    "eventname": "transactions timeline edit send money confirm success",
    "subSiteSection": "transactions timeline edit send money",
    "transactionType": "transactions timeline edit send money",
    "transactionStatus": "edit send money confirm"
};

Omniture.constants["timeline"]["p17EditConfirmFailure"] = {};
Omniture.constants["timeline"]["p17EditConfirmFailure"] = {
    "eventname": "transactions timeline edit send money confirm failure",
    "subSiteSection": "transactions timeline",
    "transactionType": "transactions timeline edit send money",
    "transactionStatus": "edit send money confirm failure"
};

Omniture.constants["timeline"]["p17EditNextConfirmSuccess"] = {};
Omniture.constants["timeline"]["p17EditNextConfirmSuccess"] = {
    "eventname": "transactions timeline edit next payment confirm success",
    "subSiteSection": "transactions timeline edit send money",
    "transactionType": "transactions timeline edit next payment send money",
    "transactionStatus": "edit next payment send money confirm"
};

Omniture.constants["timeline"]["p17EditNextConfirmFailure"] = {};
Omniture.constants["timeline"]["p17EditNextConfirmFailure"] = {
    "eventname": "transactions timeline edit next payment confirm failure",
    "subSiteSection": "transactions timeline edit send money",
    "transactionType": "transactions timeline edit next recurring payment send money",
    "transactionStatus": "edit next payment send money confirm failure"
};

Omniture.constants["timeline"]["p17CancelNextConfirmSuccess"] = {};
Omniture.constants["timeline"]["p17CancelNextConfirmSuccess"] = {
    "eventname": "transactions timeline cancel next payment confirm success",
    "subSiteSection": "transactions timeline cancel next payment send money",
    "transactionType": "transactions timeline cancel next payment send money",
    "transactionStatus": "cancel next payment send money confirm"
};

Omniture.constants["timeline"]["p17CancelPaymentConfirmSuccess"] = {};
Omniture.constants["timeline"]["p17CancelPaymentConfirmSuccess"] = {
    "eventname": "transactions timeline cancel send money confirm success",
    "subSiteSection": "transactions timeline cancel send money",
    "transactionType": "transactions timeline cancel send money",
    "transactionStatus": "cancel send money confirm"
};

Omniture.constants["timeline"]["p17CancelPaymentConfirmFailure"] = {};
Omniture.constants["timeline"]["p17CancelPaymentConfirmFailure"] = {
    "eventname": "transactions timeline cancel send money confirm failure",
    "subSiteSection": "transactions timeline",
    "transactionType": "transactions timeline cancel send money",
    "transactionStatus": "cancel send money confirm failure"
};



Omniture.constants["timeline"]["p17CancelNextConfirmFailure"] = {};
Omniture.constants["timeline"]["p17CancelNextConfirmFailure"] = {
    "eventname": "transactions timeline cancel next payment send money confirm failure",
    "subSiteSection": "transactions timeline",
    "transactionType": "transactions timeline cancel recurring payment send money",
    "transactionStatus": "cancel recurring payment send money confirm failure"
};


Omniture.constants["timeline"]["p17CancelRecConfirmSuccess"] = {};
Omniture.constants["timeline"]["p17CancelRecConfirmSuccess"] = {
    "eventname": "transactions timeline cancel recurring payment confirm success",
    "subSiteSection": "transactions timeline cancel recurring payment send money",
    "transactionType": "transactions timeline cancel recurring payment send money",
    "transactionStatus": "cancel recurring payment send money confirm"
};

Omniture.constants["timeline"]["p17CancelRecConfirmFailure"] = {};
Omniture.constants["timeline"]["p17CancelRecConfirmFailure"] = {
    "eventname": "transactions timeline cancel recurring payment send money confirm failure",
    "subSiteSection": "transactions timeline",
    "transactionType": "transactions timeline cancel recurring payment send money",
    "transactionStatus": "cancel recurring payment send money confirm failure"
};

Omniture.constants["timeline"]["p17EditRecConfirmSuccess"] = {};
Omniture.constants["timeline"]["p17EditRecConfirmSuccess"] = {
    "eventname": "transactions timeline edit recurring payment send money confirm success",
    "subSiteSection": "transactions timeline edit send money",
    "transactionType": "transactions timeline edit recurring payment send money",
    "transactionStatus": "edit recurring payment send money confirm"
};

Omniture.constants["timeline"]["p17EditRecConfirmFailure"] = {};
Omniture.constants["timeline"]["p17EditRecConfirmFailure"] = {
    "eventname": "transactions timeline edit recurring payment send money confirm failure",
    "subSiteSection": "transactions timeline",
    "transactionType": "transactions timeline edit recurring payment send money",
    "transactionStatus": "edit recurring payment send money confirm failure"
};


// End Timeline Constants -------------------------------------------------------

// Begin Receive Money Constants

Omniture.constants["receiveMoney"] = {};
Omniture.constants["receiveMoney"]["siteSection"] = "receive money";
Omniture.constants["receiveMoney"]["subSiteSection"] = "receive money";
Omniture.constants["receiveMoney"]["pageMiddleSection"] = "receive money";

Omniture.constants["receiveMoney"]["p3"] = {};
Omniture.constants["receiveMoney"]["p3"] = {
    "eventname": "select default account",
    "transactionType": "receive money"
};

Omniture.constants["receiveMoney"]["p4"] = {};
Omniture.constants["receiveMoney"]["p4"] = {
    "eventname": "select token to register",
    "transactionType": "receive money"
};

Omniture.constants["receiveMoney"]["p4Remove"] = {};
Omniture.constants["receiveMoney"]["p4Remove"] = {
    "eventname": "remove token registered",
    "transactionType": "receive money"
};


Omniture.constants["receiveMoney"]["p5AllToken"] = {};
Omniture.constants["receiveMoney"]["p5AllToken"] = {
    "eventname": "all tokens unregistered",
    "transactionType": "receive money"
};


Omniture.constants["receiveMoney"]["p4Confirm"] = {};
Omniture.constants["receiveMoney"]["p4Confirm"] = {
    "eventname": "confirm token to register link",
    "transactionType": "receive money"
};

Omniture.constants["receiveMoney"]["p4Add"] = {};
Omniture.constants["receiveMoney"]["p4Add"] = {
    "eventname": "new email/mobile token to register",
    "transactionType": "receive money"
};

Omniture.constants["receiveMoney"]["p4Overlay"] = {};
Omniture.constants["receiveMoney"]["p4Overlay"] = {
    "eventname": "confirm token to register overlay",
    "transactionType": "receive money"
};

Omniture.constants["receiveMoney"]["p4NewOverlay"] = {};
Omniture.constants["receiveMoney"]["p4NewOverlay"] = {
    "eventname": "add new token overlay",
    "transactionType": "receive money"
};

//Event
Omniture.constants["receiveMoney"]["p4Link"] = {};
Omniture.constants["receiveMoney"]["p4Link"] = {
    "eventname": "confirm token overlay continue",
    "transactionType": "receive money"
};


Omniture.constants["receiveMoney"]["p5"] = {};
Omniture.constants["receiveMoney"]["p5"] = {
    "eventname": "select token for alert notification",
    "transactionType": "receiveMoney"
};

//Event
Omniture.constants["receiveMoney"]["p5Add"] = {};
Omniture.constants["receiveMoney"]["p5Add"] = {
    "eventname": "add new alert destination",
    "transactionType": "receive money"
};

Omniture.constants["receiveMoney"]["p6"] = {};
Omniture.constants["receiveMoney"]["p6"] = {
    "eventname": "receive money preferences review",
    "transactionType": "receive money"
};
//Event
Omniture.constants["receiveMoney"]["p5Cancel"] = {};
Omniture.constants["receiveMoney"]["p5Cancel"] = {
    "eventname": "receive money preferences review cancel link",
    "prop53": "receive money preferences review cancel link"
};

Omniture.constants["receiveMoney"]["p6Success"] = {};
Omniture.constants["receiveMoney"]["p6Success"] = {
    "eventname": "receive money preferences confirm success",
    "transactionType": "receive money"
};

Omniture.constants["receiveMoney"]["p6Failure"] = {};
Omniture.constants["receiveMoney"]["p6Failure"] = {
    "eventname": "receive money preferences failure",
    "transactionStatus": "receive money failure",
    "transactionType": "receive money"
};


Omniture.constants["receiveMoney"]["p6Save"] = {};
Omniture.constants["receiveMoney"]["p6Save"] = {
    "eventname": "receive money preferences review save",
    "transactionType": "receive money"
};

//Event
Omniture.constants["receiveMoney"]["p4Continue"] = {};
Omniture.constants["receiveMoney"]["p4Continue"] = {
    "eventname": "add new token overlay continue",
    "transactionType": "receive money"
};


// End Receive Constants -------------------------------------------------------

// Begin Notification Widget Constants

Omniture.constants["notifications"] = {};
Omniture.constants["notifications"]["siteSection"] = "send money notifications";
Omniture.constants["notifications"]["subSiteSection"] = "requested money";
Omniture.constants["notifications"]["pageMiddleSection"] = "send money notifications";

Omniture.constants["notifications"]["p3Overview"] = {};
Omniture.constants["notifications"]["p3Overview"] = {
    "eventname": "notifications overview"
};


Omniture.constants["notifications"]["p3NoNotification"] = {};
Omniture.constants["notifications"]["p3NoNotification"] = {
    "eventname": "no notifications"
};

Omniture.constants["notifications"]["p3RequestLink"] = {};
Omniture.constants["notifications"]["p3RequestLink"] = {
    "eventname": "request money link",
    "prop53": "request money link",
    "transactionType": "send money notifications",
    "siteSection": "send money",
    "subSiteSection": "send money notifications"
};

Omniture.constants["notifications"]["p4ToDo"] = {};
Omniture.constants["notifications"]["p4ToDo"] = {
    "eventname": "to do requested money",
    "transactionType": "requested money"
};

Omniture.constants["notifications"]["p5DeclineReview"] = {};
Omniture.constants["notifications"]["p5DeclineReview"] = {
    "eventname": "to do requested money decline payment review",
    "transactionType": "requested money"
};


Omniture.constants["notifications"]["p5DeclineConfirm"] = {};
Omniture.constants["notifications"]["p5DeclineConfirm"] = {
    "eventname": "to do requested money decline payment confirm",
    "transactionType": "requested money",
    "transactionStatus": "decline requestedMoney confirm"
};


Omniture.constants["notifications"]["p5DeclineFailure"] = {};
Omniture.constants["notifications"]["p5DeclineFailure"] = {
    "eventname": "to do requested money decline payment failure",
    "transactionType": "requested money",
    "transactionStatus": "decline requestedMoney failure"
};



Omniture.constants["notifications"]["p6ToDoReview"] = {};
Omniture.constants["notifications"]["p6ToDoReview"] = {
    "eventname": "pay requester review",
    "transactionType": "pay requested money",
    "transactionStatus": "pay requested money review",
    "deliverySpeed": "pay requester review standard delivery"
};


Omniture.constants["notifications"]["p7Confirm"] = {};
Omniture.constants["notifications"]["p7Confirm"] = {
    "eventname": "pay requester confirm",
    "transactionType": "pay requested money",
    "transactionStatus": "pay requested money confirm",
    "deliverySpeed": "pay requester confirm standard delivery"
};


Omniture.constants["notifications"]["p7Failure"] = {};
Omniture.constants["notifications"]["p7Failure"] = {
    "eventname": "pay requester failure",
    "transactionType": "pay requested money",
    "transactionStatus": "pay requested money failure"
};

Omniture.constants["notifications"]["p7Print"] = {};
Omniture.constants["notifications"]["p7Print"] = {
    "eventname": "pay requester confirm print link",
    "prop53": "pay requester confirm print link"
};

Omniture.constants["notifications"]["p8Unclaimed"] = {};
Omniture.constants["notifications"]["p8Unclaimed"] = {
    "eventname": "to do unclaimed",
    "transactionType": "requested money"
};

// End Receive Constants -------------------------------------------------------


// Start Transafer Constants -------------------------------------------------------

Omniture.constants["tranfers"] = {};
Omniture.constants["tranfers"]["siteSection"] = "transfers";
Omniture.constants["tranfers"]["subSiteSection"] = "internal transfer";
Omniture.constants["tranfers"]["pageMiddleSection"] = "transfers";

Omniture.constants["tranfers"]["p4"] = {};
Omniture.constants["tranfers"]["p4"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfers overview"
};

//CI August  - B-43378 changes 
Omniture.constants["tranfers"]["AdvanceNotAvailableDesktop"] = {};
Omniture.constants["tranfers"]["AdvanceNotAvailableDesktop"] = {
    "subSiteSection": "transfers",
    "eventname": "transfer advance not available from account desktop"
};
//CI August  - B-43378 changes end

//START  B-43837 TAGGING: MB OVERLAY ccds aren't available with "--" Available Balance/Credit
Omniture.constants["tranfers"]["availableBalanceforMobile"] = {};
Omniture.constants["tranfers"]["availableBalanceforMobile"] = {
    "subSiteSection": "transfers",
    "eventname": "transfer advance not available from account mobile"
};

Omniture.constants["tranfers"]["transferAdvanceClose"] = {};
Omniture.constants["tranfers"]["transferAdvanceClose"] = {
    "eventname": "transfer advance not available from account close link mobile",
    "prop53": "transfer advance not available from account close link mobile"
};

Omniture.constants["tranfers"]["transferAdvanceSelect"] = {};
Omniture.constants["tranfers"]["transferAdvanceSelect"] = {
    "eventname": "transfer advance not available from account select another account link mobile",
    "prop53": "transfer advance not available from account select another account link mobile"
};

// END B-43837 TAGGING: MB OVERLAY ccds aren't available with "--" Available Balance/Credit

Omniture.constants["tranfers"]["p7FromAccount"] = {};
Omniture.constants["tranfers"]["p7FromAccount"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer selected from account"
};

Omniture.constants["tranfers"]["p7NoEligibleToAccount"] = {};
Omniture.constants["tranfers"]["p7NoEligibleToAccount"] = {
    "subSiteSection": "internal transfer",
    "eventname": "brokerage transfer to account error no eligible to account",
    "errorStatus": "brokerage transfer to account error no eligible to account"
};

Omniture.constants["tranfers"]["p7NoEligibleLinkedAccount"] = {};
Omniture.constants["tranfers"]["p7NoEligibleLinkedAccount"] = {
    "subSiteSection": "internal transfer",
    "eventname": "brokerage transfer no eligible linked account",
    "errorStatus": "brokerage transfer no eligible linked account"
};

Omniture.constants["tranfers"]["EligibilityError"] = {};
Omniture.constants["tranfers"]["EligibilityError"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer account error eligibility error",
    "errorStatus": "transfer account error eligibility error"
};

//B-33423 - USBI-USBI Transfer Changes - Start
Omniture.constants["tranfers"]["UsbiToUsbiFROMAccountEligibilityError"] = {};
Omniture.constants["tranfers"]["UsbiToUsbiFROMAccountEligibilityError"] = {
    "eventname": "usbi-usbi ineligible from account for transfers error message",
    "prop1": "transfers",
    "prop2": "internal transfer",
    "prop13": "usbi-usbi ineligible from account for transfers error message",

};

Omniture.constants["tranfers"]["UsbiToUsbiTOAccountEligibilityError"] = {};
Omniture.constants["tranfers"]["UsbiToUsbiTOAccountEligibilityError"] = {
    "eventname": "usbi-usbi ineligible to account for transfers error message",
    "prop1": "transfers",
    "prop2": "internal transfer",
    "prop13": "usbi-usbi ineligible to account for transfers error message",

};
//B-33423 - USBI-USBI TRansfer Changes - End

Omniture.constants["tranfers"]["p7ToAccount"] = {};
Omniture.constants["tranfers"]["p7ToAccount"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer to account"
};


Omniture.constants["tranfers"]["viewAllAccounts"] = {};
Omniture.constants["tranfers"]["viewAllAccounts"] = {
    "subSiteSection": "internal transfer",
    "eventname": "balance widget view all accounts click"
};

Omniture.constants["tranfers"]["viewLessAccounts"] = {};
Omniture.constants["tranfers"]["viewLessAccounts"] = {
    "subSiteSection": "internal transfer",
    "eventname": "balance widget view less accounts click"
};

Omniture.constants["tranfers"]["mortgagelink"] = {};
Omniture.constants["tranfers"]["mortgagelink"] = {
    "subSiteSection": "internal transfer",
    "eventname": "make mortgage payment here link"
};

Omniture.constants["tranfers"]["p44Step1"] = {};
Omniture.constants["tranfers"]["p44Step1"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer frequency step 1"
};

Omniture.constants["tranfers"]["p10Amount"] = {};
Omniture.constants["tranfers"]["p10Amount"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer enter amount"
};

Omniture.constants["tranfers"]["p45step2"] = {};
Omniture.constants["tranfers"]["p45step2"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer frequency step 2"
};

Omniture.constants["tranfers"]["p45Step3"] = {};
Omniture.constants["tranfers"]["p45Step3"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer frequency step 3"
};

Omniture.constants["tranfers"]["p6"] = {};
Omniture.constants["tranfers"]["p6"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer from account start enabled account warning"
};

Omniture.constants["tranfers"]["p7TransferFrom"] = {};
Omniture.constants["tranfers"]["p7TransferFrom"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer from account"
};

Omniture.constants["tranfers"]["p14NegativeBalance"] = {};
Omniture.constants["tranfers"]["p14NegativeBalance"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer negative balance warning",
    "errorStatus": "transfers review negative balance warning"
};

Omniture.constants["tranfers"]["p14NegativeBalanceCancel"] = {};
Omniture.constants["tranfers"]["p14NegativeBalanceCancel"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer negative balance warning cancel"
};

Omniture.constants["tranfers"]["MortgagePayment"] = {};
Omniture.constants["tranfers"]["MortgagePayment"] = {
    "subSiteSection": "internal transfer",
    "eventname": "make mortgage payment here link"
};

Omniture.constants["tranfers"]["p11"] = {};
Omniture.constants["tranfers"]["p11"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer date"
};

Omniture.constants["tranfers"]["Indefinite"] = {};
Omniture.constants["tranfers"]["Indefinite"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer recurring indefinite end date"
};

Omniture.constants["tranfers"]["p48"] = {};
Omniture.constants["tranfers"]["p48"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer end date"
};

Omniture.constants["tranfers"]["AmountValidationError"] = {};
Omniture.constants["tranfers"]["AmountValidationError"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer payment amount validation error"
};

Omniture.constants["tranfers"]["DateValidationError"] = {};
Omniture.constants["tranfers"]["DateValidationError"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer payment date validation error"
};

Omniture.constants["tranfers"]["p13"] = {};
Omniture.constants["tranfers"]["p13"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer review edit click"
};

Omniture.constants["tranfers"]["p13Cancel"] = {};
Omniture.constants["tranfers"]["p13Cancel"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer review cancel click"
};

Omniture.constants["tranfers"]["p12"] = {};
Omniture.constants["tranfers"]["p12"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer review"
};

Omniture.constants["tranfers"]["p51"] = {};
Omniture.constants["tranfers"]["p51"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer confirm"
};

Omniture.constants["tranfers"]["p7NoAccounts"] = {};
Omniture.constants["tranfers"]["p7NoAccounts"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer from account no eligible accounts"
};

Omniture.constants["tranfers"]["p9AccountMissing"] = {};
Omniture.constants["tranfers"]["p9AccountMissing"] = {
    "subSiteSection": "internal transfer",
    "prop53": "why don\'t i see all my accounts",
    "eventname": "transfer brokerage plus why don’t I see my accounts"
};

Omniture.constants["tranfers"]["ConfirmPrint"] = {};
Omniture.constants["tranfers"]["ConfirmPrint"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer confirm print click"
};

Omniture.constants["tranfers"]["p16AmountAdjustment"] = {};
Omniture.constants["tranfers"]["p16AmountAdjustment"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer amount adjustment required"
};


Omniture.constants["tranfers"]["p16"] = {};
Omniture.constants["tranfers"]["p16"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer failure"
};

Omniture.constants["tranfers"]["p18noeligible"] = {};
Omniture.constants["tranfers"]["p18noeligible"] = {
    "subSiteSection": "purchase transfer",
    "eventname": "transfer purchase transfer no eligible accounts"
};

Omniture.constants["tranfers"]["p19"] = {};
Omniture.constants["tranfers"]["p19"] = {
    "subSiteSection": "purchase transfer",
    "eventname": "transfer purchase transfer selected"
};

Omniture.constants["tranfers"]["p19Card"] = {};
Omniture.constants["tranfers"]["p19Card"] = {
    "subSiteSection": "purchase transfer",
    "eventname": "transfer purchase transfer from select card"
};

Omniture.constants["tranfers"]["p22"] = {};
Omniture.constants["tranfers"]["p22"] = {
    "subSiteSection": "purchase transfer",
    "eventname": "transfer purchase transfer select from account"
};

Omniture.constants["tranfers"]["p23"] = {};
Omniture.constants["tranfers"]["p23"] = {
    "subSiteSection": "purchase transfer",
    "eventname": "transfer purchase transfer select to account"
};


Omniture.constants["tranfers"]["p24"] = {};
Omniture.constants["tranfers"]["p24"] = {
    "subSiteSection": "purchase transfer",
    "eventname": "transfer purchase transfer amount"
};


Omniture.constants["tranfers"]["p25"] = {};
Omniture.constants["tranfers"]["p25"] = {
    "subSiteSection": "purchase transfer",
    "eventname": "transfer purchase transfer review"
};

Omniture.constants["tranfers"]["p25Edit"] = {};
Omniture.constants["tranfers"]["p25Edit"] = {
    "subSiteSection": "purchase transfer",
    "eventname": "transfer purchase transfer review edit click"
};

Omniture.constants["tranfers"]["p25Cancel"] = {};
Omniture.constants["tranfers"]["p25Cancel"] = {
    "subSiteSection": "purchase transfer",
    "eventname": "transfer purchase transfer review cancel click"
};

Omniture.constants["tranfers"]["p27"] = {};
Omniture.constants["tranfers"]["p27"] = {
    "subSiteSection": "purchase transfer",
    "eventname": "transfer purchase transfer confirm"
};


Omniture.constants["tranfers"]["p27Failure"] = {};
Omniture.constants["tranfers"]["p27Failure"] = {
    "subSiteSection": "purchase transfer",
    "eventname": "transfer purchase transfer failure"
};

Omniture.constants["tranfers"]["p32noeligible"] = {};
Omniture.constants["tranfers"]["p32noeligible"] = {
    "subSiteSection": "rewards transfer",
    "eventname": "transfer rewards transfer no eligible accounts"
};

Omniture.constants["tranfers"]["p33"] = {};
Omniture.constants["tranfers"]["p33"] = {
    "subSiteSection": "rewards transfer",
    "eventname": "transfer rewards transfer selected"
};

Omniture.constants["tranfers"]["p33Card"] = {};
Omniture.constants["tranfers"]["p33Card"] = {
    "subSiteSection": "rewards transfer",
    "eventname": "transfer rewards transfer from select card"
};

Omniture.constants["tranfers"]["p34"] = {};
Omniture.constants["tranfers"]["p34"] = {
    "subSiteSection": "rewards transfer",
    "eventname": "transfer rewards transfer select to account",
    "transactionType": "rewards transfer"
};

Omniture.constants["tranfers"]["p35"] = {};
Omniture.constants["tranfers"]["p35"] = {
    "subSiteSection": "rewards transfer",
    "eventname": "transfer rewards transfer review"
};

Omniture.constants["tranfers"]["p13Rewards"] = {};
Omniture.constants["tranfers"]["p13Rewards"] = {
    "subSiteSection": "rewards transfer",
    "eventname": "transfer rewards transfer review edit click"
};

Omniture.constants["tranfers"]["p13RewardsCancel"] = {};
Omniture.constants["tranfers"]["p13RewardsCancel"] = {
    "subSiteSection": "rewards transfer",
    "eventname": "transfer rewards transfer review cancel click"
};

Omniture.constants["tranfers"]["p36"] = {};
Omniture.constants["tranfers"]["p36"] = {
    "subSiteSection": "rewards transfer",
    "eventname": "transfer rewards transfer confirm"
};

Omniture.constants["tranfers"]["p37"] = {};
Omniture.constants["tranfers"]["p37"] = {
    "subSiteSection": "rewards transfer",
    "eventname": "transfer rewards transfer failure"
};


Omniture.constants["tranfers"]["p40Cancel"] = {};
Omniture.constants["tranfers"]["p40Cancel"] = {
    "subSiteSection": "internal transfer",
    "eventname": "transfer cancel transfer link"
};

Omniture.constants["tranfers"]["p41"] = {};
Omniture.constants["tranfers"]["p41"] = {
    "subSiteSection": "transfers",
    "eventname": "external account transfer"
};

Omniture.constants["tranfers"]["p42"] = {};
Omniture.constants["tranfers"]["p42"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers overview"
};

Omniture.constants["tranfers"]["p7NoTransactions"] = {};
Omniture.constants["tranfers"]["p7NoTransactions"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers no transactions to display"
};
Omniture.constants["tranfers"]["p44"] = {};
Omniture.constants["tranfers"]["p44"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers purchase transfers"
};

Omniture.constants["tranfers"]["p44Rewards"] = {};
Omniture.constants["tranfers"]["p44Rewards"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers rewards transfers"
};

Omniture.constants["tranfers"]["p45"] = {};
Omniture.constants["tranfers"]["p45"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers brokerage transfers"
};

Omniture.constants["tranfers"]["p7Edit"] = {};
Omniture.constants["tranfers"]["p7Edit"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers edit click"
};

Omniture.constants["tranfers"]["non-eso"] = {};
Omniture.constants["tranfers"]["non-eso"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers non-eso transfers"
};


Omniture.constants["tranfers"]["p7Cancel"] = {};
Omniture.constants["tranfers"]["p7Cancel"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers cancel click"
};

Omniture.constants["tranfers"]["p7PurchaseEdit"] = {};
Omniture.constants["tranfers"]["p7PurchaseEdit"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers purchase transfer edit click"
};

Omniture.constants["tranfers"]["p8PurchaseCancel"] = {};
Omniture.constants["tranfers"]["p8PurchaseCancel"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers purchase transfer cancel click"
};

Omniture.constants["tranfers"]["p9"] = {};
Omniture.constants["tranfers"]["p9"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers brokerage transfers edit click"
};

Omniture.constants["tranfers"]["p9Cancel"] = {};
Omniture.constants["tranfers"]["p9Cancel"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers brokerage transfers cancel click"
};

Omniture.constants["tranfers"]["p7ShowMore"] = {};
Omniture.constants["tranfers"]["p7ShowMore"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers show more click"
};

Omniture.constants["tranfers"]["p10"] = {};
Omniture.constants["tranfers"]["p10"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers delete"
};

Omniture.constants["tranfers"]["p10PurchaseTransfer"] = {};
Omniture.constants["tranfers"]["p10PurchaseTransfer"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers purchase transfer delete",
    "transferType": "purchase transfer",
    "transferStatus": "purchase transfer delete review"
};

Omniture.constants["tranfers"]["p10RewardsTransfer"] = {};
Omniture.constants["tranfers"]["p10RewardsTransfer"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers rewards transfer delete",
    "transferType": "rewards transfer",
    "transferStatus": "rewards transfer delete review"
};


Omniture.constants["tranfers"]["p13PurchaseDelConfirm"] = {};
Omniture.constants["tranfers"]["p13PurchaseDelConfirm"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers purchase transfer delete confirm",
    "transferType": "purchase transfer",
    "transferStatus": "purchase transfer delete confirm"
};


Omniture.constants["tranfers"]["p13PurchaseDelFailure"] = {};
Omniture.constants["tranfers"]["p13PurchaseDelFailure"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers purchase transfer delete failure",
    "transferType": "purchase transfer",
    "transferStatus": "purchase transfer delete failure",
    "errorStatus": "purchase transfer delete failure system error"
};


Omniture.constants["tranfers"]["p13RewardsDelConfirm"] = {};
Omniture.constants["tranfers"]["p13RewardsDelConfirm"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers rewards transfer delete confirm",
    "transferType": "rewards transfer",
    "transferStatus": "rewards transfer delete confirm"
};

Omniture.constants["tranfers"]["p13RewardsDelFailure"] = {};
Omniture.constants["tranfers"]["p13RewardsDelFailure"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers rewards transfer delete failure",
    "transferType": "rewards transfer",
    "transferStatus": "rewards transfer delete failure",
    "errorStatus": "rewards transfer delete failure system error"
};

Omniture.constants["tranfers"]["P10Confirm"] = {};
Omniture.constants["tranfers"]["P10Confirm"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers delete confirm"
};

Omniture.constants["tranfers"]["P10Failure"] = {};
Omniture.constants["tranfers"]["P10Failure"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers delete failure",
    "transferType": "non-eso transfer",
    "transferStatus": "non-eso transfer delete failure",
    "errorStatus": "non-eso transfer delete failure system error"
};

Omniture.constants["tranfers"]["p7SkipClick"] = {};
Omniture.constants["tranfers"]["p7SkipClick"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers skip click"
};

Omniture.constants["tranfers"]["p7SkipTransfer"] = {};
Omniture.constants["tranfers"]["p7SkipTransfer"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers skip transfer",
    "transferType": "skip transfer",
    "transferStatus": "skip transfer review"
};

Omniture.constants["tranfers"]["p11SkipTransferFail"] = {};
Omniture.constants["tranfers"]["p11SkipTransferFail"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers skip transfer failure",
    "transferType": "skip transfer",
    "transferStatus": "skip transfer failure"
};

Omniture.constants["tranfers"]["SkipTransferSystemDown"] = {};
Omniture.constants["tranfers"]["SkipTransferSystemDown"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers skip transfer failure",
    "transferType": "skip transfer",
    "errorStatus": "skip transfer failure system error"
};

Omniture.constants["tranfers"]["p15SkipTransferConfirm"] = {};
Omniture.constants["tranfers"]["p15SkipTransferConfirm"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers skip transfer confirm",
    "transferType": "skip transfer",
    "transferStatus": "skip transfer confirm"
};

Omniture.constants["tranfers"]["p8RewardsCancel"] = {};
Omniture.constants["tranfers"]["p8RewardsCancel"] = {
    "subSiteSection": "future transfer",
    "eventname": "future transfers rewards transfer cancel click"
};


Omniture.constants["tranfers"]["systemDownPurchase"] = {};
Omniture.constants["tranfers"]["systemDownPurchase"] = {
    "eventname": "transfer purchase transfer failure",
    "subSiteSection": "purchase transfer",
    "errorStatus": "purchase transfer failure system error",
    "transferType": "purchase transfer"
};


Omniture.constants["tranfers"]["systemDownRewards"] = {};
Omniture.constants["tranfers"]["systemDownRewards"] = {
    "eventname": "transfer rewards transfer failure",
    "subSiteSection": "rewards transfer",
    "errorStatus": "rewards transfer failure system error",
    "transferType": "rewards transfer"
};

Omniture.constants["tranfers"]["systemDownSingleRecurring"] = {};
Omniture.constants["tranfers"]["systemDownSingleRecurring"] = {
    "eventname": "transfer single transfer failure",
    "subSiteSection": "single transfer",
    "errorStatus": "single transfer failure system error",
    "transferType": "single transfer"
};

Omniture.constants["tranfers"]["systemDownFuturePurchase"] = {};
Omniture.constants["tranfers"]["systemDownFuturePurchase"] = {
    "eventname": "future transfers purchase transfers",
    "subSiteSection": "future transfer",
    "errorStatus": "purchase transfer failure system error",
    "transferType": "purchase transfer"
};

Omniture.constants["tranfers"]["systemDownFutureRewards"] = {};
Omniture.constants["tranfers"]["systemDownFutureRewards"] = {
    "eventname": "future transfers rewards transfers",
    "subSiteSection": "future transfer",
    "errorStatus": "rewards transfer failure system error",
    "transferType": "rewards transfer"
};
//FA Funding transfer constants Start


Omniture.constants["tranfers"]["FaFundingIneligibleAAPAccount"] = {};
Omniture.constants["tranfers"]["FaFundingIneligibleAAPAccount"] = {
    "eventname": "ineligible from account for transfers to aap error message",
    "prop1": "transfers",
    "prop2": "internal transfer",
    "prop13": "ineligible from account for transfers to aap error message",
    
};
//FA Funding transfer constants End
//START & START Smart transfer constants Start

Omniture.constants["tranfers"]["p54"] = {};
Omniture.constants["tranfers"]["p54"] = {
    "eventname": "transfer review"
};

Omniture.constants["tranfers"]["p57"] = {};
Omniture.constants["tranfers"]["p57"] = {
    "eventname": "transfer confirm",
    "subSiteSection": "internal transfer"
};

Omniture.constants["tranfers"]["p16RecurringFailure"] = {};
Omniture.constants["tranfers"]["p16RecurringFailure"] = {
    "eventname": "transfer confirm",
    "subSiteSection": "internal transfer"
};

Omniture.constants["tranfers"]["p29TransferPurchase"] = {};
Omniture.constants["tranfers"]["p29TransferPurchase"] = {
    "eventname": "transfer purchase transfer review"
};

Omniture.constants["tranfers"]["p27TransferPurchaseSuccess"] = {};
Omniture.constants["tranfers"]["p27TransferPurchaseSuccess"] = {
    "eventname": "transfer purchase transfer confirm",
    "subSiteSection": "purchase transfer"
};

Omniture.constants["tranfers"]["p27TransferPurchasefailure"] = {};
Omniture.constants["tranfers"]["p27TransferPurchasefailure"] = {
    "eventname": "transfer purchase transfer failure",
    "subSiteSection": "purchase transfer"
};

Omniture.constants["tranfers"]["p35TransferRewardsReview"] = {};
Omniture.constants["tranfers"]["p35TransferRewardsReview"] = {
    "eventname": "transfers:transfer rewards transfer review",
    "subSiteSection": "rewards transfer"
};

Omniture.constants["tranfers"]["p37TransferRewardsSuccess"] = {};
Omniture.constants["tranfers"]["p37TransferRewardsSuccess"] = {
    "eventname": "transfers:transfer rewards transfer confirm",
    "subSiteSection": "rewards transfer"
};

Omniture.constants["tranfers"]["p37TransferRewardsFailure"] = {};
Omniture.constants["tranfers"]["p37TransferRewardsFailure"] = {
    "eventname": "transfer rewards transfer failure",
    "subSiteSection": "rewards transfer"
};


Omniture.constants["tranfers"]["p10StartTransferDelete"] = {};
Omniture.constants["tranfers"]["p10StartTransferDelete"] = {
    "eventname": "future transfers delete confirm",
    "subSiteSection": "future transfer",
    "transferType": "transfer cancel",
    "transferStatus": "non-eso transfer delete review"
};

Omniture.constants["tranfers"]["p10StartTransferDeleteConfirm"] = {};
Omniture.constants["tranfers"]["p10StartTransferDeleteConfirm"] = {
    "eventname": "future transfers delete confirm",
    "subSiteSection": "future transfer",
    "transferType": "transfer cancel confirm",
    "transferStatus": "non-eso transfer delete confirm"
};

Omniture.constants["tranfers"]["p10StartTransferPurchaseDelete"] = {};
Omniture.constants["tranfers"]["p10StartTransferPurchaseDelete"] = {
    "eventname": "future transfers purchase transfer delete",
    "subSiteSection": "future transfer",
    "transferType": "purchase transfer",
    "transferStatus": "purchase transfer delete review"
};

Omniture.constants["tranfers"]["p13PurchaseDelConfirmSuccess"] = {};
Omniture.constants["tranfers"]["p13PurchaseDelConfirmSuccess"] = {
    "eventname": "future transfers purchase transfer delete confirm",
    "subSiteSection": "future transfer",
    "transferType": "purchase transfer",
    "transferStatus": "purchase transfer delete confirm"
};

Omniture.constants["tranfers"]["p10TransferRewardsDelete"] = {};
Omniture.constants["tranfers"]["p10TransferRewardsDelete"] = {
    "eventname": "future transfers rewards transfer delete",
    "subSiteSection": "future transfer",
    "transferType": "rewards  transfer",
    "transferStatus": "rewards transfer delete review"
};

Omniture.constants["tranfers"]["p10TransferRewardsDeleteConfirm"] = {};
Omniture.constants["tranfers"]["p10TransferRewardsDeleteConfirm"] = {
    "eventname": "future transfers rewards transfer delete confirm",
    "subSiteSection": "future transfer",
    "transferType": "rewards  transfer",
    "transferStatus": "rewards transfer delete confirm"
};

Omniture.constants["tranfers"]["p13TransferRewardsDeleteFailure"] = {};
Omniture.constants["tranfers"]["p13TransferRewardsDeleteFailure"] = {
    "eventname": "future transfers rewards transfer delete failure",
    "subSiteSection": "future transfer",
    "transferType": "rewards  transfer",
    "transferStatus": "rewards transfer delete failure",
    "errorStatus": "rewards transfer delete failure system error"
};

Omniture.constants["tranfers"]["p13PurchaseDelConfirmFailure"] = {};
Omniture.constants["tranfers"]["p13PurchaseDelConfirmFailure"] = {
    "eventname": "future transfers purchase transfer delete failure",
    "subSiteSection": "future transfer",
    "transferType": "purchase transfer",
    "transferStatus": "purchase transfer delete failure",
    "errorStatus": "purchase transfer delete failure system error"
};

Omniture.constants["tranfers"]["p10StartTransferDeleteFailure"] = {};
Omniture.constants["tranfers"]["p10StartTransferDeleteFailure"] = {
    "eventname": "transfers:future transfers delete failure",
    "subSiteSection": "future transfer",
    "transferType": "non-eso transfer",
    "transferStatus": "non-eso transfer delete failure",
    "errorStatus": "non-eso transfer delete failure system error"
};
//Added for USBI - USBI Transfer Start
Omniture.constants["tranfers"]["raisecash"] = {};
Omniture.constants["tranfers"]["raisecash"] = {
    "subSiteSection": "internal transfer",
    "eventname": "brokerage raise cash scenario",
    "currentPage": "brokerage raise cash scenario",
};
//Added for USBI - USBI Transfer End
Omniture.constants["tranfers"]["iraDistributionsAgreementPage"] = {};
Omniture.constants["tranfers"]["iraDistributionsAgreementPage"] = {
    "siteSection": "transfers",
    "subSiteSection": "internal transfer",
    "currentPage": "ira distribution agreement overlay",
};

//Apply flow transfer constants ---- Start
Omniture.constants["tranfers"]["SelfDirectedFlow"] = {};
Omniture.constants["tranfers"]["SelfDirectedFlow"] = {
    "currentPage": "transfers overview",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferStatus": "self directed apply transfer start",
    "transferPath": "self directed apply transfer overview",
    "events": "event672",

};

Omniture.constants["tranfers"]["sdFromAccountChanged"] = {};
Omniture.constants["tranfers"]["sdFromAccountChanged"] = {
    "currentPage": "transfer selected from account",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferPath": "self directed apply transfer select from account",
};

Omniture.constants["tranfers"]["sdToAccountChanged"] = {};
Omniture.constants["tranfers"]["sdToAccountChanged"] = {
    "currentPage": "transfer to account",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferPath": "self directed apply transfer to account",
};

Omniture.constants["tranfers"]["AutomatedPortfolioFlow"] = {};

Omniture.constants["tranfers"]["AutomatedPortfolioFlow"] = {
    "currentPage": "transfers overview",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferStatus": "automated portfolio apply transfer start",
    "transferPath": "automated portfolio apply transfer overview",
    "events": "event674",

};

Omniture.constants["tranfers"]["APFromAccountChanged"] = {};
Omniture.constants["tranfers"]["APFromAccountChanged"] = {
    "currentPage": "transfer selected from account",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferPath": "automated portfolio apply transfer select from account",
};

Omniture.constants["tranfers"]["APToAccountChanged"] = {};
Omniture.constants["tranfers"]["APToAccountChanged"] = {
    "currentPage": "transfer to account",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferPath": "automated portfolio apply transfer to account",

};

Omniture.constants["applyTranfersSD"] = {};
Omniture.constants["applyTranfersSD"]["pageMiddleSection"] = "apply mm self-directed";
Omniture.constants["tranfers"]["cancelClickedSD"] = {};
Omniture.constants["tranfers"]["cancelClickedSD"] = {
    "currentPage": "transfer overview cancel button",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferPath": "self directed apply transfer overview cancel button",
};

Omniture.constants["applyTranfersAP"] = {};
Omniture.constants["applyTranfersAP"]["pageMiddleSection"] = "apply mm automated portfolio";

Omniture.constants["tranfers"]["cancelClickedAP"] = {};
Omniture.constants["tranfers"]["cancelClickedAP"] = {
    "currentPage": "transfer overview cancel button",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferPath": "automated portfolio apply transfer overview cancel button",
};

Omniture.constants["tranfers"]["RnSLoadSD"] = {};
Omniture.constants["tranfers"]["RnSLoadSD"] = {
    "currentPage": "transfer review",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferStatus": "self directed apply transfer review",
    "transferPath": "self directed apply transfer review",
};

Omniture.constants["tranfers"]["RnSLoadAP"] = {};
Omniture.constants["tranfers"]["RnSLoadAP"] = {
    "currentPage": "transfer review",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferStatus": "automated portfolio apply transfer review",
    "transferPath": "automated portfolio apply transfer review",
};

Omniture.constants["tranfers"]["reviewAndSubmitcancelClickedSD"] = {};
Omniture.constants["tranfers"]["reviewAndSubmitcancelClickedSD"] = {
    "currentPage": "transfer review cancel button",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferPath": "self directed apply transfer review cancel button",
};

Omniture.constants["tranfers"]["reviewAndSubmitcancelClickedAP"] = {};
Omniture.constants["tranfers"]["reviewAndSubmitcancelClickedAP"] = {
    "currentPage": "transfer review cancel button",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferPath": "automated portfolio apply transfer review  cancel button",
};

Omniture.constants["tranfers"]["confirmationLoadSD"] = {};
Omniture.constants["tranfers"]["confirmationLoadSD"] = {
    "currentPage": "transfer confirm",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferStatus": "self directed apply transfer confirm",
    "transferPath": "self directed apply transfer confirm",
    "events": "event673",
};

Omniture.constants["tranfers"]["confirmationLoadAP"] = {};
Omniture.constants["tranfers"]["confirmationLoadAP"] = {
    "currentPage": "transfer confirm",
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "transferStatus": "automated portfolio apply transfer confirm",
    "transferPath": "automated portfolio apply transfer confirm",
    "events": "event675",
};

Omniture.constants["applyTranfersSD"]["confirmationNextClicked"] = {};
Omniture.constants["applyTranfersSD"]["confirmationNextClicked"] = {
    "prop53": "transfer confirmation next click",
};

Omniture.constants["applyTranfersAP"]["confirmationNextClicked"] = {};
Omniture.constants["applyTranfersAP"]["confirmationNextClicked"] = {
    "prop53": "transfer confirmation next click",
};
Omniture.constants["tranfers"]["AmountChangedSD"]= {};
Omniture.constants["tranfers"]["AmountChangedSD"]= {
    "siteSection": "transfers",
    "subSiteSection": "apply money transfer",
    "currentPage": "transfer enter amount",
    "transferPath": "self directed apply transfer enter amount"
};
Omniture.constants["tranfers"]["IRAContributionLimitError"] = {};
Omniture.constants["tranfers"]["IRAContributionLimitError"] = {
    "currentPage": "transfer setup ira contribution limit error",
    "siteSection": "transfers",
    "subSiteSection": "internal transfer",
    "errorStatus": "",
};
Omniture.constants["tranfers"]["Ira705ContributionLimit"] = {};
Omniture.constants["tranfers"]["Ira705ContributionLimit"] = {
    "currentPage": "transfer setup ira contribution age rule error",
    "siteSection": "transfers",
    "subSiteSection": "internal transfer",
    "errorStatus": ""
};
//Apply flow transfer constants ---- Start
//IRA Contributions and distributions transfer constants ---- Start
Omniture.constants["tranfers"]["IRAtaxyearChanged"] = {};
Omniture.constants["tranfers"]["IRAtaxyearChanged"] = {
    "eventname": "tax year selected"
};
Omniture.constants["tranfers"]["IRAContributionDisclosureOverlayClicked"] = {};
Omniture.constants["tranfers"]["IRAContributionDisclosureOverlayClicked"] = {
    "eventname": "ira contributions limits & restrictions overlay"
};
Omniture.constants["tranfers"]["IRAmanageMyTransfersEditClicked"] = {};
Omniture.constants["tranfers"]["IRAmanageMyTransfersEditClicked"] = {
    "eventname": "future transfers ira transfers edit tax year selected"
};
Omniture.constants["tranfers"]["IRAFrequencyTypeChanged"] = {
    "eventname": "ira contribution frequency type"

};
Omniture.constants["tranfers"]["FromAccountSelected"] = {};
Omniture.constants["tranfers"]["FromAccountSelected"] = {
    "eventname": "transfer selected from account",
    "SubProductCode": ""//Dynamically generated
};
Omniture.constants["tranfers"]["ToAccountSelected"] = {};
Omniture.constants["tranfers"]["ToAccountSelected"] = {
    "eventname": "transfer selected to account",
    "ToSubProductCode": ""//Dynamically generated
};


Omniture.constants["tranfers"]["NoTaxWithheld"] = {};
Omniture.constants["tranfers"]["NoTaxWithheld"] = {
    "eventname": "distribution review submit no edit link click"
};
Omniture.constants["tranfers"]["NoTaxWithheldCancel"] = {};
Omniture.constants["tranfers"]["NoTaxWithheldCancel"] = {
    "eventname": "distribution review submit no cancel link click"
};
Omniture.constants["tranfers"]["YesTaxWithheld"] = {};
Omniture.constants["tranfers"]["YesTaxWithheld"] = {
    "eventname": "distribution review submit Yes edit link click"
};
Omniture.constants["tranfers"]["YesTaxWithheldCancel"] = {};
Omniture.constants["tranfers"]["YesTaxWithheldCancel"] = {
    "eventname": "distribution review submit Yes cancel link click"
};
Omniture.constants["tranfers"]["StateTaxOverlay"] = {};
Omniture.constants["tranfers"]["StateTaxOverlay"] = {
    "eventname": "ira distribution state income tax withholding overlay"
};
Omniture.constants["tranfers"]["TaxOverlayError"] = {};
Omniture.constants["tranfers"]["TaxOverlayError"] = {
    "eventname": "distribution minimum requirement overlay error"
};
Omniture.constants["tranfers"]["ManageTransferEdit"] = {};
Omniture.constants["tranfers"]["ManageTransferEdit"] = {
    "eventname": "distribution manage my transfer edit link click"
};

Omniture.constants["tranfers"]["ManageTransferCancel"] = {};
Omniture.constants["tranfers"]["ManageTransferCancel"] = {
    "eventname": "distribution manage my transfer cancel link click"
};

Omniture.constants["tranfers"]["confirmationLoadIRA"] = {};
Omniture.constants["tranfers"]["confirmationLoadIRA"] = {
    "currentPage": "transfer confirm",
    "siteSection": "transfers",
    "subSiteSection": "internal transfer",
};
Omniture.constants["tranfers"]["WithholdFederalTaxOptionChanged"]= { };
Omniture.constants["tranfers"]["WithholdFederalTaxOptionChanged"]= {
    "prop53": "ira distribution tax withhold federal tax option",    
    "selectedOption": ""
};

Omniture.constants["tranfers"]["WithholdStateTaxOptionChanged"] = {};
Omniture.constants["tranfers"]["WithholdStateTaxOptionChanged"] = {
    "prop53": "ira distribution tax withhold state tax option",    
    "selectedOption": ""
};
Omniture.constants["tranfers"]["SelectedWithholdTaxOption"] = {};
Omniture.constants["tranfers"]["SelectedWithholdTaxOption"] = {
    "prop53": "ira distribution tax withhold ",
    "isFedOrState": ""
};
Omniture.constants["tranfers"]["SelectedWithholdFedTaxOption"] = {};
Omniture.constants["tranfers"]["SelectedWithholdFedTaxOption"] = {
    "eventname": "ira distribution withhold federal tax option",
    "siteSection": "transfers",
    "subSiteSection": "internal transfer"
};
Omniture.constants["tranfers"]["StateTaxMandatoryorOptoutOverlay"] = {};
Omniture.constants["tranfers"]["StateTaxMandatoryorOptoutOverlay"] = {
    "eventname": "ira distribution state income tax mandatory or opt out withholding overlay",
    "siteSection": "transfers",
    "subSiteSection": "internal transfer"
};
Omniture.constants["tranfers"]["IRADistributionAmontError"] = {};
Omniture.constants["tranfers"]["IRADistributionAmontError"] = {
    "currentPage": "ira distribution amount entered does not meet minimum requirements",
    "siteSection": "transfers",
    "subSiteSection": "internal transfer",
    "errorStatus": "",
};
Omniture.constants["tranfers"]["DistributionAgreementError"] = {};
Omniture.constants["tranfers"]["DistributionAgreementError"] = {
    "currentPage": "ira distribution agreement overlay error",
    "siteSection": "transfers",
    "subSiteSection": "internal transfer",
    "error": "ira distribution agreement overlay error"

};


//IRA Contributions and distributions transfer constants ---- End


// End Transafer Constants -------------------------------------------------------



//Start Zelle Constants -----------------------------------------------------------

Omniture.constants["zelle"] = {};
Omniture.constants["zelle"]["siteSection"] = "send money";
Omniture.constants["zelle"]["subSiteSection"] = "send money zelle";
Omniture.constants["zelle"]["transactionType"] = "send money zelle";
Omniture.constants["zelle"]["pageMiddleSection"] = "send money";



//added for EWS Action Widget

Omniture.constants["zelleWidgets"] = {};
Omniture.constants["zelleWidgets"]["siteSection"] = "send money";
Omniture.constants["zelleWidgets"]["subSiteSection"] = "send money";
Omniture.constants["zelleWidgets"]["pageMiddleSection"] = "send money";

Omniture.constants["zelleWidgets"]["p3sendmoneyAction"] = {}; //Snd Money to account
Omniture.constants["zelleWidgets"]["p3sendmoneyAction"] = {
    "eventname": "send money actions widget send money alternative link"

};

Omniture.constants["zelleWidgets"]["p3sendmoneyzelleAction"] = {}; // Send Money With Zelle
Omniture.constants["zelleWidgets"]["p3sendmoneyzelleAction"] = {
    "eventname": "send money actions widget send money zelle link"

};

Omniture.constants["zelleWidgets"]["p3managerecipientAction"] = {}; //Manage recipients
Omniture.constants["zelleWidgets"]["p3managerecipientAction"] = {
    "eventname": "send money actions widget manage recipients link"

};

Omniture.constants["zelleWidgets"]["p3registertoreceiveAction"] = {}; //Register to receive
Omniture.constants["zelleWidgets"]["p3registertoreceiveAction"] = {
    "eventname": "send money actions widget register to receive link"
};
Omniture.constants["zelleWidgets"]["p3updateregisterredirectAction"] = {}; // Update register
Omniture.constants["zelleWidgets"]["p3updateregisterredirectAction"] = {
    "eventname": "send money zelle actions widget update register to receive link"
};

Omniture.constants["zelleWidgets"]["p3requestmoneyAction"] = {}; //request money redirect
Omniture.constants["zelleWidgets"]["p3requestmoneyAction"] = {
    "eventname": "send money actions widget request money link"
};

Omniture.constants["zelleWidgets"]["p3timelineAction"] = {}; // Time line redirect
Omniture.constants["zelleWidgets"]["p3timelineAction"] = {
    "eventname": "send money actions widget transactions timeline link"
};

//End Widget

//Select recipient page
Omniture.constants["zelle"]["p10"] = {}; // loading
Omniture.constants["zelle"]["p10"] = {
    "eventname": "zelle select recipient",
    "transactionStatus": "send money zelle start",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p11"] = {}; // selecting a recipient
Omniture.constants["zelle"]["p11"] = {
    "eventname": "zelle select recipient existing",
    "transactionStatus": "send money zelle select recipient",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p12"] = {}; //System down
Omniture.constants["zelle"]["p12"] = {
    "eventname": "zelle select recipient error",
    "transactionType": "send money zelle"
};

//Omniture.constants["zelle"]["p13"] = {}; // receiving recipients
//Omniture.constants["zelle"]["p13"] = {
//    "eventname": "zelle select recipient error",
//    "transactionError": "send money zelle select recipient error, M003: Our system is temporarily unable to display this information. Please try again.",
//    "transactionType": "send money zelle"
//};

Omniture.constants["zelle"]["p14"] = {}; // search recipients not available 
Omniture.constants["zelle"]["p14"] = {
    "eventname": "select recipient list no search results",
};

Omniture.constants["zelle"]["p15"] = {}; // empty recipients 
Omniture.constants["zelle"]["p15"] = {
    "eventname": "zelle recipient list empty",
    "transactionType": "send money zelle"
};

//Select Token page
Omniture.constants["zelle"]["p16"] = {}; //page load
Omniture.constants["zelle"]["p16"] = {
    "eventname": "zelle select delivery method",
    "transactionType": "send money zelle"
};

// mobile/email token selection
Omniture.constants["zelle"]["p17Mobile"] = {
    "transactionType": "send money zelle",
    "eventname": "zelle delivery method selected"
};

Omniture.constants["zelle"]["p17Email"] = {
    "transactionType": "send money zelle",
    "eventname": "zelle delivery method selected"
};

Omniture.constants["zelle"]["p18"] = {}; // Cancel click
Omniture.constants["zelle"]["p18"] = {
    "eventname": "zelle select delivery token cancel",
    "transactionType": "send money zelle"
};

// Amount Page
//Select Token page
Omniture.constants["zelle"]["p19"] = {}; //page load
Omniture.constants["zelle"]["p19"] = {
    "eventname": "zelle enter amount",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p20"] = {}; //click on continue
Omniture.constants["zelle"]["p20"] = {
    "eventname": "zelle amount entered",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p21"] = {};  //Transfer Limit page
Omniture.constants["zelle"]["p21"] = {
    "eventname": "zelle transfer limits",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p22"] = {}; //RegD page
Omniture.constants["zelle"]["p22"] = {
    "eventname": "zelle legal notice overlay",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p23"] = {}; // Error messages
Omniture.constants["zelle"]["p23"] = {
    "eventname": "zelle enter amount error",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p24"] = {}; // Cancel click
Omniture.constants["zelle"]["p24"] = {
    "eventname": "zelle amount cancel",
    "transactionType": "send money zelle"
};

// Review Screen start
Omniture.constants["zelle"]["p25"] = {}; //page load
Omniture.constants["zelle"]["p25"] = {
    "eventname": "zelle review",
    "transactionStatus": "send money zelle review",
    "transactionType": "send money zelle",
    "transactionFrequency": "" // To clear the value from previous pages
};

Omniture.constants["zelle"]["p26"] = {}; //Edit frequency load
Omniture.constants["zelle"]["p26"] = {
    "eventname": "zelle edit frequency",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p27"] = {}; //Select frequncy option
Omniture.constants["zelle"]["p27"] = {
    "eventname": "zelle frequency one time selection",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p27Recurring"] = {}; //Select frequncy option Other than One Time
Omniture.constants["zelle"]["p27Recurring"] = {
    "eventname": "zelle edit frequency recurring selection",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p29"] = { //Select Date option of One Time
    "eventname": "zelle frequency date selector",
    "transactionType": "send money zelle",
    //"transactionFrequency": "send money zelle review recurring send"
};

Omniture.constants["zelle"]["p29Recurring"] = { //Select Date option
    "eventname": "zelle frequency recurring start date selector",
    "transactionType": "send money zelle",
    //"transactionFrequency": "send money zelle review recurring send"
};

Omniture.constants["zelle"]["p29showStopPayment"] = { //Stop Payment Options Load
    "eventname": "zelle frequency recurring end payment selector",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p29RecurringLink"] = { // How do recurring payment  works link
    "eventname": "zelle how recurring payments work",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p30"] = {}; //When I cancel this payment 
Omniture.constants["zelle"]["p30"] = {
    "eventname": "zelle frequency recurring end payments selection",
    "transactionFrequency": "send money zelle frequency recurring end payments when I cancel payment",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p31"] = {}; //After this many payments
Omniture.constants["zelle"]["p31"] = {
    "eventname": "zelle frequency recurring end payments selection",
    "transactionFrequency": "send money zelle frequency recurring end payments after this many payments",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p32"] = {}; //When I reach this amount 
Omniture.constants["zelle"]["p32"] = {
    "eventname": "zelle frequency recurring end payments selection",
    "transactionFrequenc": "send money zelle frequency recurring end payments when I reach this amount",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p32systemDown"] = {}; //System down scenarios
Omniture.constants["zelle"]["p32systemDown"] = {
    "eventname": "zelle review error",
    "transactionStatus": "send money zelle review",
    "transactionType": "send money zelle",
    "transactionFrequency": "" // To clear the value from previous pages
};

// Confirmation page start
Omniture.constants["zelle"]["p33"] = {}; //confirm success
Omniture.constants["zelle"]["p33"] = {
    "eventname": "zelle confirm success",
    "transactionStatus": "send money zelle confirm",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p33Failed"] = {}; //confirm failed
Omniture.constants["zelle"]["p33Failed"] = {
    "eventname": "zelle confirm error",
    "transactionStatus": "send money zelle confirm",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p34"] = {}; // Error on confirmation
Omniture.constants["zelle"]["p34"] = {
    "eventname": "zelle send money zelle confirm failure error",
    "transactionError": "zelle error on confirmation",
    "transactionType": "send money zelle",
    "transactionFrequency": "" // To clear the value from previous pages
};

//Omniture.constants["zelle"]["p35"] = {}; // Click on Done button register flow // no tech spec
//Omniture.constants["zelle"]["p35"] = {
//    "eventname": "zelle Confirmation",
//    "transactionStatus": "send money zelle regisrer user "
//};

Omniture.constants["zelle"]["p35NonRegisteredPopup"] = {}; // Click on Done button unregister flow //no tech spec
Omniture.constants["zelle"]["p35NonRegisteredPopup"] = {
    "eventname": "zelle not yet registered",
    "transactionType": "send money zelle",
};


// OTP page start
Omniture.constants["zelle"]["p36"] = {}; //page load
Omniture.constants["zelle"]["p36"] = {
    "eventname": "zelle verify otp",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p37"] = {}; // Correct OTP // not given in spec
Omniture.constants["zelle"]["p37"] = {
    "eventname": "zelle verify otp success",
    "transactionStatus": "send money zelle correct otp",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p38"] = {}; // Wrong password
Omniture.constants["zelle"]["p38"] = {
    "eventname": "zelle verify otp error",
    "transactionError": "zelle error on OTP",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p39"] = {}; // Cancel click // not given in spec
Omniture.constants["zelle"]["p39"] = {
    "eventname": "zelle cancel click on OTP",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p40"] = {}; // exit click // not given in spec
Omniture.constants["zelle"]["p40"] = {
    "eventname": "zelle exit click on OTP",
    "transactionType": "send money zelle"
};

// Add new recipients

Omniture.constants["zelle"]["p44"] = {}; //page load
Omniture.constants["zelle"]["p44"] = {
    "eventname": "zelle add recipient new",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p45"] = {}; //Error on save
Omniture.constants["zelle"]["p45"] = {
    "eventname": "zelle add recipient new error",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p45Edit"] = {}; //Error on edit save
Omniture.constants["zelle"]["p45Edit"] = {
    "eventname": "zelle edit recipient new error",
    "transactionType": "send money zelle"
};

// Edit recipients

Omniture.constants["zelle"]["p46"] = {}; //page load
Omniture.constants["zelle"]["p46"] = {
    "eventname": "zelle edit recipient details",
    "transactionType": "send money zelle"
};

Omniture.constants["zelle"]["p47"] = {}; //Error on save
Omniture.constants["zelle"]["p47"] = {
    "eventname": "zelle edit recipient details error",
    "transactionType": "send money zelle"
};

//Welcome Page lands

Omniture.constants["zelle"]["p48"] = {}; //page load
Omniture.constants["zelle"]["p48"] = {
    "eventname": "zelle meet zelle",
    "transactionType": "send money zelle"
};


//End Zelle Constants -------------------------------------------------------------
//Begin Zelle Manage Recipient
Omniture.constants["zellemr"] = {};
Omniture.constants["zellemr"]["siteSection"] = "send money";
Omniture.constants["zellemr"]["subSiteSection"] = "manage recipient";
Omniture.constants["zellemr"]["pageMiddleSection"] = "send money";

Omniture.constants["zellemr"]["p20"] = {};
Omniture.constants["zellemr"]["p20"] = {
    "eventname": "manage recipients add recipient confirm success"
    };

Omniture.constants["zellemr"]["p21"] = {};
Omniture.constants["zellemr"]["p21"] = {
    "eventname": "manage recipients add recipient details error"
};

Omniture.constants["zellemr"]["p22"] = {};
Omniture.constants["zellemr"]["p22"] = {
    "eventname": "manage recipients delete recipient confirm success"
};

Omniture.constants["zellemr"]["p11"] = {}; // selecting a recipient
Omniture.constants["zellemr"]["p11"] = {
    "eventname": "manage recipient existing",
};

Omniture.constants["zellemr"]["p23"] = {};
Omniture.constants["zellemr"]["p23"] = {
    "eventname": "manage recipients delete recipient failure"
};
Omniture.constants["zellemr"]["p24"] = {};
Omniture.constants["zellemr"]["p24"] = {
    "eventname": "manage recipients edit recipient details error"
};
Omniture.constants["zellemr"]["p25"] = {};
Omniture.constants["zellemr"]["p25"] = {
    "eventname": "manage recipients edit recipient details"
};
Omniture.constants["zellemr"]["p26"] = {};
Omniture.constants["zellemr"]["p26"] = {
    "eventname": "manage recipients edit recipient details cancel",
    "prop53": "manage recipients edit recipient details cancel link"
};
Omniture.constants["zellemr"]["p27"] = {};
Omniture.constants["zellemr"]["p27"] = {
    "eventname": "manage recipients delete recipient review"
};
Omniture.constants["zellemr"]["p28"] = {};
Omniture.constants["zellemr"]["p28"] = {
    "eventname": "manage recipients delete recipient review cancel"
};
Omniture.constants["zellemr"]["p29"] = {};
Omniture.constants["zellemr"]["p29"] = {
    "eventname": "manage recipients add recipient details cancel link",
    "prop53": "manage recipients add recipient details cancel link"
};
Omniture.constants["zellemr"]["p49"] = {};
Omniture.constants["zellemr"]["p49"] = {
    "eventname": "manage recipients recipient details"
};
Omniture.constants["zellemr"]["p45"] = {};
Omniture.constants["zellemr"]["p45"] = {
    "eventname": "manage recipients add recipient details",
    "transactionType": "send money zelle"
};


Omniture.constants["zellemr"]["p50"] = {};
Omniture.constants["zellemr"]["p50"] = {
    "eventname": "manage recipients initiate pay",
    "transactionStatus": "send money zelle managed recipients start"
};

Omniture.constants["zellemr"]["p51"] = {};
Omniture.constants["zellemr"]["p51"] = {
    "eventname": "manage recipients recipient details error"
};

Omniture.constants["zellemr"]["p52"] = {};
Omniture.constants["zellemr"]["p52"] = {
    "eventname": "manage recipients add recipient details"
};

Omniture.constants["zellemr"]["p53"] = {};
Omniture.constants["zellemr"]["p53"] = {
    "eventname": "manage recipients add recipient details error"
};

Omniture.constants["zellemr"]["p54"] = {};
Omniture.constants["zellemr"]["p54"] = {
    "eventname": "manage recipients edit success"
};

Omniture.constants["zellemr"]["p55"] = {};
Omniture.constants["zellemr"]["p55"] = {
    "eventname": "manage recipients list"
};

Omniture.constants["zellemr"]["p56"] = {};
Omniture.constants["zellemr"]["p56"] = {
    "eventname": "manage recipients list error"
};

Omniture.constants["zellemr"]["p57"] = {};
Omniture.constants["zellemr"]["p57"] = {
    "eventname": "manage recipients list no existing recipients"
};

Omniture.constants["zellemr"]["p58"] = {};
Omniture.constants["zellemr"]["p58"] = {
    "eventname": "manage recipients list no search results"
};

Omniture.constants["zellemr"]["p59"] = {};
Omniture.constants["zellemr"]["p59"] = {
    "eventname": "manage recipients list error",
    "transactionError": "send money manage recipients list error system error"
};

Omniture.constants["zellemr"]["p60"] = {};
Omniture.constants["zellemr"]["p60"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error duplicate nickname"
};

Omniture.constants["zellemr"]["p61"] = {};
Omniture.constants["zellemr"]["p61"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error duplicate email address/phone"
};

Omniture.constants["zellemr"]["p62"] = {};
Omniture.constants["zellemr"]["p62"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error phone or email in opt out list"
};
Omniture.constants["zellemr"]["p63"] = {};
Omniture.constants["zellemr"]["p63"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error duplicate token"
};
Omniture.constants["zellemr"]["p64"] = {};
Omniture.constants["zellemr"]["p64"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error invalid routing number format"
};
Omniture.constants["zellemr"]["p65"] = {};
Omniture.constants["zellemr"]["p65"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error missing address"
};
Omniture.constants["zellemr"]["p66"] = {};
Omniture.constants["zellemr"]["p66"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error invalid address format"
};
Omniture.constants["zellemr"]["p67"] = {};
Omniture.constants["zellemr"]["p67"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error missing city"
};
Omniture.constants["zellemr"]["p68"] = {};
Omniture.constants["zellemr"]["p68"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error invalid city format"
};
Omniture.constants["zellemr"]["p69"] = {};
Omniture.constants["zellemr"]["p69"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error missing state"
};
Omniture.constants["zellemr"]["p70"] = {};
Omniture.constants["zellemr"]["p70"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error invalid state format"
};
Omniture.constants["zellemr"]["p71"] = {};
Omniture.constants["zellemr"]["p71"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error missing zip"
};
Omniture.constants["zellemr"]["p72"] = {};
Omniture.constants["zellemr"]["p72"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error invalid zip format"
};
Omniture.constants["zellemr"]["p73"] = {};
Omniture.constants["zellemr"]["p73"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient details error multiple edit/delete fails"
};
Omniture.constants["zellemr"]["p74"] = {};
Omniture.constants["zellemr"]["p74"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient error delete token due to pending transaction"
};
Omniture.constants["zellemr"]["p75"] = {};
Omniture.constants["zellemr"]["p75"] = {
    "eventname": "manage recipients edit recipient details error",
    "transactionError": "send money manage recipients edit recipient error delete recipient due to pending transaction"
};

Omniture.constants["zellemr"]["p76"] = {};
Omniture.constants["zellemr"]["p76"] = {
    "eventname": "manage recipients add recipient details error",
    "transactionError": "send money manage recipients add recipient details error missing zip"
};
Omniture.constants["zellemr"]["p77"] = {};
Omniture.constants["zellemr"]["p77"] = {
    "eventname": "manage recipients add recipient details error",
    "transactionError": "send money manage recipients add recipient details error invalid zip format"
};
Omniture.constants["zellemr"]["p78"] = {};
Omniture.constants["zellemr"]["p78"] = {
    "eventname": "manage recipients add recipient details error",
    "transactionError": "send money manage recipients add recipient details error missing state"
};
Omniture.constants["zellemr"]["p78missingtoken"] = {};
Omniture.constants["zellemr"]["p78missingtoken"] = {
    "eventname": "manage recipients add recipient details error",
    "transactionError": "send money manage recipients add recipient details error missing token"
};
Omniture.constants["zellemr"]["p79"] = {};
Omniture.constants["zellemr"]["p79"] = {
    "eventname": "manage recipients add recipient details error",
    "transactionError": "send money manage recipients add recipient details error invalid state format"
};
Omniture.constants["zellemr"]["p80"] = {};
Omniture.constants["zellemr"]["p80"] = {
    "eventname": "manage recipients add recipient details error",
    "transactionError": "send money manage recipients add recipient details error missing city"
};
Omniture.constants["zellemr"]["p81"] = {};
Omniture.constants["zellemr"]["p81"] = {
    "eventname": "manage recipients add recipient details error",
    "transactionError": "send money manage recipients add recipient details error invalid city format"
};
Omniture.constants["zellemr"]["p82"] = {};
Omniture.constants["zellemr"]["p82"] = {
    "eventname": "manage recipients add recipient details error",
    "transactionError": "send money manage recipients add recipient details error missing address"
};
Omniture.constants["zellemr"]["p83"] = {};
Omniture.constants["zellemr"]["p83"] = {
    "eventname": "manage recipients add recipient details error",
    "transactionError": "send money manage recipients add recipient details error invalid address format"
};
Omniture.constants["zellemr"]["p84"] = {};
Omniture.constants["zellemr"]["p84"] = {
    "eventname": "manage recipients add recipient details error",
    "transactionError": "send money manage recipients add recipient details error invalid routing number format"
};
Omniture.constants["zellemr"]["p85"] = {};
Omniture.constants["zellemr"]["p85"] = {
    "eventname": "manage recipients add recipient details error",
    "transactionError": "send money manage recipients add recipient details error invalid account number"
};
Omniture.constants["zellemr"]["p86"] = {};
Omniture.constants["zellemr"]["p86"] = {
    "eventname": "manage recipients add recipient details error",
    "transactionError": "send money manage recipients add recipient details error duplicate nickname"
};
Omniture.constants["zellemr"]["p87"] = {};
Omniture.constants["zellemr"]["p87"] = {
    "eventname": "manage recipients add recipient details error",
    "transactionError": "send money manage recipients add recipient details error duplicate email address/phone"
};

//Omniture.constants["zellemr"]["p88"] = {};
//Omniture.constants["zellemr"]["p88"] = {
//    "eventname": "manage recipients edit recipient details error",
//    "transactionError": "send money manage recipients edit recipient details error missing name"
//};

//Omniture.constants["zellemr"]["p89"] = {};
//Omniture.constants["zellemr"]["p89"] = {
//    "eventname": "manage recipients edit recipient details error",
//    "transactionError": "send money manage recipients edit recipient details error invalid email format"
//};

//Omniture.constants["zellemr"]["p90"] = {};
//Omniture.constants["zellemr"]["p90"] = {
//    "eventname": "manage recipients edit recipient details error",
//    "transactionError": "send money manage recipients edit recipient details error invalid phone format"
//};


//End Zelle Manage Recipient Constants    manage recipients edit recipient details cancel

//-------------*Begin Zelle Register Constants*---------------------------------

//page level values for New User and Update User Zelle Register

Omniture.constants["ZelleRegister"] = {};
Omniture.constants["ZelleRegister"]["siteSection"] = "send money";
Omniture.constants["ZelleRegister"]["pageMiddleSection"] = "send money";
Omniture.constants["ZelleRegister"]["subSiteSection"] = "user registration";


//Event level values for Omni Register - New USer Registration eligible account

Omniture.constants["ZelleRegister"]["p5Updatereguser"] = {};
Omniture.constants["ZelleRegister"]["p5Updatereguser"] = {
    "eventname": "user reg display details",
    "registrationType": "update user registration"
};

Omniture.constants["ZelleRegister"]["p5newreguser"] = {};
Omniture.constants["ZelleRegister"]["p5newreguser"] = {
    "eventname": "user reg select eligible acct"
};

Omniture.constants["ZelleRegister"]["AcctErr"] = {};
Omniture.constants["ZelleRegister"]["AcctErr"] = {
    "eventname": "user reg select eligible account cannot retrieve acct/token error",
    "transactionError": "send money user reg select eligible acct cannot retrieve acct/token error"
};

Omniture.constants["ZelleRegister"]["noeligibleaccount"] = {};
Omniture.constants["ZelleRegister"]["noeligibleaccount"] = {
    "eventname": "user reg customer login no eligible accounts"
};

Omniture.constants["ZelleRegister"]["noenrolledtoken"] = {};
Omniture.constants["ZelleRegister"]["noenrolledtoken"] = {
    "eventname": "user reg request money and no enrolled tokens"
};

//Event level values for Omni Register - USer Registration Select/Update Token account
Omniture.constants["ZelleRegister"]["p6Regusertoken"] = {};
Omniture.constants["ZelleRegister"]["p6Regusertoken"] = {
    "eventname": "user reg select token"
};

Omniture.constants["ZelleRegister"]["p6Regusertokenemail"] = {};
Omniture.constants["ZelleRegister"]["p6Regusertokenemail"] = {
    "eventname": "user reg select token email",
    "tokentype": "send money user reg select token email"
};
Omniture.constants["ZelleRegister"]["p6Regusertokenmobile"] = {};
Omniture.constants["ZelleRegister"]["p6Regusertokenmobile"] = {
    "eventname": "user reg select token mobile",
    "tokentype": "send money user reg select token mobile"
    //"eventname": "user reg select token no token registered error"
};
Omniture.constants["ZelleRegister"]["p6Regusernotokenselected"] = {};
Omniture.constants["ZelleRegister"]["p6Regusernotokenselected"] = {
    "eventname": "user reg select token no token registered error",
    "transactionError": "send money user reg select token no token registered error"

};

//Event level values for Omni Register - USer Registration OTP Screen
Omniture.constants["ZelleRegister"]["p7ReguserenterOTPexp"] = {};
Omniture.constants["ZelleRegister"]["p7ReguserenterOTPexp"] = {
    "eventname": "user reg otp code expired error",
    "transactionError": "send money user reg otp code expired error"
};

Omniture.constants["ZelleRegister"]["p7ReguserenterOTP"] = {};
Omniture.constants["ZelleRegister"]["p7ReguserenterOTP"] = {
    "eventname": "user reg otp verify method"
};

Omniture.constants["ZelleRegister"]["p7ReguserenterOTPerror"] = {};
Omniture.constants["ZelleRegister"]["p7ReguserenterOTPerror"] = {
    "eventname": "user reg verify method email non-successful otp entry error",
    "transactionError": "send money:user reg otp verify method email non-successful otp entry error",
};
Omniture.constants["ZelleRegister"]["p7ReguserenterOTPmaxfailed"] = {};
Omniture.constants["ZelleRegister"]["p7ReguserenterOTPmaxfailed"] = {
    "eventname": "user reg verify method email max failed attempts error",
    "transactionError": "send money user reg verify method email max failed attempts error"
};
Omniture.constants["ZelleRegister"]["p7ReguserenterOTPsysdownEmail"] = {};
Omniture.constants["ZelleRegister"]["p7ReguserenterOTPsysdownEmail"] = {
    "eventname": "user reg otp verify method email token we are sorry we are having problems on our end error",
    "transactionError": "send money user reg otp verify method email token we are sorry we are having problems on our end error"
};
Omniture.constants["ZelleRegister"]["p7ReguserenterOTPsysdownMobile"] = {};
Omniture.constants["ZelleRegister"]["p7ReguserenterOTPsysdownMobile"] = {
    "eventname": "user reg otp verify method mobile token we are having problems on our end error",
    "transactionError": "send money user reg otp verify method mobile token we are having problems on our end error"
};


Omniture.constants["ZelleRegister"]["p7ReguserenterOTPerrormobile"] = {};
Omniture.constants["ZelleRegister"]["p7ReguserenterOTPerrormobile"] = {
    "eventname": "user reg verify method mobile non-successful otp entry error",
    "transactionError": "send money user reg verify method mobile non-successful otp entry error"
};

Omniture.constants["ZelleRegister"]["p7ReguserenterOTPmaxfailedmobile"] = {};
Omniture.constants["ZelleRegister"]["p7ReguserenterOTPmaxfailedmobile"] = {
    "eventname": "user reg otp mobile max failed attempts error",
    "transactionError": "send money user reg otp mobile max failed attempts error"
};



//Event level values for Omni Register - USer Registration Confirmation screen
Omniture.constants["ZelleRegister"]["p8ReguserenterConfirm"] = {};
Omniture.constants["ZelleRegister"]["p8ReguserenterConfirm"] = {
    "eventname": "user reg confirmation"
};


Omniture.constants["ZelleRegister"]["p8ReguserenterConfirmmiderror"] = {};
Omniture.constants["ZelleRegister"]["p8ReguserenterConfirmmiderror"] = {
    "eventname": "user reg confirmation no mid cxc acct created error",
    "transactionError": "send money user reg failure error"
};


//Event level values for Omni Register - USer Registration Review screen
Omniture.constants["ZelleRegister"]["p9Reguserenterreview"] = {};
Omniture.constants["ZelleRegister"]["p9Reguserenterreview"] = {
    "eventname": "user reg review"
};

Omniture.constants["ZelleRegister"]["p9Reguserreviewerror"] = {};
Omniture.constants["ZelleRegister"]["p9Reguserreviewerror"] = {
    "eventname": "user reg review error"
};

//Event level values for Omni Register - USer Registration Token TakeOver
Omniture.constants["ZelleRegister"]["p10ReguserTokenTakeover"] = {};
Omniture.constants["ZelleRegister"]["p10ReguserTokenTakeover"] = {
    "eventname": "user reg token takeover first overlay"
};

Omniture.constants["ZelleRegister"]["p10ReguserTokenTakeoverErr"] = {};
Omniture.constants["ZelleRegister"]["p10ReguserTokenTakeoverErr"] = {
    "eventname": "user reg token takeover first overlay cannot be displayed error",
    "transactionError": "send money user reg token takeover first overlay cannot be displayed error"
};
Omniture.constants["ZelleRegister"]["p11ReguserPendingtransEmail"] = {};
Omniture.constants["ZelleRegister"]["p11ReguserPendingtransEmail"] = {
    "eventname": "user reg enroll email token with pending transactions recipient list overlay",
    "tokentype": "send money user reg email token with pending transactions recipient list overlay"
};
Omniture.constants["ZelleRegister"]["p11ReguserNoPendingtransEmail"] = {};
Omniture.constants["ZelleRegister"]["p11ReguserNoPendingtransEmail"] = {
    "eventname": "user reg enroll email token no pending transactions recipient list overlay",
    "tokentype": "send money user reg enroll email token no pending transactions recipient list overlay"
};
Omniture.constants["ZelleRegister"]["p12ReguserPendingtransMobile"] = {};
Omniture.constants["ZelleRegister"]["p12ReguserPendingtransMobile"] = {
    "eventname": "user reg enroll mobile token with pending transactions recipient list overlay",
    "tokentype": "send money user reg mobile token with pending transactions recipient list overlay"
};
Omniture.constants["ZelleRegister"]["p12ReguserNoPendingtransMobile"] = {};
Omniture.constants["ZelleRegister"]["p12ReguserNoPendingtransMobile"] = {
    "eventname": "user reg enroll mobile token no pending transactions recipient list overlay",
    "tokentype": "send money user reg mobile token no pending transactions recipient list overlay"
};
Omniture.constants["ZelleRegister"]["p13ReguserPendingtransDelfailed"] = {};
Omniture.constants["ZelleRegister"]["p13ReguserPendingtransDelfailed"] = {
    "eventname": "user reg can’t delete token from recipient list error",
    "transactionError": "send money user reg can’t delete token from recipient list error"
    };
Omniture.constants["ZelleRegister"]["p14ReguserPendingtransRecipListfailed"] = {};
Omniture.constants["ZelleRegister"]["p14ReguserPendingtransRecipListfailed"] = {
    "eventname": "user reg can’t display recipient list error",
    "transactionError": "send money user reg can’t display recipient list error"
};
Omniture.constants["ZelleRegister"]["p15ReguserFailCheckPendingTrans"] = {};
Omniture.constants["ZelleRegister"]["p15ReguserFailCheckPendingTrans"] = {
    "eventname": "user reg select token pending transaction service call error",
    "transactionError": "send money user reg select token pending transaction service call error"
};
Omniture.constants["ZelleRegister"]["p16ReguserReciplist"] = {};
Omniture.constants["ZelleRegister"]["p16ReguserReciplist"] = {
    "eventname": "user reg token already in your recipient list overlay"    
};

//-------------*End Zelle Register Constants*---------------------------------

//--------------*Start Zelle Request Constants*-------------------------------------
Omniture.constants["zelleRequest"] = {};
Omniture.constants["zelleRequest"]["siteSection"] = "send money";
Omniture.constants["zelleRequest"]["subSiteSection"] = "request money zelle";
Omniture.constants["zelleRequest"]["pageMiddleSection"] = "send money";

//--------------*Add/Edit Recipient Constants starts*-------------------------------------

Omniture.constants["zelleRequest"]["addRecipientSuccessfulDisplay"] = {
    "eventname": "zelle request money add recipient"
};
Omniture.constants["zelleRequest"]["addRecipientCancelButtonClick"] = {
    "linkTrackVars": ",prop53",
    "prop53": "zelle request money add recipient cancel button"
};
Omniture.constants["zelleRequest"]["addRecipientCloseButtonClick"] = {
    "linkTrackVars": ",prop53",
    "prop53": "zelle request money add recipient close"
};
Omniture.constants["zelleRequest"]["addRecipientSaveServerError"] = {
    "eventname": "zelle request money add recipient failure error",
    "transactionError": ""
};
Omniture.constants["zelleRequest"]["addRecipientEmailFormatError"] = {
    "eventname": "zelle request money add recipient email format error",
    "transactionError": ""
};
Omniture.constants["zelleRequest"]["addRecipientMobileFormatError"] = {
    "eventname": "zelle request money add recipient mobile format error",
    "transactionError": ""
};
Omniture.constants["zelleRequest"]["addRecipientLastNameFormatError"] = {
    "eventname": "zelle request money add recipient last name format error",
    "transactionError": ""
};
Omniture.constants["zelleRequest"]["addRecipientFirstNameFormatError"] = {
    "eventname": "zelle request money add recipient first name format error",
    "transactionError": ""
};
Omniture.constants["zelleRequest"]["addRecipientDuplicateNameError"] = {
    "eventname": "zelle request money add recipient name already exists",
    "transactionError": ""
};
Omniture.constants["zelleRequest"]["addRecipientSaveSuccess"] = {
    "eventname": "zelle request money add recipient confirmation"
};
Omniture.constants["zelleRequest"]["addRecipientPopUpNotLoading"] = {
    "eventname": "zelle request money add recipient system error",
    "transactionError": ""
};
Omniture.constants["zelleRequest"]["editRecipientSuccessfulDisplay"] = {
    "eventname": "zelle request money edit recipient email mobile"
};
Omniture.constants["zelleRequest"]["editRecipientSaveSuccess"] = {
    "eventname": "zelle request money edit recipient confirmation"
};
Omniture.constants["zelleRequest"]["editRecipientSaveServerError"] = {
    "eventname": "zelle request money edit recipient failure error",
    "transactionError": ""
};

//--------------*Add/Edit Recipient Constants Ends*-------------------------------------

//---------------Send Money with Zelle Demo links Start------------------------------------
Omniture.constants["ZelleDemoLink"] = {};
Omniture.constants["ZelleDemoLink"]["pageMiddleSection"] = "send money";
Omniture.constants["ZelleDemoLink"]["SendMoneyFlowBannerClick"] = {
    "linkTrackVars": ",prop53",
    "prop53": "zelle select recipient demo banner link"
}
Omniture.constants["ZelleDemoLink"]["RequestMoneyFlowBannerClick"] = {
    "linkTrackVars": ",prop53",
    "prop53": "zelle request money select recipient demo banner link"
}
Omniture.constants["ZelleDemoLink"]["SendMoneyDemoWidgetClick"] = {
    "linkTrackVars": ",prop53",
    "prop53": "zelle send money tutorial link"
}
Omniture.constants["ZelleDemoLink"]["RequestMoneyDemoWidgetClick"] = {
    "linkTrackVars": ",prop53",
    "prop53": "zelle requesting money tutorial link"
}
Omniture.constants["ZelleDemoLink"]["EnrollDemoWidgetClick"] = {
    "linkTrackVars": ",prop53",
    "prop53": "zelle enroll to receive tutorial link"
}

//---------------Send Money with Zelle Demo links End------------------------------------

Omniture.constants["zelleRequest"]["notEnrolled"] = {
    "eventname": "zelle request money not enrolled"
};
Omniture.constants["zelleRequest"]["aboutRequestMoney"] = {
    "eventname": "zelle about request money"
};

Omniture.constants["zelleRequest"]["transactionType"] = "request money zelle";

Omniture.constants["zelleRequest"]["selectReceipient"] = {
    "eventname": "zelle request money select recipient",
    "transactionStatus": "request money zelle start"
};

Omniture.constants["zelleRequest"]["selectExistingReceipient"] = {
    "prop53": "zelle request money select existing recipient"
};

Omniture.constants["zelleRequest"]["selectPersonCancel"] = {
    "prop53": "zelle request money select recipient cancel button",
    "linkTrackVars": ",prop53"
};

Omniture.constants["zelleRequest"]["selectPersonError"] = {
    "eventname": "zelle request money system error",
    "errorStatus": "zelle request money system error"
};

Omniture.constants["zelleRequest"]["selectDeliveryMethodPageLoadSuccess"] = {
    "eventname": "zelle request money select delivery method"
};

Omniture.constants["zelleRequest"]["selectRecipientPhoneToken"] = {
    "prop53": "zelle request money select delivery method mobile",
    "linkTrackVars": ",prop53,prop43,eVar63",
    "prop43": "request money zelle token mobile",
    "eVar63": "request money zelle token mobile"
};

Omniture.constants["zelleRequest"]["selectRecipientMailToken"] = {
    "prop53": "zelle request money select delivery method email",
    "linkTrackVars": ",prop53,prop43,eVar63",
    "prop43": "request money zelle token email",
    "eVar63": "request money zelle token email"
};

Omniture.constants["zelleRequest"]["selectRecipientTokenCancel"] = {
    "prop53": "zelle request money select delivery method cancel link",
    "linkTrackVars": ",prop53"
};

Omniture.constants["zelleRequest"]["selectRecipientTokenError"] = {
    "eventname": "zelle request money select delivery method error",
    "errorStatus": "zelle request money select delivery method error"
};

Omniture.constants["zelleRequest"]["enterAmountPageLoadSuccess"] = {
    "eventname": "zelle request money enter amount"
};

Omniture.constants["zelleRequest"]["requestLimitPageLoadSuccess"] = {
    "eventname": "zelle request money enter amount request limits"
};

Omniture.constants["zelleRequest"]["enterAmountEditClick"] = {
    "prop53": "zelle request money enter amount edit click",
    "linkTrackVars": ",prop53"
};

Omniture.constants["zelleRequest"]["enterAmountPageCancel"] = {
    "prop53": "zelle request money enter amount cancel button",
    "linkTrackVars": ",prop53"
};

Omniture.constants["zelleRequest"]["enterAmountErrorPage"] = {
    "eventname": "zelle request money enter amount system error",
    "errorStatus": "zelle request money enter amount system error"
};

Omniture.constants["zelleRequest"]["reviewRequestPageLoadSuccess"] = {
    "eventname": "zelle request money review",
    "tokenType": ""
};

Omniture.constants["zelleRequest"]["reviewRequestEditClick"] = {
    "prop53": "zelle request money review edit amount",
    "linkTrackVars": ",prop53"
};

Omniture.constants["zelleRequest"]["reviewRequestPageCancel"] = {
    "prop53": "zelle request money review cancel button",
    "linkTrackVars": ",prop53"
};

Omniture.constants["zelleRequest"]["reviewRequestErrorPage"] = {
    "eventname": "zelle request money review system error"
};

Omniture.constants["zelleRequest"]["confirmRequestLoadSuccess"] = {
    "eventname": "zelle request money confirm success",
    "transactionStatus": "request money zelle complete",
    "tokenType": ""
};

Omniture.constants["zelleRequest"]["confirmRequestPrintClick"] = {
    "prop53": "zelle request money confirmation success print link",
    "linkTrackVars": ",prop53"
};

Omniture.constants["zelleRequest"]["failureRequestScreen"] = {
    "eventname": "zelle request money failure",
    "errorStatus": "zelle request money failure"
};

//--NOT USED ENDS

Omniture.constants["zelleRequest"]["sendRequestError"] = {
    "prop53": "server down error",
    "prop13": "error in sending request",
    "linkTrackVars": ",prop53,prop13,prop1,prop2",
    "prop1": "send money zelle",
    "prop2": "request money zelle"
};

Omniture.constants["zelleRequest"]["selectedReceipient"] = {
    "prop53": "The receipient is selected",
    "prop1": "send money zelle",
    "prop2": "request money zelle"
};
Omniture.constants["zelleRequest"]["errorRequestMoney"] = {
    "prop53": "Error in request money",
    "prop1": "send money zelle",
    "prop2": "request money zelle"
};

Omniture.constants["zelleRequest"]["addReceipientError"] = {
    "eventname": "zelle add recipient details error",
    "transactionType": "request money zelle",
    "prop1": "send money zelle",
    "prop2": "request money zelle"
};

Omniture.constants["zelleRequest"]["editReceipientError"] = {
    "eventname": "zelle edit recipient details error",
    "transactionType": "request money zelle",
    "prop1": "send money zelle",
    "prop2": "request money zelle"
};

Omniture.constants["zelleRequest"]["editReceipientErrorEdit"] = {
    "eventname": "zelle edit recipient new error",
    "transactionType": "request money zelle",
    "prop1": "send money zelle",
    "prop2": "request money zelle"
};

//--NOT USED ENDS

//-------------*End Zelle Request Constants*---------------------------------



// --------------------- Pending Request constants-----------------

Omniture.constants["PendingRequest"] = {};
Omniture.constants["PendingRequest"]["siteSection"] = "send money";
Omniture.constants["PendingRequest"]["subSiteSection"] = "";
Omniture.constants["PendingRequest"]["pageMiddleSection"] = "send money";
Omniture.constants["PendingRequest"]["PendingRequestDeclinePaymentconfirmationError"] = {
    "errorStatus": "omni:send money notifications:decline confirmation respond to request system error",
    "currentPage": "omni:send money notifications:decline confirmation respond to request system error"

};

Omniture.constants["PendingRequestPopClose"] = {};
Omniture.constants["PendingRequestPopClose"]["siteSection"] = "SendMoney";
Omniture.constants["PendingRequestPopClose"]["subSiteSection"] = "";

Omniture.constants["PendingRequestPopClose"]["PendingRequestPopUpClose"] = {
    "linkTrackVars": ",prop53,contextData.subSiteSection,contextData.siteSection",
    "prop53": "omni:send money notifications:to do respond to request close link"

};

//--------------*Start Zelle Split Constants*-------------------------------------
Omniture.constants["zelleSplit"] = {};
Omniture.constants["zelleSplit"]["siteSection"] = "send money";
Omniture.constants["zelleSplit"]["subSiteSection"] = "split bill";
Omniture.constants["zelleSplit"]["pageMiddleSection"] = "send money";

//--------------*Add/Edit Recipient Constants starts*-------------------------------------

Omniture.constants["zelleSplit"]["addRecipientSuccessfulDisplay"] = {
    "eventname": "zelle split bill add recipient"
};
Omniture.constants["zelleSplit"]["addRecipientCancelButtonClick"] = {
    "linkTrackVars": ",prop53",
    "prop53": "zelle split bill add recipient cancel button"
};
Omniture.constants["zelleSplit"]["addRecipientCloseButtonClick"] = {
    "linkTrackVars": ",prop53",
    "prop53": "zelle split bill add recipient close"
};
Omniture.constants["zelleSplit"]["addRecipientSaveServerError"] = {
    "eventname": "zelle split bill add recipient failure error",
    "transactionError": ""
};
Omniture.constants["zelleSplit"]["addRecipientEmailFormatError"] = {
    "eventname": "zelle split bill add recipient email format error",
    "transactionError": ""
};
Omniture.constants["zelleSplit"]["addRecipientMobileFormatError"] = {
    "eventname": "zelle split bill add recipient mobile format error",
    "transactionError": ""
};
Omniture.constants["zelleSplit"]["addRecipientLastNameFormatError"] = {
    "eventname": "zelle split bill add recipient last name format error",
    "transactionError": ""
};
Omniture.constants["zelleSplit"]["addRecipientFirstNameFormatError"] = {
    "eventname": "zelle split bill add recipient first name format error",
    "transactionError": ""
};
Omniture.constants["zelleSplit"]["addRecipientDuplicateNameError"] = {
    "eventname": "zelle split bill add recipient name already exists",
    "transactionError": ""
};
Omniture.constants["zelleSplit"]["addRecipientSaveSuccess"] = {
    "eventname": "zelle split bill add recipient confirmation"
};
Omniture.constants["zelleSplit"]["addRecipientPopUpNotLoading"] = {
    "eventname": ":zelle split bill add recipient system error",
    "transactionError": ""
};
Omniture.constants["zelleSplit"]["editRecipientSuccessfulDisplay"] = {
    "eventname": "zelle split bill edit recipient email mobile"
};
Omniture.constants["zelleSplit"]["editRecipientSaveSuccess"] = {
    "eventname": "zelle split bill edit recipient confirmation"
};
Omniture.constants["zelleSplit"]["editRecipientSaveServerError"] = {
    "eventname": "zelle split bill edit recipient failure error",
    "transactionError": ""
};

//--------------*Add/Edit Recipient Constants Ends*-------------------------------------

//---------------- Happy Path Starts ------------------------------------

Omniture.constants["zelleSplit"]["selectReceipient"] = {
    "eventname": "zelle split bill select recipients",
    "transactionStatus": "event210"
};

Omniture.constants["zelleSplit"]["enterAmountPageLoadSuccess"] = {
    "eventname": "zelle split bill enter amount"
};

Omniture.constants["zelleSplit"]["reviewRequestPageLoadSuccess"] = {
    "eventname": "zelle split bill review and request"
};

Omniture.constants["zelleSplit"]["confirmRequestLoadSuccess"] = {
    "eventname": "zelle split bill confirmation",
    "transactionStatus": "event211"
};

//---------------- Happy Path Ends --------------------------------------

//--------------- Alternate Flow Starts --------------------------------

Omniture.constants["zelleSplit"]["aboutSplitBill"] = {
    "eventname": "zelle split bill about split the bill"
};

Omniture.constants["zelleSplit"]["requestLimitPageLoadSuccess"] = {
    "eventname": "zelle split bill enter amount request limits"
};

//--------------- Alternate Flow Ends ----------------------------------

//--------------- Error Flow Starts --------------------------------

Omniture.constants["zelleSplit"]["systemDownError"] = {
    "eventname": "zelle split bill system error",
    "errorStatus": "zelle split bill system error"
};

Omniture.constants["zelleSplit"]["failureSplitScreen"] = {
    "eventname": "zelle split bill request split failure",
    "errorStatus": "zelle split bill request split failure"
};

Omniture.constants["zelleSplit"]["selectRecipientMaximumRecipientExceeded"] = {
    "eventname": "zelle split bill exceeded max recipients error",
    "errorStatus": "zelle split bill exceeded max recipients error"
};

Omniture.constants["zelleSplit"]["enterAmountHigherAmountEntered"] = {
    "eventname": "zelle split bill enter amount greater than allowed error",
    "errorStatus": "zelle split bill enter amount greater than allowed error"
};

Omniture.constants["zelleSplit"]["perDayTransactionCountExceeded"] = {
    "eventname": "zelle split bill enter amount max transactions per day error",
    "errorStatus": "zelle split bill enter amount max transactions per day error"
};

Omniture.constants["zelleSplit"]["perMonthTransactionCountExceeded"] = {
    "eventname": "zelle split bill enter amount max transactions per month error",
    "errorStatus": "zelle split bill enter amount max transactions per month error"
};

Omniture.constants["zelleSplit"]["reviewScreenSplitAmountShouldBeGreaterThanZero"] = {
    "eventname": "zelle split bill review and request amount not greater than zero error",
    "errorStatus": "zelle split bill review and request amount not greater than zero error"
};

//--------------- Error Flow Ends ----------------------------------

//--------------*End Zelle Split Constants*-------------------------------------

//--------------*Start Zelle Send Constants*-------------------------------------
Omniture.constants["zelleSend"] = {};
Omniture.constants["zelleSend"]["siteSection"] = "send money";
Omniture.constants["zelleSend"]["subSiteSection"] = "send money zelle";
Omniture.constants["zelleSend"]["pageMiddleSection"] = "send money";

//--------------*Add/Edit Recipient Constants starts*-------------------------------------

Omniture.constants["zelleSend"]["addRecipientSuccessfulDisplay"] = {
    "eventname": "zelle send money add recipient"
};
Omniture.constants["zelleSend"]["addRecipientCancelButtonClick"] = {
    "linkTrackVars": ",prop53",
    "prop53": "zelle send money add recipient cancel button"
};
Omniture.constants["zelleSend"]["addRecipientCloseButtonClick"] = {
    "linkTrackVars": ",prop53",
    "prop53": "zelle send money add recipient close"
};
Omniture.constants["zelleSend"]["addRecipientSaveServerError"] = {
    "eventname": "zelle send money add recipient failure error",
    "transactionError": ""
};
Omniture.constants["zelleSend"]["addRecipientEmailFormatError"] = {
    "eventname": "zelle send money add recipient email format error",
    "transactionError": ""
};
Omniture.constants["zelleSend"]["addRecipientMobileFormatError"] = {
    "eventname": "zelle send money add recipient mobile format error",
    "transactionError": ""
};
Omniture.constants["zelleSend"]["addRecipientLastNameFormatError"] = {
    "eventname": "zelle send money add recipient last name format error",
    "transactionError": ""
};
Omniture.constants["zelleSend"]["addRecipientFirstNameFormatError"] = {
    "eventname": "zelle send money add recipient first name format error",
    "transactionError": ""
};
Omniture.constants["zelleSend"]["addRecipientDuplicateNameError"] = {
    "eventname": "zelle send money add recipient name already exists",
    "transactionError": ""
};
Omniture.constants["zelleSend"]["addRecipientSaveSuccess"] = {
    "eventname": "zelle send money add recipient confirmation"
};
Omniture.constants["zelleSend"]["addRecipientPopUpNotLoading"] = {
    "eventname": ":zelle send money add recipient system error",
    "transactionError": ""
};
Omniture.constants["zelleSend"]["editRecipientSuccessfulDisplay"] = {
    "eventname": "zelle send money edit recipient email mobile"
};
Omniture.constants["zelleSend"]["editRecipientSaveSuccess"] = {
    "eventname": "zelle send money edit recipient confirmation"
};
Omniture.constants["zelleSend"]["editRecipientSaveServerError"] = {
    "eventname": "zelle send money edit recipient failure error",
    "transactionError": ""
};

//--------------*Add/Edit Recipient Constants Ends*-------------------------------------

//--------------*End Zelle Send Constants*-------------------------------------


Omniture.constants["enrollWithZelle"] = {};
Omniture.constants["enrollWithZelle"]["siteSection"] = "'send money zelle";
Omniture.constants["enrollWithZelle"]["subSiteSection"] = "send money";
Omniture.constants["enrollWithZelle"]["pageMiddleSection"] = "send money";
Omniture.constants["enrollWithZelle"]["updateDetails"] = {
    "pageName": "enrollment:details",
    "prop1": "send money zelle",
    "prop2": "enrollment details"
};
Omniture.constants["enrollWithZelle"]["selectAccount"] = {
    "pageName": "enrollment primary account selection",
    "prop1": "send money zelle",
    "prop2": "enrollment primary account selection"
};
Omniture.constants["enrollWithZelle"]["updateRegisterError"] = {
    "prop53": "Error occured while updating enrollment"
};
Omniture.constants["enrollWithZelle"]["selectAccountError"] = {
    "prop53": "Error occured while selecting account in enrollment"
};

//--------------*Start Interstitial Constants*-------------------------------------
Omniture.constants["Interstitial"] = {};
Omniture.constants["Interstitial"]["pageMiddleSection"] = "send money";
Omniture.constants["InterstitialsiteSection"] = "send money";
Omniture.constants["projectIDPrefix"] = "PRJ23599";
Omniture.constants["InterstitialsubSiteSection"] = "send money";

Omniture.constants["Interstitial"]["InterstitialOverlay"] = {};
Omniture.constants["Interstitial"]["InterstitialOverlay"] = {
    "pageName": "mass registration interstitial overlay"   
};

Omniture.constants["Interstitial"]["InterstitialConfirmation"] = {};
Omniture.constants["Interstitial"]["InterstitialConfirmation"] = {
    "pageName": "mass registration interstitial overlay confirmation" 
};

Omniture.constants["Interstitial"]["InterstitialNoThanks"] = {};
Omniture.constants["Interstitial"]["InterstitialNoThanks"] = {
    "pageName": "mass registration interstitial overlay"
};

Omniture.constants["Interstitial"]["OTP"] = {};
Omniture.constants["Interstitial"]["OTP"] = {
    "pageName": "mass registration interstitial overlay otp for email"
};

Omniture.constants["Interstitial"]["InterstitialClose"] = {};
Omniture.constants["Interstitial"]["InterstitialClose"] = {
    "pageName": "mass registration interstitial overlay"
};


Omniture.constants["Interstitial"]["OTPExpired"] = {};
Omniture.constants["Interstitial"]["OTPExpired"] = {
    "pageName": "mass registration interstitial overlay email otp expired error"
};

Omniture.constants["Interstitial"]["OTPMaxAttempts"] = {};
Omniture.constants["Interstitial"]["OTPMaxAttempts"] = {
    "pageName": "mass registration interstitial overlay email otp max attempts error"
};


Omniture.constants["Interstitial"]["OTPNonSucess"] = {};
Omniture.constants["Interstitial"]["OTPNonSucess"] = {
    "pageName": "mass registration interstitial overlay non-successful email otp error"
};

Omniture.constants["Interstitial"]["OTPEmail"] = {};
Omniture.constants["Interstitial"]["OTPEmail"] = {
    "pageName": "mass registration interstitial overlay otp for email"
};

Omniture.constants["Interstitial"]["InterstitialFailure"] = {};
Omniture.constants["Interstitial"]["InterstitialFailure"] = {
    "pageName": "mass registration interstitial overlay registration failure"
};

Omniture.constants["Interstitial"]["OTPFailure"] = {};
Omniture.constants["Interstitial"]["OTPFailure"] = {
    "pageName": "mass registration interstitial overlay otp system down error"
};

//--------------*End Interstitial Constants*---------------------------------------

//Start:PRJ21994 -B-55731
Omniture.constants["StepUpAuthentication"] = {};
Omniture.constants["StepUpAuthentication"]["pageName"] = "select authentication type";
Omniture.constants["StepUpAuthentication"]["pageType"] = "system";
Omniture.constants["StepUpAuthentication"]["siteSection"] = "system";
Omniture.constants["StepUpAuthentication"]["subSiteSection"] = "step up authentication";
Omniture.constants["StepUpAuthentication"]["subSiteSectionLoginTUX"]= "login step up authentication";
Omniture.constants["StepUpAuthentication"]["AuthenticationType"] = "step up select authentication method";
Omniture.constants["StepUpAuthentication"]["AuthenticationTypeOTP"] = "select mobile token for otp";
Omniture.constants["StepUpAuthentication"]["AuthenticationTypeOTPVerify"] = "step up verify mobile enter otp";
Omniture.constants["StepUpAuthentication"]["AuthenticationTypeMobileApprove"] = "select device for push notification";
Omniture.constants["StepUpAuthentication"]["AuthenticationTypeMobileApprovePending"] = "step up push notification authorization pending";
Omniture.constants["StepUpAuthentication"]["AuthenticationAYS"] = "step up cancel review";
Omniture.constants["StepUpAuthentication"]["AuthenticationAYSYesLink"] = "step up cancel review yes selected";
Omniture.constants["StepUpAuthentication"]["AuthenticationAYSNoLink"] = "step up cancel review no selected";
Omniture.constants["StepUpAuthentication"]["AuthenticationAYSChagneAuthLink"] = "step up cancel review change authentication method selected";
Omniture.constants["StepUpAuthentication"]["AuthenticationIDShield"] = "step up";
Omniture.constants["StepUpAuthentication"]["AuthenticationCloseLink"] = "step up select authentication method close link";
Omniture.constants["StepUpAuthentication"]["AuthenticationOTPCloseLink"] = "step up select mobile token for otp close link";
Omniture.constants["StepUpAuthentication"]["AuthenticationPushCloseLink"] = "step up select authentication method otp via sms selected";
Omniture.constants["StepUpAuthentication"]["AuthenticationOTPLink"] = "step up select authentication method otp via sms selected";
Omniture.constants["StepUpAuthentication"]["AuthenticationQALink"] = "step up select authentication method id shield selected";
Omniture.constants["StepUpAuthentication"]["AuthenticationApproveLink"] = "step up select authentication method visual pattern or fingerprint selected";
Omniture.constants["StepUpAuthentication"]["AuthenticationResendLink"] = "step up verify mobile enter otp code resend code";
Omniture.constants["StepUpAuthentication"]["AuthenticationOTPChangeAuthLink"] = "step up verify mobile enter otp code change authentication method link";
Omniture.constants["StepUpAuthentication"]["AuthenticationOTPHelpLink"] = "step up verify mobile enter otp code need help link";
Omniture.constants["StepUpAuthentication"]["AuthenticationChangeDeviceLink"] = "step up push notification authorization pending change device link";
Omniture.constants["StepUpAuthentication"]["AuthenticationPushChangeAuthLink"] = "step up push notification authorization pending change authentication method link";
Omniture.constants["StepUpAuthentication"]["AuthenticationPushHelpLink"] = "step up push notification authorization pending need help link";
Omniture.constants["StepUpAuthentication"]["AuthenticationForgotLink"] = "step up forgot answer link";
Omniture.constants["StepUpAuthentication"]["AuthenticationQAChangeAuthLink"] = "step up change authentication method link";
Omniture.constants["StepUpAuthentication"]["AuthenticationQAHelpLink"] = "step up need help link";
Omniture.constants["StepUpAuthentication"]["AuthenticationQALockoutError"] = "step up failure locked out";
Omniture.constants["StepUpAuthentication"]["AuthenticationQAFailedError"] = "step up failure";
Omniture.constants["StepUpAuthentication"]["AuthenticationOTPIncorrectError"] = "step up verify mobile enter otp code user validation failure";
Omniture.constants["StepUpAuthentication"]["AuthenticationOTPLockedError"] = "step up verify mobile enter otp code locked out error";
Omniture.constants["StepUpAuthentication"]["StepUpPassword"] = "step up pwd";
Omniture.constants["StepUpAuthentication"]["StepUpPasswordFailure"] = "step up pwd failure";
//End:PRJ21994 -B-55731
// DE- SE Card 265 START
Omniture.constants["StepUpAuthentication"]["LoginStepUpPwdHidePassword"] = "step up pwd hide password link";
Omniture.constants["StepUpAuthentication"]["LoginStepUpPwdShowPassword"] = "step up pwd show password link";
// DE- SE Card 265 END

Omniture.constants["ewsLanding"] = {};
Omniture.constants["ewsLanding"]["siteSection"] = "send money";
Omniture.constants["ewsLanding"]["subSiteSection"] = "send money zelle";
Omniture.constants["ewsLanding"]["pageMiddleSection"] = "send money";

Omniture.constants["ewsLanding"]["landingPage"] = {
    "eventname": "zelle overview"
};
;
(function () {

    'use strict';
    angular.module('IdleTimeoutModule', ['CommonModule', 'ngIdle'])
    .config(['KeepaliveProvider', 'IdleProvider', function (keepaliveProvider, idleProvider) {

    }]).factory('timeoutExtender', ['Idle', 'CommonService', function (idle, commonService) {


        var setCookie = function (cname, cvalue) {
            var d = new Date();
            d.setTime(d.getTime() + (24 * 60 * 60 * 1000));
            var expires = "expires=" + d.toUTCString();
            document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
        };
        var extendTimeoutImp = function () {
            var url = "";
            var data = {};
            var serviceUrl = "";
            var rootUrl;
            if (document.getElementById('divRootOmniSiteUrlFromLayout') != null)
                rootUrl = document.getElementById('divRootOmniSiteUrlFromLayout').innerText || document.getElementById('divRootOmniSiteUrlFromLayout').textContent;
            try {

                serviceUrl = rootUrl + "Timeout/GetTimeoutFromVoyager";
                setCookie("SuppressSpinner", 'true');
                commonService.result("POST", serviceUrl, data)
                .success(function (timeoutDetails) {
                  //  idle.setIdle(timeoutDetails.TimeoutLength);
                    // idle.setTimeout(timeoutDetails.TimeoutWarningDuration);
                    //   $scope.extendedSession = true;
                    
                    idle.watch();
                }).error(function (result) {
                });
            } catch (e) { console.log("timeoutExtender exception : " + e); }
        };
        return {
            extendTimeout: extendTimeoutImp
        };

    }])
    .run(['$rootScope', '$templateCache', '$http', 'Idle', 'OpenModalService', 'CommonService', '$window', function ($rootScope, $templateCache, $http, idle, openModalService, commonService, $window) {

        var isTouchVal;
        if (document.getElementById('divIsTouch') != null)
            isTouchVal = document.getElementById('divIsTouch').innerText || document.getElementById('divIsTouch').textContent;

        var rootUrl;
        if (document.getElementById('divRootOmniSiteUrlFromLayout') != null)
            rootUrl = document.getElementById('divRootOmniSiteUrlFromLayout').innerText || document.getElementById('divRootOmniSiteUrlFromLayout').textContent;

        var authUrl;
        if (document.getElementById('divRootAuthUrlFromLayout') != null)
            authUrl = document.getElementById('divRootAuthUrlFromLayout').innerText || document.getElementById('divRootAuthUrlFromLayout').textContent;

        var isBankerVal;
        if (document.getElementById('isBankerFromMaster') != null)
            isBankerVal = document.getElementById('isBankerFromMaster').value.toLowerCase();

        var isAuthenticated;
        if (document.getElementById('divIsAuthenticated') != null)
            isAuthenticated = document.getElementById('divIsAuthenticated').innerText || document.getElementById('divIsAuthenticated').textContent;

        commonService.setIsTouch(isTouchVal);
        commonService.setIsBankerFromMaster(isBankerVal);

        var url = "";
        var data = {};
        var serviceUrl = "";
        //PCR75 - Added by CEI Team -- start
        var externalRediectFuntionId = document.querySelector("#appId") ? document.querySelector("#appId").value : null;
        var externalUserCEI = (externalRediectFuntionId && externalRediectFuntionId == "101") ? "True" : "False";
        //PCR75 - Added by CEI Team -- end

        if (isTouchVal === "False" && isAuthenticated === "True" && externalUserCEI === "False") {

            serviceUrl = rootUrl + "Timeout/GetTimeoutFromVoyager";

            commonService.result("POST", serviceUrl, data)
            .success(function (timeoutDetails) {
                idle.setIdle(timeoutDetails.TimeoutLength);
                idle.setTimeout(timeoutDetails.TimeoutWarningDuration);
                idle.watch();
            }).error(function (result) {
            });


            // handled events inside modal popup
            var modalInstanceCtrl = ['$scope', '$modalInstance', '$timeout', 'modalObj', function ($scope, $modalInstance, $timeout, modalObj) {
                $scope.extendedSession = false;
                $scope.closeModals = function () {
                    $modalInstance.close();
                };

                $scope.start = function () {
                    url = rootUrl + "Timeout/ExtendSession";
                    commonService
                            .result("POST", url, data)
                            .success(function (result) {
                                $scope.extendedSession = true;
                                $timeout(function () {
                                    $modalInstance.close();
                                    idle.watch();
                                    try {
                                        if (document.getElementById('kmiModalPopup').style.display != "none") {
                                            document.getElementById('kmiModalPopup').focus()
                                        }
                                    }
                                    catch (e) { }
                                }, 1000);
                            }).error(function () {
                                //Include logic for error scenario
                                $modalInstance.close();
                                try {
                                    if (document.getElementById('kmiModalPopup').style.display != "none") {
                                        setTimeout(function () {
                                            document.getElementById('kmi_content_Frame').contentWindow.focus();
                                        }, 1);
                                    }
                                }
                                catch (e) { }
                            });
                };

                $scope.stop = function () {
                    $modalInstance.close();
                    idle.unwatch
                    try {
                        if (GLANCE.Cobrowse.Visitor.inSession() == true)
                            GLANCE.Cobrowse.Visitor.stopSession();
                    } catch (e) { }
                    try {
                        if (typeof (document.getElementById('IframeGSS')) != 'undefined' && document.getElementById('IframeGSS') != null) {
                            var message = { name: "Window1", gssOLBClientState: 'signoff' };
                            document.getElementById('IframeGSS').contentWindow.postMessage(message, '*');
                        }
                    } catch (e) { }
                    if (isBankerVal.toLowerCase() === "false") {
                        url = authUrl + "LogoutConfirmation";
                        window.location = url;
                    } else {
                        commonService.bankerSignOff();
                    }                    
                };

            }];

            // Create a template
            $templateCache.put('modal.html',
                           '<div class="session-popup-wrapper usb-module__modal sessionmodal-content">' +
                           '<div class="modal-header sessionmodal-header usb-content-paragraph--large">' +
                           '<span></span>' +
                           '<span class="modal-header-close usb-icons-close2" ng-click="closeModals()"></span></div>' +
                           '<div class="modal-hr1px--dark-gray"></div>' +
                           '<div class="modal-body">' +
                           '<div class="usb-heading3">Do you want to stay logged in?</div>' +
                           '<div class="usb-content-paragraph modal-content-margin">' +
                           'For your security, you’ll be logged out shortly.' +
                           '</div>' +
                           '</div>' +
                           '<div class="modal-footer">' +
                           '<div class="modal-margin-between-btn sessionmodal-margin">' +
                           '<button class="usb-button--secondary" ng-click="start()">Stay logged in</button> ' +
                           '</div>' +
                           '<button class="usb-button--secondary" ng-click="stop()">Log out now</button>' +
                           '<div class="modal-content-margin" ng-show="extendedSession">Your session has been extended.</div>' +
                           '</div>' +
                           '</div>');

            $templateCache.put('modalforbanker.html',
                           '<div class="session-popup-wrapper usb-module__modal sessionmodal-content">' +
                           '<div class="modal-header sessionmodal-header usb-content-paragraph--large">' +
                           '<span></span>' +
                           '<span class="modal-header-close usb-icons-close2" ng-click="closeModals()"></span></div>' +
                           '<div class="modal-hr1px--dark-gray"></div>' +
                           '<div class="modal-body">' +
                           '<div class="usb-heading3">Do you wish to continue to work in this window ?</div>' +
                           '<div class="usb-content-paragraph modal-content-margin">' +
                           'The content of this window is time-sensitive and, to help prevent security breaches, will expire after 15 minutes of inactivity. ' +
                           '</div>' +
                           '</div>' +
                           '<div class="modal-footer">' +
                           '<div class="modal-margin-between-btn">' +
                           '<button class="usb-button--secondary" ng-click="start()">Yes, I would like to continue.</button> ' +
                           '</div>' +
                           '</br>' +
                           '<button class="usb-button--secondary modal__banker-logout" ng-click="stop()">No, it is okay to let the window expire (this will not log you out of the system you launch from)</button>' +
                           '<div class="modal-content-margin" ng-show="extendedSession">Your session has been extended.</div>' +
                           '</div>' +
                           '</div>');


            // Start the Idle Timer
            var modalObj = {};
            var modalObjForbanker = {};

            modalObj.templateUrl = "modal.html";
            modalObjForbanker.templateUrl = "modalforbanker.html";

        } else {

            //isTouch True
            //Here the mobile implementation was removed as the respective mobile app scripts are executing for the timeout.
        }
        
        if (isAuthenticated === "True" && externalUserCEI === "False") {
            $rootScope.$on('IdleStart', function () {
                if (isTouchVal === "False") {
                    if (isBankerVal === "false") {
                        openModalService.popup(modalInstanceCtrl, modalObj, "static");
                    } else {
                        openModalService.popup(modalInstanceCtrl, modalObjForbanker, "static");
                    }
                } else {
                    //No mobile implementation
                }
            });

            $rootScope.$on('IdleEnd', function () {
            });

            $rootScope.$on('IdleWarn', function (e, countdown) {
            });

            $rootScope.$on('IdleTimeout', function () {
                if (isTouchVal === "False") {
                    if (isBankerVal === "false") {
                        url = authUrl + "SessionTimeout";
                        window.location = url;
                    } else {
                        commonService.bankerSignOff();
                    }

                }
                try {
                    if (GLANCE.Cobrowse.Visitor.inSession() == true)
                        GLANCE.Cobrowse.Visitor.stopSession();
                } catch (e) { }
                try {
                    if (typeof (document.getElementById('IframeGSS')) != 'undefined' && document.getElementById('IframeGSS') != null) {
                        var message = { name: "Window1", gssOLBClientState: 'signoff' };
                        document.getElementById('IframeGSS').contentWindow.postMessage(message, '*');
                    }
                } catch (e) { }
            });
        }

    }]);
})();
;
(function () {
    'use strict';
    angular
        .module("CommonModule")
            .directive('print', ['CommonService', 'SiteCatService', 'CommonConstants', print]);

    function print(commonService, siteCatService, commonConstants) {
        var isBanker = commonService.getIsBankerFromMaster().toLowerCase() === "true";
        var printSection = document.getElementById('printContent');
        // if there is no printing section, create one
        if (!printSection) {
            printSection = document.createElement('div');
            printSection.id = 'printContent';
            document.body.appendChild(printSection);
        }       

        return {
            restrict: 'A',
            scope: {
                programStatus: '=',
                omnitureSection: '=',
            },
            link: function (scope, element) {
                element.on('click', function () {

                    if (!isBanker) {
                        // Start : Omniture for confirm print
                        siteCatService.SiteCatTLCall(scope.omnitureSection, commonConstants.O_CONFIRMPRINT, { "programStatus": scope.programStatus });
                        // End : Omniture for confirm print
                    } else {
                        // Start : Omniture for confirm print for banker
                        siteCatService.SiteCatTLCall(scope.omnitureSection, commonConstants.O_CONFIRMPRINTBANKER, { "programStatus": scope.programStatus });
                        // End : Omniture for confirm print for banker
                    }
                    var contents = document.getElementById("printContent");
                    var headContent = document.getElementsByTagName("head")[0];
                    var arrHeadStyleSheets = headContent.getElementsByTagName("link");
                    var bodyContent = document.getElementsByTagName("body")[0];
                    var arrStyleSheets = bodyContent.getElementsByTagName("link");
                    var frame = document.createElement('iframe');
                    frame.name = "frameContent";
                    frame.id = "printFrameContent";
                    frame.style.top = "-1200px";
                    frame.style.position = "absolute";
                    frame.style.width = "1200px"; // Desktop width
                    document.body.appendChild(frame);

                    var frameDoc = frame.contentWindow ? frame.contentWindow : frame.contentDocument.document ? frame.contentDocument.document : frame.contentDocument;
                    frameDoc.document.open();
                    frameDoc.document.write('<!DOCTYPE html><html><head>');
                    var el = document.createElement("div");

                    /* Update the Styles from the head section */
                    for (var i = 0; i < arrHeadStyleSheets.length; i++) {
                        el.appendChild(arrHeadStyleSheets[i].cloneNode(true));
                    }

                    /* Updates styles from body section */
                    for (var i = 0; i < arrStyleSheets.length; i++) {
                        el.appendChild(arrStyleSheets[i].cloneNode(true));
                    }

                    /* Update comment section for IE8, IE8 uses styles inside comment */
                    for (var i = 0; i < bodyContent.childNodes.length; i++) {
                        if (bodyContent.childNodes[i].nodeType == 8) {
                            el.appendChild(bodyContent.childNodes[i].cloneNode(true));
                        }
                    }
                    frameDoc.document.write(el.innerHTML);
                    frameDoc.document.write('</head><body><div class=\"container printBodyData\">');
                    frameDoc.document.write(contents.innerHTML);
                    frameDoc.document.write('</div></body></html>');
                    frameDoc.document.close();
                    setTimeout(function () {
                        try {
                            var printflag = window.frames["frameContent"].document.execCommand('print', false, null);
                            if (printflag == false)
                                window.frames["frameContent"].print();
                        } catch (e) {
                            window.frames["frameContent"].print();
                        }
                        document.body.removeChild(frame);
                    }, 500);
                    return false;

                });

            }
        }
    };
})();;
(function () {
    'use strict';

    var cmsContainer = {};

    angular
        .module('CommonModule')
        .directive('usbcms', ['CommonService', '$compile', CmsContentDirective]);

    function CmsContentDirective(commonService, $compile) {
        return {
            restrict: 'E',
            template: '<div>{{CMSContent}}</div>',
            link: function (scope, elem, attr) {
                var cms = cmsContainer[attr.key];
                var url = commonService.getcmsDirectiveUrl();
                var module = attr.module;
                if (cms) {
                    elem.html(cms);
                    $compile(elem.contents())(scope);
                    //scope.$emit('CMSUpdated');
                    if (module === "Entitlements") {
                        scope.$emit('CMSUpdated', attr.key);
                    }

                }
                else {
                    commonService.result('GET', url + 'CMS/GetCms?Id=' + attr.key, null)
                     .success(function (result) {

                         cmsContainer[attr.key] = result;
                         elem.html(result);
                         $compile(elem.contents())(scope);
                         scope.$emit('CMSUpdated', attr.key);

                         //var cResult = $compile(result)(scope);
                         //elem[0].outerHTML = eval(cResult);
                     });
                }
            }
        }
    }
})();
;
(function () {
    'use strict';

    angular.module('GSSModule', [])
    .factory('GSSUtility', ['$http', 'GssConstants', function ($http, gssConstants) {

        var setGSSWindowStatusImp = function (status) {
            var message = { name: "Window1", gssWindowStatus: status };
            document.getElementById(gssConstants.GSS_IFRAME).contentWindow.postMessage(message, '*');

        };
        var setCookieImpl = function (cname, cvalue) {
            var d = new Date();
            d.setTime(d.getTime() + (24 * 60 * 60 * 1000));
            var expires = "expires=" + d.toUTCString();
            document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
        };
        var getCookieImpl = function (name) {
            var value = "; " + document.cookie;
            var parts = value.split("; " + name + "=");
            if (parts.length == 2) return parts.pop().split(";").shift();
        };

        var deleteCookieImpl = function (name) {
            document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        };

        var getGssIframeURLImple = function () {
            var gssChatStatus = 1;
            var HLPID = getCookieImpl(gssConstants.GSS_riblpid);
            var SFURL = document.getElementById(gssConstants.GSS_GSSChaturl).value;

           // if (getCookieImpl(gssConstants.GSS_G_on) != null) {
             //   if (gssUtility.getCookie(gssConstants.GSS_G_on) == gssConstants.GSS_T) {
            if ((gssUtility.getCookie(gssConstants.GSS_G_sess) == gssConstants.GSS_Session_Ended) || 
                        (gssUtility.getCookie(gssConstants.GSS_G_sess) == gssConstants.GSS_Session_Na))
                        gssChatStatus = 1;
                    else
                gssChatStatus = 0; //0: Refresh load or navigation load

            if(gssUtility.getCookie(gssConstants.GSS_G_sess) == gssConstants.GSS_Window_Status_Inactive)
                gssUtility.setCookie(gssConstants.GSS_G_sess,gssConstants.GSS_Session_Wt);

                //}
               // else { gssChatStatus = 1; }
            //} //1: value is not true, so it is first time load after login


            var VID = null;
            var MID = null;
            if (typeof window.visitor != 'undefined') {
                VID = visitor.getAnalyticsVisitorID();
                MID = visitor.getMarketingCloudVisitorID();
            }
            return SFURL + '?HLPID=' + HLPID + '&VID=' + VID + '&MID=' + MID + '&ELC=' + getCookieImpl(gssConstants.GSS_G_elg) + '&gssChatStatus=' + gssChatStatus;
        };


        var redirectToCCAPImp = function (urlPath, functionName, params, openInNewWindow, isBrokerageCall, isTrustCall) {
            var form = document.createElement("form");
            var functionToCall = functionName;  //Just incase the functionName are same

            var accountType = '';

            form.setAttribute("method", "post");
            form.setAttribute("action", urlPath);

            switch (functionName) {
                case "ChangeCheckORATMCardPIN":
                    functionToCall = "ChangePIN"; //CCAP Integration
                    accountType = "DDA";
                    break;
                case "ReportCardAsLostorStolen":
                case "ReportCheckasLostorStolen":
                    functionToCall = "ReportLostStolen";
                    accountType = "DDA";
                    break;
                case "DisputeACharge":
                case "BCCreditCardDisputeCharge":
                    functionToCall = "DisputeCharge";
                    accountType = "CCD";
                    break;
                case "ReportCreditCardAsLostOrStolen":
                case "ReportOtherCardAsLostOrStolen":
                    functionToCall = "ReportLostStolen";
                    accountType = "CCD";
                    break;
                case "StopPaymentonaCheck":
                    functionToCall = "ReportLostStolen";
                    accountType = "DDA";
                    break;
                case "FindPastCheckorDepositSlipImages":
                    //Defect DTSYS00129368 Fixed : Added case for CheckingFindPastCheckOrDepositSlipImages
                case "CheckingFindPastCheckOrDepositSlipImages":
                    functionToCall = "FindChecks"; //CCAP Integration
                    accountType = "DDA";
                    break;
                case "RequestPastStatements":
                    functionToCall = "RequestStatements"; //CCAP Integration
                    accountType = "DDA";
                    break;
                    //RQT 456 Start  - overdraft coverage                                                                          
                case "CheckingATMAndCheckCardOverdraftCoverage":
                case "ManageOverdraftCoverage":
                    functionToCall = "ChangeODCoverage";
                    accountType = "DDA";
                    break;
                    //RQT 456 End - overdraft coverage                                                                         
                case "ActivateYourCheckCard":
                    functionToCall = "ActivateCheckCard"; //CCAP Integration
                    accountType = "DDA";
                    break;
                    //RQT 407 Start: Request a U.S. Bank Check Card                                                                         
                case "RequestaCheckCard":
                    functionToCall = "RequestCheckCard";
                    accountType = "DDA";
                    break;
                    //RQT 407 End: Request a U.S. Bank Check Card                                                                          
                    //Start: ^PCR358 - My Profile - new entries for My profile edit CCAP links                                                                         
                case "UpdatePhone":
                case "UpdateMobile":
                case "UpdateEmail":
                case "UpdateAddress":
                case "ChangePersonalID":
                case "ChangePassword":
                case "ChangeIDShieldQA":
                case "ChangeIDShieldImage":
                    accountType = "";
                    break;
                    //End: ^PCR358 - My Profile                                                            
                    // Start: RQT422 - CCAP Links for Alerts                                                                           
                case "QuietTimeEnabled":
                    functionToCall = "QuiteTimeEnable";
                    accountType = "";
                    break;
                case "AccountAlertFaqs":
                    functionToCall = "AccountAlertsFaq"; //CCAP Integration
                    accountType = "";
                    break;
                case "SecurityAlertFaqs":
                    functionToCall = "SecurityAlertsFaq"; //CCAP Integration
                    accountType = "";
                    break;
                case "StartAlertFaqs":
                    functionToCall = "StartAlertsFaq"; //CCAP Integration
                    accountType = "";
                    break;
                    // Added for PCR 410                                                            
                case "IdShieldFaq":
                    functionToCall = "IdShieldFaq"; //CCAP Integration for PCr 410
                    accountType = "";
                    break;
                    // End PCR 410                                                            
                    // End: RQT422 - CCAP Links for Alerts                                             
                default:
                    if (isBrokerageCall !== null && isBrokerageCall !== undefined && isBrokerageCall.toLowerCase() == 'true') {
                        accountType = "INV";
                    }
                    else if (isTrustCall !== null && isTrustCall !== undefined && isTrustCall.toLowerCase() == 'true') {
                        accountType = "TST";
                    }
                    else {
                        accountType = ""; //PCR 370 - Adding this code here to cover all other cases
                    }
                    break;
            }

            //Logic for generating function name can be implemented here ,Since CCAP expects functionName differently than OLB
            var hdFunctionName = document.createElement("input");
            hdFunctionName.setAttribute("type", "hidden");
            hdFunctionName.setAttribute("name", "FunctionName");
            hdFunctionName.setAttribute("value", functionToCall);

            var hdReturnurl = document.createElement("input");
            hdReturnurl.setAttribute("type", "hidden");
            hdReturnurl.setAttribute("name", "Returnurl");
            hdReturnurl.setAttribute("value", '/USB/' + getAfToken() + '/CustomerDashboard/Index');

            var hdKeepaliveurl = document.createElement("input");
            hdKeepaliveurl.setAttribute("type", "hidden");
            hdKeepaliveurl.setAttribute("name", "Keepaliveurl");
            hdKeepaliveurl.setAttribute("value", gssConstants.CCAP_hdKeepaliveurl);

            var hdTimeout = document.createElement("input");
            hdTimeout.setAttribute("type", "hidden");
            hdTimeout.setAttribute("name", "Timeout");
            //  PCR 410 Added condition for to check the undefined condition for Session time on Send/Receive money and deposit
            //if (CommonDataHelper.urls.SessionTimeout != undefined) {
            hdTimeout.setAttribute("value", gssConstants.CCAP_Timeout);
            // } else {
            //   hdTimeout.setAttribute("value", 30);
            //}
            // End condition

            //START : User story B-26071
            var hdWarningTimeout = document.createElement("input");
            hdWarningTimeout.setAttribute("type", "hidden");
            hdWarningTimeout.setAttribute("name", "WarningTimeout");
            hdWarningTimeout.setAttribute("value", gssConstants.CCAP_hdWarningTimeout);
            //END : User story B-26071

            var hdLogouturl = document.createElement("input");
            hdLogouturl.setAttribute("type", "hidden");
            hdLogouturl.setAttribute("name", "Logouturl");
            hdLogouturl.setAttribute("value", gssConstants.CCAP_hdLogouturl);

            var customerSegmentTypeCode = "";

            var hCustomerSegmentType = document.createElement("input");
            hCustomerSegmentType.setAttribute("type", "hidden");
            hCustomerSegmentType.setAttribute("name", "CustomerTypeCode");
            hCustomerSegmentType.setAttribute("value", customerSegmentTypeCode);

            form.appendChild(hdFunctionName);
            form.appendChild(hdReturnurl);
            form.appendChild(hdKeepaliveurl);
            form.appendChild(hdTimeout);
            form.appendChild(hdWarningTimeout);
            form.appendChild(hdLogouturl);
            form.appendChild(hCustomerSegmentType);

            //for all other parameters we can use this logic
            for (var key in params) {
                if (params.hasOwnProperty(key)) {
                    if (key != undefined && key.length > 0) {
                        var value = params[key];
                        if (key == "AccountType" || value != undefined && value != "") {
                            var hiddenField = document.createElement("input");
                            hiddenField.setAttribute("type", "hidden");
                            hiddenField.setAttribute("name", key);
                            if (key == "AccountType") {
                                hiddenField.setAttribute("value", accountType);
                            } else {
                                hiddenField.setAttribute("value", value);
                            }
                            form.appendChild(hiddenField);
                        }
                    }
                }
            }
            // Added condition for PCR 410
            if (openInNewWindow != undefined && openInNewWindow === true)
                form.target = "_blank";
            // End PCR 410    
            document.body.appendChild(form);
            form.submit();
            document.body.removeChild(form);
        };


        var getAfToken = function () {
            var currentUrl = window.location.href;
            var afToken = currentUrl.match(/af\(.*\)/);
            if (afToken && afToken.length > 0)
                return afToken[0];

            return '';
        };

        function setGSSValues(vid, mid) {
            var message = { VID: vid, MID: mid, pageUrl: s.pageName };
            document.getElementById(gssConstants.GSS_IFRAME).contentWindow.postMessage(message, '*');
        }

        var deepLinkingRedirect = function (redirectEv) {

            if (redirectEv.data.urlToLaunch === undefined || redirectEv.data.urlToLaunch == "") {
                if (redirectEv.data.sessionStatus == "" || redirectEv.data.sessionStatus === undefined) {
                    return;
                }
                else if (redirectEv.data.sessionStatus == gssConstants.POSTMESSGE_SEESIONSTRTED) {
                    gssUtility.setCookie(gssConstants.GSS_G_sess, gssConstants.GSS_G_sess_Started);
                    var VID = null;
                    var MID = null;
                    if (typeof window.visitor != 'undefined') {
                        VID = visitor.getAnalyticsVisitorID();
                        MID = visitor.getMarketingCloudVisitorID();
                    }
                    setGSSValues(VID, MID);
                }
                else if (redirectEv.data.sessionStatus == gssConstants.POSTMESSGE_SEESIONENDED) {
                    gssUtility.setCookie(gssConstants.GSS_G_sess, gssConstants.GSS_Session_Ended);
                }
                else if (redirectEv.data.sessionStatus == "endCobrowse") {//need to add to CONST
                    try {
                        if (GLANCE.Cobrowse.Visitor.inSession() == true)
                            GLANCE.Cobrowse.Visitor.stopSession();
                    }
                    catch (e) {
                    }
                }
            }
            else {
                if (redirectEv.data.name == gssConstants.POSTMESSGE_KMIURL) {
                    //window.open(redirectEv.data.urlToLaunch);
                    kmiShowPopupImpl(redirectEv.data.urlToLaunch);
                    return false;
                }
                else if (redirectEv.data.name == gssConstants.POSTMESSGE_DOTCOMURL) {
                    window.open(redirectEv.data.urlToLaunch);
                    return false;
                }                
                else if (redirectEv.data.urlToLaunch == gssConstants.URL_CCAP_FindPastCheckOrDepositSlipImages) {
                    var accountType = "";      // AccountType will be check based on the FunctionName call in CommonDataHelper.js
                    var accountIndex = "";     //No values will be passed from SS
                    var parameters = {
                        AccountIndex: accountIndex,
                        AccountType: accountType
                    };
                    var action = gssConstants.FINDPASTCHECKORDEPOSITSLIPIMAGES;
                    redirectToCCAPImp(gssConstants.URL_CCAP_LandingPage, action, parameters);
                    return true;
                }
                else if (redirectEv.data.urlToLaunch == gssConstants.URL_CCAP_ReportCardAsLostorStolen) {
                    var accountType = "";      // AccountType will be check based on the FunctionName call in CommonDataHelper.js
                    var accountIndex = "";     //No values will be passed from SS
                    var parameters = {
                        AccountIndex: accountIndex,
                        AccountType: accountType
                    };
                    var action = gssConstants.CCP_ReportCardAsLostorStolen;
                    redirectToCCAPImp(gssConstants.URL_CCAP_LandingPage, action, parameters);
                    return true;
                }
                else if (redirectEv.data.urlToLaunch == gssConstants.URL_CCAP_RequestPastStatements) {
                    var accountType = "";      // AccountType will be check based on the FunctionName call in CommonDataHelper.js
                    var accountIndex = "";     //No values will be passed from SS
                    var parameters = {
                        AccountIndex: accountIndex,
                        AccountType: accountType
                    };
                    var action = gssConstants.CCP_RequestPastStatements;
                    redirectToCCAPImp(gssConstants.URL_CCAP_LandingPage, action, parameters);
                    return true;
                }
                else if (redirectEv.data.urlToLaunch == gssConstants.URL_CCAP_ActivateCheckCard) {
                    var accountType = "";      // AccountType will be check based on the FunctionName call in CommonDataHelper.js
                    var accountIndex = "";     //No values will be passed from SS
                    var parameters = {
                        AccountIndex: accountIndex,
                        AccountType: accountType
                    };
                    var action = gssConstants.ACTIVATEYOURCHECKCARD;
                    redirectToCCAPImp(gssConstants.URL_CCAP_LandingPage, action, parameters);
                    return true;
                }
                else if (redirectEv.data.urlToLaunch == gssConstants.URL_CCAP_EMAILUS) {
                    var accountType = "";      // AccountType will be check based on the FunctionName call in CommonDataHelper.js
                    var accountIndex = "";     //No values will be passed from SS
                    var parameters = {
                        AccountIndex: accountIndex,
                        AccountType: accountType
                    };
                    var action = gssConstants.EMAILUS;
                    redirectToCCAPImp(gssConstants.URL_CCAP_LandingPage, action, parameters);
                    return true;
                }
                else if (redirectEv.data.urlToLaunch == gssConstants.URL_CCAP_DisputeCharge) {
                    var accountType = "";      // AccountType will be check based on the FunctionName call in CommonDataHelper.js
                    var accountIndex = "";     //No values will be passed from SS
                    var parameters = {
                        AccountIndex: accountIndex,
                        AccountType: accountType
                    };
                    var action = gssConstants.DISPUTECHARGE;
                    redirectToCCAPImp(gssConstants.URL_CCAP_LandingPage, action, parameters);
                    return true;
                }
                else {
                    window.location.replace(redirectEv.data.urlToLaunch.replace(gssConstants.AFTOKEN, getAfToken()));
                }
            }

        };

        var handleEvent = function (event, args) {

            deepLinkingRedirect(event);

        };
        var helpCenterUrlImpl = function () {
            window.location.replace(gssConstants.URL_USB_BASEPATH + getAfToken() + gssConstants.URL_HelpCenter_aspx);
        };

        var kmiShowPopupImpl = function (url) {
            if (url === undefined || url == '') {
            }
            else {
                if (document.getElementById('kmiModalPopup') != null) {
                    document.getElementById('kmi_content_Frame').src = url;
                    document.getElementById('kmiModalPopup').style.display = 'block';
                    document.getElementById('kmi_cover').style.display = 'block';
                    window.location.href = "#kmiModalPopup";
                    document.getElementById('kmi_cancel_btn').focus();

                    document.getElementsByTagName("body")[0].setAttribute("aria-hidden", "true");
                    setTimeout(function () {
                        $('#kmiModalPopup').attr("aria-hidden", "false");
                        document.getElementById("kmiModalPopup").setAttribute("aria-hidden", "false");
                    }, 500);

                }
            }

        };

        return {
            getGSSIFRAMEUrl: getGssIframeURLImple,
            HandleEvent: handleEvent,
            setCookie: setCookieImpl,
            getCookie: getCookieImpl,
            deleteCookie: deleteCookieImpl,
            setGSSWindowStatus: setGSSWindowStatusImp,
            redirectToCCAP: redirectToCCAPImp,
            helpCenterUrl: helpCenterUrlImpl
        };

    }])
})();;
(function () {
    'use strict';
    angular
        .module('GSSModule')
        .directive('gssDirective', ['GSSUtility', 'GssConstants', 'GssTemplate', gssDirectiveFun]);

    function gssDirectiveFun(gssUtility, gssConstants, gssTemplate) {
        return {
            restrict: 'E',
            template: gssTemplate.gss_Template.join(''),
            link: function (scope, elem, attr) {
                var canStartDrag = 0;
                var lastKnownCoordinate;
                var dragComplete = 0;
                window.addEventListener('message', gssUtility.HandleEvent, false);
                try { // glance Co-browse :: Playing sound when the agent is live// this sound file is kb size , we will change this to host in OLB, so that we can avoid tunnel request
                    GLANCE.Cobrowse.Visitor.addEventListener('sessionstart', function (event, args) {
                        window.setTimeout(function () {
                            var obj = document.createElement("audio");
                            obj.src = "https://www.cobrowsing.net/beep.mp3"; //You may download any audible of your choosing and reference it here
                            obj.volume = 0.10;
                            obj.autoPlay = false;
                            obj.preLoad = true;
                            obj.play();
                        }, 2000);

                    });
                } catch (e) {

                }
                try {
                    document.getElementById('hrefCommonLogout').onclick = function () {

                        if (typeof (document.getElementById('IframeGSS')) != 'undefined' && document.getElementById('IframeGSS') != null) {
                            var message = { name: "Window1", gssOLBClientState: 'signoff' };
                            document.getElementById('IframeGSS').contentWindow.postMessage(message, '*');

                        }

                        if (GLANCE.Cobrowse.Visitor.inSession() == true)
                            GLANCE.Cobrowse.Visitor.stopSession();
                    }
                } catch (e) { }
                var getAbsoluteTop = function (node) {
                    var obj = node;
                    var positionArray = new Array();
                    var curtop = obj.offsetTop;
                    if (obj.offsetParent) {
                        while (obj = obj.offsetParent) {
                            curtop += obj.offsetTop - obj.scrollTop;
                        }
                    }
                    return curtop;
                }
                var getAbsoluteLeft = function (obj) {
                    var curleft = obj.offsetLeft;
                    if (obj.offsetParent) {
                        while (obj = obj.offsetParent) {
                            curleft += obj.offsetLeft - obj.scrollLeft;
                        }
                    }
                    return curleft;
                }

                function drag_start(event) {
                    document.getElementById(gssConstants.HTML_dummyContainer).style.display = 'block';
                    if (canStartDrag == 0)
                        return;
                    var style = style = event.target.currentStyle || window.getComputedStyle(event.target, null);
                    var nodeLeft = getAbsoluteLeft(event.target);
                    var nodeTop = getAbsoluteTop(event.target);
                    event.dataTransfer.setData("text",
                   (nodeLeft - event.clientX) + ',' + (nodeTop - event.clientY));

                }
                function drag_over(event) {
                    dragComplete = 1;
                    var allowedY = ($("#chat_help").offset().top - $(document).scrollTop()) + event.clientY + 30;
                    var allowedX = ($("#chat_help").offset().left - $(document).scrollLeft()) + event.clientX + 30;
                    var dm = document.getElementById(gssConstants.HTML_chat_help);
                    dm.style.left = Math.min((event.clientX - 30), allowedX) + 'px';
                    dm.style.top = Math.min((event.clientY - 30), allowedY) + 'px';
                    lastKnownCoordinate = Math.min((event.clientX - 30), allowedX) + ',' + Math.min((event.clientY - 30), allowedY);
                    event.preventDefault();
                    return false;
                }
                function drop(event) {
                    var offset = event.dataTransfer.getData("text").split(',');
                    var dm = document.getElementById(gssConstants.HTML_chat_help);
                    dm.style.left = (event.clientX + parseInt(offset[0], 10)) + 'px';
                    dm.style.top = (event.clientY + parseInt(offset[1], 10)) + 'px';
                    event.preventDefault();
                    return false;
                }
                function check_gss_active() {
                    if ((gssUtility.getCookie(gssConstants.GSS_G_sess) == gssConstants.GSS_G_sess_Started) ||
					(gssUtility.getCookie(gssConstants.CookieName_Window_Status) != gssConstants.GSS_Window_Status_Inactive)) {
                        if (gssUtility.getCookie(gssConstants.CookieName_GssChatBoxAligned) != null) {
                            var rt = gssUtility.getCookie(gssConstants.CookieName_GssChatBoxAligned);
                            document.getElementById(gssConstants.HTML_chat_help).style.right = rt + "px";
                            document.getElementById(gssConstants.HTML_helpDiv).style.right = rt + "px";
                        }
                        document.getElementById(gssConstants.HTML_gssUIWrapper).style.display = 'block';
                    }
                    else {
                        document.getElementById(gssConstants.HTML_gssUIWrapper).style.display = 'none';
                    }
                }
                check_gss_active();
                $("#dummyContainer").click(function () {
                    document.getElementById("dummyContainer").style.display = 'none';
                });
                $("#dummyContainer").mouseenter(function () {
                    document.getElementById("dummyContainer").style.display = 'none';
                });
                $("#spnGSSheaderCenter").mousedown(function () {
                    return false;
                });

                $('#btnGSSClose').keydown(function (event) {
                    if (event.shiftKey && event.keyCode == 9) {
                    }
                    else if (event.keyCode == 9 || event.keyCode == 40) {
                        console.log('GSSOLBFocus');
                        var message = { name: 'GSSOLBFocus', focusMovedfromOLB: 'true' };
                        document.getElementById('IframeGSS').contentWindow.postMessage(message, '*');
                    }
                });

                var dm = document.getElementById(gssConstants.HTML_chat_help);
                dm.addEventListener('dragstart', drag_start, false);
                document.body.addEventListener('dragover', drag_over, false);
                document.body.addEventListener('drop', drop, false);
                document.body.addEventListener("dragend", function (event) {
                    document.getElementById(gssConstants.HTML_dummyContainer).style.display = 'none';
                    var isFirefox = typeof InstallTrigger !== 'undefined';
                    var standbyoffset = lastKnownCoordinate.split(',');
                    if (isFirefox != true) {
                        // reset the transparency
                        // event.target.style.opacity = "";
                        var jaba = '';
                        var offset = event.dataTransfer.getData("text").split(',');
                        var standbyoffset = lastKnownCoordinate.split(',');
                        //	lastKnownCoordinate=offset;
                        var adjustedLeft = (event.clientX + parseInt(offset[0], 10));
                        var adjustedTop = (event.clientY + parseInt(offset[1], 10));
                        var dm = document.getElementById(gssConstants.HTML_chat_help);
                        var dHeight = ($("#chat_help").offset().top - $(document).scrollTop());
                        if (event.clientY <= 30)
                            dm.style.top = 5 + 'px';
                        if (event.clientX <= 20)
                            dm.style.left = 5 + 'px';

                        if (event.clientY >= dHeight)
                            dm.style.top == (dHeight - 405) + 'px';

                        if (dHeight > 550) {
                            dm.style.top = 550 + 'px';
                        }

                        if (event.clientX >= ($(window).width()) - 300)
                            dm.style.left = ($(window).width() - 300) + 'px';
                    }
                    else {
                        // reset the transparency
                        // event.target.style.opacity = "";
                        var jaba = '';


                        var offset = event.dataTransfer.getData("text").split(',');
                        var standbyoffset = lastKnownCoordinate.split(',');
                        //	lastKnownCoordinate=offset;
                        var adjustedLeft = parseInt(standbyoffset[0]);
                        var adjustedTop = parseInt(standbyoffset[1]);
                        var dm = document.getElementById(gssConstants.HTML_chat_help);
                        var dHeight = ($("#chat_help").offset().top - $(document).scrollTop());
                        if (adjustedTop <= 30)
                            dm.style.top = 5 + 'px';
                        if (adjustedLeft <= 20)
                            dm.style.left = 5 + 'px';

                        if (adjustedTop >= dHeight)
                            dm.style.top == (dHeight - 405) + 'px';

                        if (dHeight > 550) {
                            dm.style.top = 550 + 'px';
                        }
                        if (adjustedLeft >= ($(window).width()) - 300)
                            dm.style.left = ($(window).width() - 300) + 'px';
                    }
                }, false);

            }

        };
    }

    angular
       .module('GSSModule')
       .controller('gssController', ['$document', '$timeout', 'GSSUtility', '$scope', '$sce', 'GssConstants', gssControllerFun]);

    function gssControllerFun($document, $timeout, gssUtility, $scope, $sce, gssConstants) {

        var vm = this;
        $scope.trustSrc = function (src) {
            return $sce.trustAsResourceUrl(src);
        }
        $scope.keydownforEsc = function () {
            var key = event.keyCode || event.which;
            if (key == 27) {
                vm.toggleHideAndSeek();
                $scope.$digest();
            }
        };


        vm.HideandSeek = 0;
        vm.InitialLoad = 0;
        vm.OpenHelp = function () {
            gssUtility.helpCenterUrl();
        };


        vm.toggleHideAndSeek = function (origin) {

            var keyboardDrag = 0;
            var dragImgHandle = document.getElementById("dragImg");
            dragImgHandle.addEventListener("keydown", function (eve) {
                //keyboardDrag=1; 
                if (eve.which == 13 || eve.which == 32) {
                    keyboardDrag = 1;
                    canStartDrag = 1;
                }
            }, true);
            dragImgHandle.addEventListener("focus", function (event) {
                canStartDrag = 1;
            }, true);

            dragImgHandle.addEventListener("blur", function (event) {
                keyboardDrag = 0;
            }, true);


            if (vm.HideandSeek == 0) {
                if (vm.InitialLoad == 0) {
                    vm.InitialLoad = 1;
                    $scope.currentProjectUrl = gssUtility.getGSSIFRAMEUrl();
                }

                vm.HideandSeek = 1;
                if (gssUtility.getCookie(gssConstants.GSS_G_sess) == gssConstants.GSS_Session_Ended) {

                    $scope.currentProjectUrl = gssUtility.getGSSIFRAMEUrl() + '&dummyVar=' + (new Date()).getTime();


                    //var iFrame = $document.find(gssConstants.GSS_IFRAME);
                    //iFrame.attr("src",iFrame.attr("src"));

                }
                document.getElementById(gssConstants.HTML_gssUIWrapper).style.display = "block";
                document.getElementById(gssConstants.HTML_chat_help).classList.remove("resetChatWindow");
                document.getElementById(gssConstants.HTML_chat_help).classList.add("chat_help_active");



                $timeout(function () {
                    document.getElementById(gssConstants.HTML_gssUIWrapper).classList.add("notransition");
                    document.getElementById(gssConstants.HTML_chat_help).classList.add("notransition");
                    document.getElementById(gssConstants.HTML_btnGSSClose).classList.add("icon-arrow_org");
                }, 200);
                $timeout(function () {

                    document.getElementById(gssConstants.HTML_chat_help).style.display = "block";
                    try {
                        $scope.$digest();
                    }
                    catch (e) {
                    }
                    document.getElementById(gssConstants.HTML_btnGSSClose).focus();
                }, 1);

                gssUtility.setCookie(gssConstants.CookieName_Window_Status, 'Max');
                gssUtility.setGSSWindowStatus('maximized');
                document.getElementById(gssConstants.HTML_btnGSSClose).focus();
                $(document).unbind('keydown');
                $(document).bind('keydown', function (e) { //set the keydown function as...
                    if (keyboardDrag == 0 && e.which != 27)
                        return;
                    var startingLeftPoint = $("#chat_help").offset().left;

                    var gbody = document.body,
                      ghtml = document.documentElement;

                    var visibleWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth || 0;
                    var visibleHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight || 0;
                    var dHeight = ($("#chat_help").offset().top - $(document).scrollTop()) + 63.875;
                    switch (e.which) {
                        //left     
                        case 27: vm.toggleHideAndSeek();
                            $scope.$digest();
                            break;

                        case 37: if (($("#chat_help").offset().left + 328) < $(window).width() && ($("#chat_help").offset().left + 328) > 354) {
                            var offset = $('#chat_help').offset();
                            $('#chat_help').css({
                                position: 'fixed',
                                left: offset.left - 40

                            });

                        }
                        else if (($("#chat_help").offset().left + 328) > $(window).width() && ($("#chat_help").offset().left + 328) > 354) {
                            var offset = $('#chat_help').offset();
                            $('#chat_help').css({
                                position: 'fixed',
                                left: offset.left - 40
                            });

                        }
                            if (gssUtility.getCookie(gssConstants.CookieName_Window_Status) == gssConstants.GSS_Window_Status_Maximise) {
                                e.preventDefault();
                            }
                            break;
                            //Right                  
                        case 39: if (($("#chat_help").offset().left + 281) < $(window).width()) {
                            $("#chat_help").animate({
                                left: '+=40'
                            }, 5, function () {

                            });
                        }
                            if (gssUtility.getCookie(gssConstants.CookieName_Window_Status) == gssConstants.GSS_Window_Status_Maximise) {
                                e.preventDefault();
                            }
                            break;
                            //up          
                        case 38:
                            if ((($("#chat_help").offset().top - $(document).scrollTop()) + 63.875) < visibleHeight &&
                            (($("#chat_help").offset().top - $(document).scrollTop()) + 63.875) > 85) {
                                var newTop = ($("#chat_help").offset().top - $(document).scrollTop()) - 40;
                                $('#chat_help').css({
                                    position: 'fixed',
                                    top: newTop
                                });
                            }
                            else if (dHeight > visibleHeight &&
                            dHeight > 85) {
                                var newTop = ($("#chat_help").offset().top - $(document).scrollTop()) - 40;
                                $('#chat_help').css({
                                    position: 'fixed',
                                    top: newTop
                                });

                            }
                            if (gssUtility.getCookie(gssConstants.CookieName_Window_Status) == gssConstants.GSS_Window_Status_Maximise) {
                                e.preventDefault();
                            }
                            break;
                            //down          
                        case 40:

                            if (dHeight < visibleHeight && dHeight < 200) {
                                $("#chat_help").animate({
                                    top: '+=40'
                                }, 5, function () {

                                });
                            }
                            else if (dHeight > visibleHeight && dHeight > 200) {
                                $("#chat_help").animate({
                                    top: '+=40'
                                }, 5, function () {

                                });

                            }
                            if (gssUtility.getCookie(gssConstants.CookieName_Window_Status) == gssConstants.GSS_Window_Status_Maximise) {
                                e.preventDefault();
                            }
                            break;

                    }
                });
                if (origin != gssConstants.GSS_AUTO) {
                    // SITECAT
                    try {
                        s.linkTrackVars = 'prop2,prop4,prop6,prop7,prop53,prop29,evar35,eVar8,prop8,prop40,eVar40,eVar90,prop24,events,contextData.appNameForSiteCat,contextData.uxNameForSiteCat,contextData.appName_PERS,contextData.uxName_PERS';
                        s.linkTrackEvents = '';
                        s.prop2 = 'olb gss';
                        s.prop4 = s.linkTrackVars;
                        s.prop6 = s.linkTrackVars;
                        s.prop7 = s.linkTrackVars;
                        s.eVar90 = s.prop29;

                        s.eVar35 = "gss button click";

                        s.eVar40 = (cd.currentPage ? cd.currentPage : s.pageName) + ':gss';
                        s.prop53 = 'gss button click';

                        s.events = 'event117';  //GSS Button Click
                        s.tl(this, 'o', 'gss button click', null, 'navigate');
                        s.linkTrackVars = "";
                        s.eVar40 = "";
                        s.prop2 = "";
                    }
                    catch (err) {
                        console.log('SiteCat-GSS_WidgetPopup-Error=' + err.message);
                    }
                }
                //END OF SITECAT

            }
            else {
                vm.HideandSeek = 0;

                document.getElementById(gssConstants.HTML_chat_help).classList.remove("chat_help_active");
                document.getElementById(gssConstants.HTML_chat_help).classList.add("resetChatWindow");
                document.getElementById(gssConstants.HTML_chat_help).style.top = '';
                document.getElementById(gssConstants.HTML_chat_help).style.left = '';
                document.getElementById(gssConstants.HTML_chat_help).style.bottom = '-475px';
                document.getElementById(gssConstants.HTML_gssUIWrapper).classList.remove("notransition");
                document.getElementById(gssConstants.HTML_chat_help).classList.remove("notransition");
                document.getElementById(gssConstants.HTML_gssUIWrapper).classList.add("transition");
                document.getElementById(gssConstants.HTML_chat_help).classList.add("transition");
                document.getElementById(gssConstants.HTML_btnGSSClose).classList.remove("icon-arrow_org");
                gssUtility.setCookie(gssConstants.CookieName_Window_Status, gssConstants.GSS_Window_Status_Miminize);
                gssUtility.setGSSWindowStatus('minimized');

                $(document).unbind('keydown');



                //SITECAT
                try {
                    s.linkTrackVars = 'prop2,prop4,prop6,prop7,prop53,prop29,evar35,eVar8,prop8,prop40,eVar40,eVar90,prop24,events,contextData.appNameForSiteCat,contextData.uxNameForSiteCat,contextData.appName_PERS,contextData.uxName_PERS';
                    s.linkTrackEvents = '';
                    s.prop2 = 'olb gss';
                    s.prop4 = s.linkTrackVars;
                    s.prop6 = s.linkTrackVars;
                    s.prop7 = s.linkTrackVars;
                    s.eVar90 = s.prop29;

                    s.eVar35 = 'gss window minimized';
                    s.eVar40 = (cd.currentPage ? cd.currentPage : s.pageName) + ':gss';   ///gssUtility.getCookie('G_lp');
                    s.prop53 = 'gss window minimized';
                    //   prop24=s.getPageName();
                    s.events = 'event118';        // GSS Button Minimize
                    s.tl(this, 'o', 'gss window minimized', null, 'navigate');
                    s.linkTrackVars = "";
                    s.eVar40 = "";
                    s.prop2 = "";
                }
                catch (err) {

                    console.log('SiteCat-fnGSSWidgetClose-Error=' + err.message);
                }
                ///END OF SITECAT

                window.setTimeout(function () {
                    document.getElementById(gssConstants.HTML_helpDiv).style.display = "block";
                    try {
                        $scope.$digest();
                    }
                    catch (e) { }
                    // window.setTimeout(function () {
                    document.getElementById(gssConstants.HTML_helpDiv).focus();
                    // }, 0);
                }, 100);

                window.setTimeout(function () {
                    document.getElementById(gssConstants.HTML_helpDiv.HTML_chat_help).style.display = "none";

                }, 250);

            }


        }


        window.addEventListener('message', function (evv) {
            try {
                if (evv.data.name == gssConstants.POSTMESSAGE_gssWindow && evv.data.windowStatus == gssConstants.POSTMESSAGE_close) {
                    vm.toggleHideAndSeek();
                    $scope.$digest();
                }
                else if (evv.data.sessionStatus == gssConstants.POSTMESSGE_SEESIONENDED) {

                    vm.toggleHideAndSeek();
                    $scope.$digest();
                }
            } catch (e) { }

        }, false);

        vm.handleDrag = function (ev) {
            var div = document.getElementById(gssConstants.POSTMESSAGE_close.HTML_chat_help);
            div.style.position = 'absolute';
            div.style.top = e.clientY + 'px';
            div.style.left = e.clientX + 'px';

        }
        if (gssUtility.getCookie(gssConstants.GSS_G_sess) == gssConstants.GSS_G_sess_Started) {
            if (gssUtility.getCookie(gssConstants.CookieName_Window_Status) == gssConstants.GSS_Window_Status_Maximise) {
                vm.toggleHideAndSeek(gssConstants.GSS_AUTO);
            }
        }
    }
})();;
(function () {
    angular
        .module('GSSModule').constant('GssTemplate', {        
            gss_Template: ['<div id="gssUIWrapper" ng-controller="gssController as vm">',
           '<button class="chat_button"  ng-click="vm.toggleHideAndSeek()" ng-show="vm.HideandSeek <= 0" id="btnGSSLaunch" value="Answers" role="button" aria-label="Answers, shows chat"><span style="width: 15%;margin-top: 2px; height: 17px; float: left;" aria-hidden="true"><svg  aria-hidden="true" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 26 24" style=" enable-background:new 0 0 26 24;/* width: 26px; *//* vertical-align: middle; *//* padding-right: 7px; */" xml:space="preserve" class="icon-answers"><style type="text/css">.st0{fill:#FFFFFF;}</style><title>icon-answers</title><g id="Layer_2"><g id="Layer_1-2"><circle class="st0" cx="13" cy="14.5" r="1"></circle><path class="st0" d="M13,12.2c-0.5,0-0.9-0.4-0.9-0.9v-0.1c-0.1-1.1,0.5-2.1,1.4-2.7l0.3-0.2c0.6-0.5,0.8-0.6,0.8-1.2c-0.1-0.8-0.8-1.3-1.6-1.3c-0.8-0.1-1.5,0.5-1.6,1.3c-0.1,0.5-0.5,0.8-1,0.8c-0.4,0-0.7-0.4-0.8-0.8c0.1-1.8,1.6-3.1,3.4-3c1.8-0.1,3.3,1.2,3.4,3c0,1.1-0.6,2-1.5,2.6L14.6,10c-0.7,0.5-0.7,0.8-0.7,1.2v0.2C13.9,11.8,13.5,12.2,13,12.2C13,12.2,13,12.2,13,12.2z"></path><path class="st0" d="M5,24c-0.6,0-1-0.4-1-1v-3H2c-1.1,0-2-0.9-2-2V2c0-1.1,0.9-2,2-2h22c1.1,0,2,0.9,2,2v16c0,1.1-0.9,2-2,2H12.3l-6.8,3.9C5.3,24,5.2,24,5,24z M2,2v16h2.9c0.6,0,1,0.4,1,1v2.3l5.5-3.2c0.2-0.1,0.3-0.2,0.5-0.1h12V2H2z"></path></g></g></svg></span><span style="width: 70%; font-size:18px;font-family:Helvetica Neue, Helvetica, Arial, sans-serif;margin-left: 5px;line-height: 28px;" aria-hidden="true">Answers</span> <span style="width: 15%;margin-top: 4px;height: 9px;float: right;"><svg aria-hidden="true" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 12.1 7.1"  xml:space="preserve" style="width: 15px;" class="icon-arrow"><style type="text/css">.st0{fill:#FFFFFF;}</style><title>icon-arrow</title><g id="Layer_2"><g id="Layer_1-2"><path class="st0" d="M6.1,7.1C5.5,7.1,5,6.7,5,6.1c0-0.3,0.1-0.6,0.3-0.8l5-5c0.4-0.4,1.1-0.4,1.5,0s0.4,1.1,0,1.5l-5,5C6.6,7,6.3,7.1,6.1,7.1z"></path><path class="st0" d="M6.1,7.1C5.8,7.1,5.5,7,5.3,6.8l-5-5c-0.4-0.4-0.4-1.1,0-1.5s1.1-0.4,1.5,0l5,5c0.4,0.4,0.4,1.1,0,1.5C6.6,7,6.4,7.1,6.1,7.1L6.1,7.1z"></path></g></g></svg></span></button>',
            '<div id="chat_help"  class="chat_help"    ng-keydown="keydownforEsc()" style="display:none">',
            '<div id="chat_help_header">    <span style="cursor: move; padding-left: 2px; font-size: 25px">',
            '<img draggable="true" role="button" src="/USB/Content/shared/images/icon-move.svg" tabindex="0" id="dragImg" aria-label="Drag Answer window" class="dragimage">',
            '</img></span> <span id="spnGSSheaderCenter" style="text-align:center;padding-left:45px;" focusable="false" ><svg focusable="false" class="icon-answers" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 26 24" style="enable-background:new 0 0 26 24;width: 30px;vertical-align: middle;padding-right: 7px;box-sizing: border-box;margin-top: -9px;" xml:space="preserve"><style type="text/css">	.st0{fill:#FFFFFF;}</style><title>icon-answers</title><g id="Layer_2"><g id="Layer_1-2"><circle class="st0" cx="13" cy="14.5" r="1"></circle><path class="st0" d="M13,12.2c-0.5,0-0.9-0.4-0.9-0.9v-0.1c-0.1-1.1,0.5-2.1,1.4-2.7l0.3-0.2c0.6-0.5,0.8-0.6,0.8-1.2c-0.1-0.8-0.8-1.3-1.6-1.3c-0.8-0.1-1.5,0.5-1.6,1.3c-0.1,0.5-0.5,0.8-1,0.8c-0.4,0-0.7-0.4-0.8-0.8c0.1-1.8,1.6-3.1,3.4-3c1.8-0.1,3.3,1.2,3.4,3c0,1.1-0.6,2-1.5,2.6L14.6,10c-0.7,0.5-0.7,0.8-0.7,1.2v0.2C13.9,11.8,13.5,12.2,13,12.2C13,12.2,13,12.2,13,12.2z"></path><path class="st0" d="M5,24c-0.6,0-1-0.4-1-1v-3H2c-1.1,0-2-0.9-2-2V2c0-1.1,0.9-2,2-2h22c1.1,0,2,0.9,2,2v16c0,1.1-0.9,2-2,2H12.3l-6.8,3.9C5.3,24,5.2,24,5,24z M2,2v16h2.9c0.6,0,1,0.4,1,1v2.3l5.5-3.2c0.2-0.1,0.3-0.2,0.5-0.1h12V2H2z"></path></g></g></svg><span class="answerId" role="heading" style="display:inline-block;vertical-align:middle;margin-top: -9px;line-height:0px;font-size: 18px;"><h5 class="answerId" role="heading" aria-level="2" >Answers</h5></span></span>',
            '<div id="imgClose" style="float:right;padding-right:5px;margin-top: 2px;cursor:pointer ">',
            '<button title="Hide Chat" ng-click="vm.toggleHideAndSeek()"  class="minimizeimage" id="btnGSSClose">',
            '<svg class="icon-arrow" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 12.1 7.1" style="enable-background:new 0 0 12.1 7.1;fill: #fff;width: 12px;" xml:space="preserve" focusable="false"  aria-hidden="true">',
            '<style type="text/css">.st0{fill:#FFFFFF;}</style><title>icon-arrow</title><g id="Layer_2"><g id="Layer_1-2"><path class="st0" d="M6.1,7.1C5.5,7.1,5,6.7,5,6.1c0-0.3,0.1-0.6,0.3-0.8l5-5c0.4-0.4,1.1-0.4,1.5,0s0.4,1.1,0,1.5l-5,5C6.6,7,6.3,7.1,6.1,7.1z"></path><path class="st0" d="M6.1,7.1C5.8,7.1,5.5,7,5.3,6.8l-5-5c-0.4-0.4-0.4-1.1,0-1.5s1.1-0.4,1.5,0l5,5c0.4,0.4,0.4,1.1,0,1.5C6.6,7,6.4,7.1,6.1,7.1L6.1,7.1z"></path></g></g></svg>',
            '</button></div></div>',
            '<div id="container"><div id="frameContainer">',
            '<iframe id="IframeGSS" ng-src="{{trustSrc(currentProjectUrl)}}" width="280px" height="405px" frameBorder="0" target="contents" aria-label="Answers"></iframe>',
            '</div><div id="dummyContainer" style="display:none;"></div></div>',
        '<div id="chat_help_footer"> <div style="font-size: 12px;padding-left:10px;display: inline-block;line-height: 0px;margin-top: -1px;"  aria-hidden="true"><p><a href="#" style="font-size:12px;" ng-click="vm.OpenHelp();" id="helpCenterId">Visit the <span>Help Center</span></a></p></div> <div style="font-size: 12px;padding-left:25px;line-height: 0px;display: inline-block;color: #0c2074;margin-top: -3px;"><p style="color: #0c2074;">Secure Connection<span class="sr-only">Lock Icon</span><svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 20 25" style="enable-background:new 0 0 20 25;" xml:space="preserve" class="icon-secure"><style type="text/css">.st2{fill:#282E6E;} </style><title>icon-secure</title> <g id="Layer_2"><g id="Layer_1-2"><path class="st2" d="M2,10h16c0.6,0,1,0.4,1,1v12c0,0.6-0.4,1-1,1H2c-0.6,0-1-0.4-1-1V11C1,10.4,1.4,10,2,10z"></path><path class="st2" d="M18,25H2c-1.1,0-2-0.9-2-2V11c0-1.1,0.9-2,2-2h16c1.1,0,2,0.9,2,2v12C20,24.1,19.1,25,18,25z M2,11v12h16V11H2z"></path><path class="st2" d="M16,10.4h-2V6c0-2.2-1.8-4-4-4S6,3.8,6,6v4.4H4V6c0-3.3,2.7-6,6-6s6,2.7,6,6V10.4z"></path></g></g></svg></p></div> </div>',
        '</div></div>']
        });
})();;
(function () {
    angular
        .module('GSSModule').constant('GssConstants', {
                CCAP_Timeout: 450,
                CCAP_hdWarningTimeout: 30,
                CCAP_hdLogouturl: "/Auth/LogoutConfirmation",
                CCAP_hdKeepaliveurl: "/USB/PingImage.ashx",
                AFTOKEN: "[[AFTOKEN]]",
                EMAILUS: "EmailUs",
                ACTIVATEYOURCHECKCARD: "ActivateYourCheckCard",
                FINDPASTCHECKORDEPOSITSLIPIMAGES: "FindPastCheckorDepositSlipImages",
                CCP_RequestPastStatements: "RequestPastStatements",
                CCP_ReportCardAsLostorStolen: "ReportCardAsLostorStolen",
                CC_OrderChecks: "OrderChecks",
                POSTMESSGE_KMIURL: "kmiurl",
                POSTMESSGE_DOTCOMURL: "dotcomUrl",
                POSTMESSGE_SEESIONENDED: "ended",
                POSTMESSGE_SEESIONSTRTED: "started",
                POSTMESSAGE_gssWindow: "gssWindow",
                POSTMESSAGE_close: "close",
                GSS_IFRAME: "IframeGSS",
                GSS_G_on: "G_on",
                GSS_T: "T",
                GSS_G_sess: "G_sess",
                GSS_G_sess_Started:"s",
                GSS_Session_Ended: "e",
                GSS_Session_Na: "Na",
                GSS_Session_Wt: "Wt",
                GSS_G_elg:"G_elg",
                GSS_GSSChaturl: "GSSChaturl",
                GSS_riblpid: "riblpid",
                CookieName_Window_Status: "G_stat",
                CookieName_GssChatBoxAligned: "G_alg",
                GSS_Window_Status_Maximise: "Max",
                GSS_Window_Status_Miminize: "Min",
                GSS_Window_Status_Inactive: "N",
                GSS_AUTO: "auto",
                URL_CCAP_OrderChecks: "USB/[[AFTOKEN]]/OrderCheck/Index/?Index=&LinkText=Check",
                URL_CCAP_RequestPastStatements: "/CCAP/[[AFTOKEN]]/RequestPastStatements",
                URL_CCAP_ReportCardAsLostorStolen: "/CCAP/[[AFTOKEN]]/ReportCardAsLostorStolen",
                URL_CCAP_FindPastCheckOrDepositSlipImages: "/CCAP/[[AFTOKEN]]/FindPastCheckOrDepositSlipImages",
                URL_CCAP_LandingPage: "/CCAP/LandingPage.aspx",
                URL_CCAP_ActivateCheckCard: "/CCAP/[[AFTOKEN]]/ActivateCheckCard",
                URL_CCAP_EMAILUS: "/CCAP/[[AFTOKEN]]/EmailUs",
                URL_HelpCenter_aspx: "/HelpCenter.aspx",
                URL_USB_BASEPATH: "/USB/",
                HTML_gssUIWrapper: "gssUIWrapper",
                HTML_dummyContainer: "dummyContainer",
                HTML_chat_help: "chat_help",
                HTML_btnGSSClose: "btnGSSClose",
                HTML_helpDiv: "btnGSSLaunch"            
        });
})();;
/*
 Custom Cobrowse UI with hard coded aria labels and html content.  Does not rely on content:before css to supply the content.
*/

(function () {


    // Detect ie
    var ie = document.documentMode && window.XDomainRequest,
        iever = ie ? document.documentMode : 0,
        ie9_10 = ie && (iever == 9 || iever == 10),
        ie8 = ie && iever <= 8;

    var screenshare, agentvideo, ssnbutton;

    // Presence integration
    function presenceFire(eventname, eventdata) {
        // Fire event on the agent side
        if (GLANCE.Presence && GLANCE.Presence.Visitor && GLANCE.Presence.Visitor.instance)
            GLANCE.Presence.Visitor.instance.fire(eventname, eventdata);
    }

    // DOM Element utility methods --------------------------------------------------------
    function getElement(sel) {
        var selem, elem = sel.match(/^#/) ? document.getElementById(sel.substr(1)) : ((selem = elem.querySelectorAll(sel)) ? selem[0] : null);
        if (!elem)
            return null;

        function GElement(elem) {
            this.elem = elem;
            this.show = function (b) {
                if (b === undefined) b = true;
                var oldclass = b ? "glance_hide" : "glance_show",
                    newclass = b ? "glance_show" : "glance_hide",
                    re = new RegExp(oldclass, "g");
                // In IE9 setting class triggers a dom mutation event even if it's a no-op
                if (elem.className.match(new RegExp(newclass, "g")))
                    return;
                if (!elem.className.match(re))
                    this.addClass(newclass);
                else
                    elem.className = elem.className.replace(re, newclass);
            }
            this.hide = function () {
                this.show(false);
            }
            this.setDimensions = function (width, height) {
                elem.style["width"] = width + "px";
                elem.style["height"] = height + "px";
            }
            this.getElement = function (selector) {
                return new GElement(elem.querySelectorAll(selector)[0]);
            }
            this.setClass = function (cls) {
                elem.className = cls;
            }
            this.addClass = function (cls) {
                if (typeof elem.className === "string" && // for SVG elements, className is type SVGAnimatedString
                    elem.className.match(new RegExp("\\b" + cls + "\\b", "g")))
                    return;
                elem.className += (" " + cls);
            }
            this.removeClass = function (cls) {
                if (elem.className === cls) {
                    elem.className = "";
                    return;
                }
                var re = new RegExp("\\b" + cls + "\\b", "g");
                elem.className = elem.className.replace(re, " ");
            }
            this.addEvent = function (evt, handler, stopprop) {
                elem.addEventListener(evt, function (e) {
                    handler(e);
                    if (stopprop !== false) { // true or undefined
                        e.preventDefault();
                        e.stopPropagation();
                    }
                });
            }

            this.getAttr = function (attrname) {
                return elem.getAttribute(attrname);
            }
            this.setAttr = function (attrname, attrval) {
                elem.setAttribute(attrname, attrval);
            }
            this.html = function (h) {
                if (h)
                    elem.innerHTML = h;
                return elem.innerHTML;
            }

            // Accessibility
            // Make a dialog box which handles tab to set focus, esc key to cancel
            this.makeDialog = function (closebutton, onclose) {
                var self = this;

                function closeDialog() {
                    onclose();
                    self.previousFocus.focus();
                }
                this.setAttr("role", "dialog");
                elem.tabIndex = 0; // so it is focusable
                this.handleKey(27 /* ESC */, "", closeDialog);
                getElement(closebutton).addEvent("click", closeDialog);

                // Once focus is in the dialog, trap it there by preventing tab away from first and last input
                // Also give each a and input a tabIndex so it can get focus
                var dialogelements = elem.querySelectorAll("a, input, button");
                if (dialogelements.length >= 1) {
                    (new GElement(dialogelements[0])).trapFocus(true);
                    for (var n = 0; n < dialogelements.length; n++)
                        dialogelements[n].tabIndex = 0;
                    (new GElement(dialogelements[n - 1])).trapFocus(false);
                }
            }
            this.ariaLabel = function () {
                // Create a hidden label for the eleemnt, and a aria-labelledby attribute
                // that points to it.
                var label = document.createElement("div");
                label.className = "glance_hide";
                label.id = elem.id + "_al";
                elem.appendChild(label);
                this.setAttr("aria-labelledby", label.id);
            }
            this.showDialog = function () {
                this.previousFocus = document.activeElement;
                this.show();
                this.focus();
            }
            this.focus = function () {
                elem.focus();
            }
            this.trapFocus = function (first) {
                this.handleKey(9 /* TAB */, first ? "shift" : "", function () { });
            }
            this.handleKey = function (keyCode, modifier, handler) {
                this.addEvent("keydown", function (e) {
                    var modified = e["shiftKey"] || e["ctrlKey"] || e["altKey"];
                    if (e.keyCode === keyCode && ((modifier && e[modifier + "Key"]) || (!modifier && !modified))) {
                        handler();
                        e.preventDefault(); // only if key matches
                        e.stopPropagation();
                    }
                }, false);
            }
        }

        return new GElement(elem);
    }

    function getDocument() {

        function GDocument() {
            var doc = document;

            this.onLoad = function (fn) {
                doc.readyState.match(/uninitialized|loading/) ? doc.addEventListener("DOMContentLoaded", fn) : fn();
            }
        }

        return new GDocument();
    }



    // UIState -------------------------------------------------------------

    var UIState = {

        EXPANDED: "expanded",
        BOXSTATE: "boxstate",
        RCENABLED: "rcenabled",

        set: function (prop, val) {
            if (GLANCE.Cobrowse.Visitor.inSession())
                GLANCE.Cobrowse.Visitor.setCookieValue(prop, val);
        },

        get: function (prop) {
            return GLANCE.Cobrowse.Visitor.inSession() ? GLANCE.Cobrowse.Visitor.getCookieValue(prop) : null;
        }
    }

    // Confirmation --------------------------------------------------------

    /**
     * @constructor
     */
    function Confirmation() {
        this.confirm = getElement('#glance_confirm');
        this.scrim = getElement('#glance_scrim');

        var self = this;
        getElement('#glance_yes').addEvent('click', function () {
            self.hide();
            self.onYes();
        });

        this.confirm.makeDialog("#glance_no", function () {
            self.hide();
            self.onNo();
        });
    }

    Confirmation.prototype.hide = function () {
        this.confirm.hide();
        this.scrim.hide();
        this.confirm.previousFocus.focus();
    }

    Confirmation.prototype.show = function (msgClass, onYes, onNo) {
        this.onYes = onYes;
        this.onNo = onNo ? onNo : function () { };

        var confmsg = getElement('#glance_confirm_msg');

        switch (msgClass) {
            case "glance_confirm_rc":
                confmsg.elem.innerHTML = "Allow the agent to take control?";
                break;
            default:

        }
        confmsg.setClass(msgClass);

        // Must show the confirmation message in order to see effects of setting className (at least on safari)
        this.confirm.showDialog();

        var msgtext = getComputedStyle(confmsg.elem, ":before").getPropertyValue("content");

        this.scrim.show();
    }

    // Screenshare ---------------------------------------------------------

    /**
     * @constructor
     */
    function Screenshare() {
        this.view = getElement('#glance_ssview');
        this.scrim = getElement('#glance_scrim');
    }

    Screenshare.prototype.show = function (show) {
        var b = (show.state !== "ended" && !show.paused);
        this.view.show(b);
        this.scrim.show(b);
    }

    Screenshare.prototype.viewerinfo = function (v) { }

    Screenshare.prototype.pause = function () {
        this.show({
            state: "continued",
            paused: true
        });
    }

    Screenshare.prototype.resume = function () {
        this.show({
            state: "continued",
            paused: false
        });
    }

    // AgentVideo ---------------------------------------------------------

    /**
     * @constructor
     */
    function AgentVideo() {
        this.iframe = getElement("#glance_agentvideo");
    }

    AgentVideo.prototype.setDims = function () {
        // Adjust iframe width to match width of parent's content box, and adjust height according to video aspect ratio
        var iframeparent = this.iframe.elem.parentElement;
        var parentstyle = getComputedStyle(iframeparent);
        var framewidth = iframeparent.scrollWidth - (parseInt(parentstyle.paddingLeft) + parseInt(parentstyle.paddingRight)); // iframe.getBoundingClientRect()
        var aspectratio = (this.params.width || 320) / (this.params.height || 240);
        var frameheight = Math.ceil(framewidth / aspectratio);
        this.iframe.setDimensions(framewidth, frameheight);
    }

    AgentVideo.prototype.show = function (ss) {

        this.params = ss.params;

        if (ss.paused)
            return;

        if (ss.state !== "ended")
            this.videoOn(ss.state === "new");
        else
            this.videoOff();
    }

    AgentVideo.prototype.videoOn = function (expand) {
        // Set video visibility first so iframe has a non-zero width
        ssnbutton.setBoxState(SessionButton.BOXSTATE_VIDEO);
        if (expand)
            ssnbutton.setExpanded(true);
        this.setDims();
    }

    AgentVideo.prototype.videoOff = function () {
        ssnbutton.setBoxState(SessionButton.BOXSTATE_JOINED);
        ssnbutton.setExpanded(false);
    }

    AgentVideo.prototype.viewerinfo = function (v) {
        (false && window.console && window.console.log && window.console.log("UI:", "Viewer info:" + JSON.stringify(v)));
    }

    AgentVideo.prototype.pause = function () {
        this.videoOff();
    }

    AgentVideo.prototype.resume = function () {
        this.videoOn(true);
    }

    // SessionButon --------------------------------------------------------

    var IN_SESSION = 1,
        NOT_IN_SESSION = 2,
        SESSION_STARTING = 3,
        SESSION_BLURRED = 4,
        IN_SESSION_DISCON = 5;
    var buttonStateClasses = ["", "in_session", "not_in_session", "session_starting", "in_session_blurred", "in_session discon"];

    /**
     * @constructor
     */
    function SessionButton() {

        if (!document.body)
            return;

        var buttonhtml;
        this.button = document.createElement("div");
        this.button.id = "glance_cobrowse_btn";
        //this.button.tabIndex = 0; // make focusable
        //this.button.setAttribute("role", "");
        //this.button.setAttribute("aria-label", "Start cobrowsing");

        buttonhtml = SessionButton.buttonHTML;

        this.button.innerHTML = SessionButton.buttonHTML;

        document.body.appendChild(this.button);

        this.button = getElement("#glance_cobrowse_btn");
        this.button.setClass("glance_ui_36");
        this.setState(NOT_IN_SESSION);

        //#ifndef _GLANCE_CUSTOMUI
        //    // If background color of glance_start_label has been customized (ie it is not #0d475d) and the background
        //    // of the start/stop buttons has not been customized yet, make the start/stop buttons transparent
        //    if (window.getComputedStyle(getElement("#glance_show_btn").elem).backgroundColor === "#2f6975" &&
        //        window.getComputedStyle(getElement("#glance_start_label").elem).backgroundColor !== "#0d475d") {
        //        getElement("#glance_show_btn").elem.style.backgroundColor = "transparent";
        //        getElement("#glance_stop_btn").elem.style.backgroundColor = "transparent";
        //    }
        //#endif

        this.terms = getElement("#glance_terms");
        this.startlabel = getElement("#glance_start_label");
        this.scrim = getElement('#glance_scrim');
        this.msgbox = getElement("#glance_msg_box");
        this.border = getElement("#glance_border");

        this.addEventListeners();

        this.confirmation = new Confirmation();
    }

    SessionButton.buttonHTML =
       "<div id='glance_scrim' class='glance_dim glance_hide'></div>" +
        "<div id='glance_ssview' class='glance_hide' glance_cobrowse_suppress='1'><iframe scrolling='no' id='glance_screenshare' data-no-cobrowse-content='1' glance_cobrowse_suppress='1'></iframe></div> " +
        "<div id='glance_start_label' class='glance_ui glance_ui_titlebar'>" +
        "<div id='glance_show_btn' tabIndex='0' role='button'>Cobrowse</div>" +
        "<div id='glance_in_session'>" +
        "<div id='glance_stop_btn' class='glance_ishow' tabIndex='0' role='button'>Stop cobrowsing</div>" +
		"<div class='separaterClass'></div>" +
        "<div id='glance_expand' style='margin-top: 7px;' class='glance_closed' tabIndex='0' role='button' aria-expanded='false' aria-label='Co-browse'>" +
		"</div>" +
        "</div>" +
        "</div>" +
        "<div id='glance_ssnkey_box' class='glance_hide glance_ui'>" +
        "<iframe id='glance_agentvideo' data-no-cobrowse-content='1'></iframe>" +
        "<div style='font-size: 18px;' id='glance_ssn_starting'>Establishing cobrowse session...</div>" +
        "<div id='glance_keyless_prompt'>Please wait for the agent to connect</div>" +
        "<div style='font-size: 18px;' id='glance_key_prompt'>Give your banker the code below to begin cobrowsing.</div>" +
        "<div id='glance_ssn_key'></div>" +
        "<div id='glance_ssn_info'></div>" +
        "<a href='https://answers.usbank.com/GSSChat/CoBrowseAgreement'><div id='glance_tagline'><a class='tandcunderline' id='glance_terms_link'>Terms and conditions</a></div></a>" +
		"<button id='glance_yes'></button><button id='glance_no'></button></div>" +
        "</div>" +
        "<div id='glance_msg_box' class='glance_hide glance_ui'><p id='glance_msg'></p><button id='glance_msg_ok'></button></div>" +
        "<div id='glance_confirm' class='glance_hide glance_ui'><p id='glance_confirm_msg'></p></div>" +
        "<div id='glance_terms'class='glance_hide glance_ui'>" +
        "<h2 role='heading' aria-level='2' id='glance_terms_title'>Start cobrowsing</h2><p id='glance_terms_text'>Would you like to share your browser with your banker?</p>" +
        "<button id='glance_accept'>Accept</button>" +
		"<button id='glance_decline'>Decline</button><br/>" +
        "<a id='glance_terms_link2' onclick='glanceCbrUtility.openTerms();'>Terms and conditions</a>" +
        "</div>" +
        "<div id='glance_border' " + (ie9_10 ? "class='ie9'" : "") + "></div>";

    SessionButton.prototype.showTerms = function (show, startparams) {
        this.startparams = startparams;
        this.scrim.show(show);

        // Terms and conditions must be displayed even when button is "not_in_session"
        this.terms.elem.style.display = (show ? "block" : "none");
        this.scrim.elem.style.display = (show ? "block" : "");
        if (show)
            this.terms.showDialog();
        else
            this.terms.hide();
    },

        SessionButton.prototype.focus = function () {
            this.button.focus();
        },

        SessionButton.prototype.showDisconnected = function (discon) {
            if (discon)
                this.setState(IN_SESSION_DISCON);
            else if (this.state === IN_SESSION_DISCON)
                this.setState(IN_SESSION);
        },

        SessionButton.prototype.addEventListeners = function () {
            var self = this,
                n;

            getElement("#glance_show_btn").addEvent("click", function (event) {
                GLANCE.Cobrowse.Visitor.startSession();
            });

            getElement("#glance_stop_btn").addEvent("click", function (event) {
                GLANCE.Cobrowse.Visitor.stopSession();
            });

            getElement("#glance_expand").addEvent("click", function (event) {
                self.setExpanded(!UIState.get(UIState.EXPANDED));
            });
            getElement("#glance_expand").ariaLabel();

            getElement("#glance_accept").addEvent("click", function (event) {
                presenceFire("terms", {
                    "status": "accepted"
                });
                self.showTerms(false);
                GLANCE.Cobrowse.Visitor.startSession(ssnbutton.startparams);
            });

            var termslink = getElement("#glance_terms_link");
            termslink.addEvent("click", function () {
                var termsdata = self.terms.getElement("#glance_terms .data");
                var termsUrl = "https://answers.usbank.com/GSSChat/CoBrowseAgreement";
                window.open(termsUrl, "_blank", "width=800,height=800,top=10,left=10,scrollbars=1");
            });

            this.terms.makeDialog("#glance_decline", function () {
                self.showTerms(false);
                presenceFire("terms", {
                    "status": "declined"
                });
            });
            this.msgbox.makeDialog("#glance_msg_ok", function () {
                self.hideMessage();
            });
        }
    SessionButton.prototype.setState = function (s) {
        this.state = s;
        for (var n = buttonStateClasses.length - 1; n >= 0; n--) // remove the two-word classes first
            this.button.removeClass(buttonStateClasses[n]);
        this.button.addClass(buttonStateClasses[s]);
    };

    SessionButton.prototype.showStarting = function () {
        (false && window.console && window.console.log && window.console.log("UI:", "SessionButton.showStarting"));
        this.hideMessage(); // hide any message left over from previous start attempt
        this.showTerms(false); // in case terms are open
        this.setState(SESSION_STARTING);
        this.setBoxState(SessionButton.BOXSTATE_STARTING);
        this.setExpanded(true);
    }

    SessionButton.prototype.showInSession = function () {
        this.setState(IN_SESSION);

        // Get rcenabled from the cookie instead of waiting for server to send it so border can be displayed
        // with correct color from the start
        if (UIState.get(UIState.RCENABLED))
            this.border.addClass("glance_rcenabled");
        getElement("#glance_ssn_key").html(GLANCE.Cobrowse.Visitor.getKey());

        this.setBoxState(UIState.get(UIState.BOXSTATE));
        this.setExpanded(UIState.get(UIState.EXPANDED));
    };

    SessionButton.BoxStates = ["starting", "integrated", "keyed", "joined", "video"];
    SessionButton.BOXSTATE_STARTING = 0;
    SessionButton.BOXSTATE_INTEGRATED = 1;
    SessionButton.BOXSTATE_KEYED = 2;
    SessionButton.BOXSTATE_JOINED = 3;
    SessionButton.BOXSTATE_VIDEO = 4;

    SessionButton.prototype.setBoxState = function (s) {
        var ssnkeybox = getElement("#glance_ssnkey_box");
        SessionButton.BoxStates.forEach(function (c) {
            ssnkeybox.removeClass(c);
        });
        ssnkeybox.addClass(SessionButton.BoxStates[s]);
        UIState.set(UIState.BOXSTATE, s);

        if (s == SessionButton.BOXSTATE_JOINED)
            getElement("#glance_ssn_info").elem.innerHTML = "You're sharing your browser.";
    }

    SessionButton.prototype.showJoinPrompt = function () {
        // Choose prompt depending on whether session key is an integrated visitorid
        this.setBoxState(GLANCE.Cobrowse.Visitor.isRandomKey() ? SessionButton.BOXSTATE_KEYED : SessionButton.BOXSTATE_INTEGRATED);
        this.setExpanded(true);
    }

    SessionButton.prototype.showSessionStopped = function () {
        this.setExpanded(false);
        this.setState(NOT_IN_SESSION);
    };

    SessionButton.prototype.showMessage = function (msg) {
        this.scrim.show();
        this.msgbox.showDialog();
        this.msgbox.getElement("#glance_msg").html(msg);
    }

    SessionButton.prototype.hideMessage = function () {
        this.msgbox.hide();
        this.msgbox.html("");
        this.scrim.hide();
    }

    SessionButton.prototype.setExpanded = function (exp) {
        (exp ? this.button.addClass : this.button.removeClass).call(this.button, "expanded");
        getElement("#glance_expand").setAttr("aria-expanded", exp);
        UIState.set(UIState.EXPANDED, exp);
    }

    SessionButton.prototype.show = function (show) {
        this.startlabel.elem.style.display = (show ? "block" : "");
    }

    SessionButton.prototype.toggle = function () {
        this.show(this.startlabel.elem.style.display === "");
    }

    function initUI() {


        if (getElement("#glance_cobrowse_btn"))
            return;
        ssnbutton = new SessionButton();

        GLANCE.Cobrowse.Visitor.addEventListener("agents", function (agentinfo) {
            // first agent has joined, hide session key message box
            if (UIState.get(UIState.BOXSTATE) < SessionButton.BOXSTATE_JOINED) {
                ssnbutton.setBoxState(SessionButton.BOXSTATE_JOINED);
                ssnbutton.setExpanded(false);
            }
        });

        GLANCE.Cobrowse.Visitor.addEventListener("reverseconfirm", function (ss) {
            ssnbutton.confirmation.show("glance_confirm_show", function () {
                ss.accept();
            }, function () {
                ss.decline();
            });
        });

        GLANCE.Cobrowse.Visitor.addEventListener("reverseended", function () {
            // Hide the reverse screenshare confirmation message box if it is still being displayed
            if (getElement('#glance_confirm_msg').elem.className.includes("glance_confirm_show"))
                ssnbutton.confirmation.hide();
        });

        function getScreenshare(screenshareView) {
            switch (screenshareView) {
                case "glance_screenshare":
                    return screenshare || (screenshare = new Screenshare());
                case "glance_agentvideo":
                    return agentvideo || (agentvideo = new AgentVideo());
            }
        }

        GLANCE.Cobrowse.Visitor.addEventListener("sessionstarting", function () {
            ssnbutton.showStarting();
            return true;
        });

        GLANCE.Cobrowse.Visitor.addEventListener("sessionstart", function () {
            ssnbutton.focus(); // for screen reader
            ssnbutton.hideMessage();
            ssnbutton.showJoinPrompt();
        });

        GLANCE.Cobrowse.Visitor.addEventListener("sessioncontinue", function () {
            ssnbutton.showInSession();
        });

        GLANCE.Cobrowse.Visitor.addEventListener("statereceived", function () {
        });

        GLANCE.Cobrowse.Visitor.addEventListener("sessionend", function () {
            ssnbutton.showSessionStopped();
        });

        GLANCE.Cobrowse.Visitor.addEventListener("error", function (err) {
            if (console && console.log) console.log("Error:", err.msg, err.params);
            var msg = err.msg; // default message
            switch (err.code) {
                case "conndrop":
                    // Failed to connect or lost connection to the session server
                    msg = "Could not connect to server <em>" + err.params.server + "</em>";
                    break;
                case "service":
                    // Failed to provision or lookup the session
                    msg = "Unable to connect to Glance";
                    break;
            }
            ssnbutton.showMessage(msg);
        });

        GLANCE.Cobrowse.Visitor.addEventListener("screenshare", function (ss) {
            getScreenshare(ss.screenshareView).show(ss);
        });

        GLANCE.Cobrowse.Visitor.addEventListener("screensharepaused", function (ss) {
            getScreenshare(ss.screenshareView).pause(ss);
        });

        GLANCE.Cobrowse.Visitor.addEventListener("screenshareresumed", function (ss) {
            getScreenshare(ss.screenshareView).resume(ss);
        });

        GLANCE.Cobrowse.Visitor.addEventListener("viewerinfo", function (v) {
            getScreenshare(v.screenshareView).viewerinfo(v);
        });

        GLANCE.Cobrowse.Visitor.addEventListener("blur", function () {
            ssnbutton.setState(SESSION_BLURRED);
            ssnbutton.show(false); // in case button was "shown"
            ssnbutton.border.hide();
        });

        GLANCE.Cobrowse.Visitor.addEventListener("focus", function () {
            ssnbutton.showInSession();
            ssnbutton.border.show();
        });

        GLANCE.Cobrowse.Visitor.addEventListener("rcrequested", function (rc) {
            function enableRC(enable) {
                return function () {
                    enable ? rc.accept() : rc.decline();
                }
            }

            ssnbutton.confirmation.show("glance_confirm_rc", enableRC(true), enableRC(false));
        });

        GLANCE.Cobrowse.Visitor.addEventListener("confirm", function (params) {
            ssnbutton.confirmation.show("glance_confirm_" + params["confirm"], params.accept);
        });

        GLANCE.Cobrowse.Visitor.addEventListener("rc", function (e) {
            (e.enabled ? ssnbutton.border.addClass : ssnbutton.border.removeClass).call(ssnbutton.border, "glance_rcenabled");

            // Cache rc enabled state in the cookie for quick access on next page
            UIState.set(UIState.RCENABLED, e.enabled);
        });

        GLANCE.Cobrowse.Visitor.addEventListener("connection", function (e) {
            ssnbutton.showDisconnected(e.status === "reconnecting");
        });

        GLANCE.Cobrowse.Visitor.addEventListener("urlstartwarning", function (w) {
            ssnbutton.confirmation.show("glance_confirm_xd", w.accept, w.decline);
        });

        // EXPORTS
        window.GLANCE.Cobrowse.VisitorUI.showTerms = function () { ssnbutton.showTerms(true); }
    }

    if (!ie8) {
        getDocument().onLoad(function () {
            // Call initUI once loader or visitor script is loaded
            if (window.GLANCE && GLANCE.Cobrowse && GLANCE.Cobrowse.Visitor)
                initUI();
            else
            {
                if (getElement("#cobrowsescript")) {//PRJ23878 - check introduced while flow coming from APPLY -> applyMM in IE11.
                    getElement("#cobrowsescript").addEvent("load", initUI);
                }
            }
        });
    }
})();


var glanceCbrUtility = (function () {
    var openTermsImpl = function () {
        var termsUrl = "https://answers.usbank.com/GSSChat/CoBrowseAgreement";
        window.open(termsUrl, "_blank", "width=800,height=800,top=10,left=10,scrollbars=1");
    }
    return {
        openTerms: openTermsImpl
    };
})();
;
/*
 A JavaScript implementation of the SHA family of hashes, as
 defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding
 HMAC implementation as defined in FIPS PUB 198a

 Copyright Brian Turek 2008-2016
 Distributed under the BSD License
 See http://caligatio.github.com/jsSHA/ for more information

 Several functions taken from Paul Johnston
*/
'use strict'; (function (X) {
    function C(f, b, c) {
        var d = 0, a = [], k = 0, g, e, n, h, m, r, t, q, v = !1, u = [], w = [], x, y = !1, z = !1; c = c || {}; g = c.encoding || "UTF8"; x = c.numRounds || 1; n = J(b, g); if (x !== parseInt(x, 10) || 1 > x) throw Error("numRounds must a integer >= 1"); if ("SHA-1" === f) m = 512, r = K, t = Y, h = 160, q = function (b) { return b.slice() }; else if (0 === f.lastIndexOf("SHA-", 0)) if (r = function (b, d) { return L(b, d, f) }, t = function (b, d, c, a) {
        var l, k; if ("SHA-224" === f || "SHA-256" === f) l = (d + 65 >>> 9 << 4) + 15, k = 16; else if ("SHA-384" === f || "SHA-512" === f) l = (d + 129 >>>
        10 << 5) + 31, k = 32; else throw Error("Unexpected error in SHA-2 implementation"); for (; b.length <= l;) b.push(0); b[d >>> 5] |= 128 << 24 - d % 32; d = d + c; b[l] = d & 4294967295; b[l - 1] = d / 4294967296 | 0; c = b.length; for (d = 0; d < c; d += k) a = L(b.slice(d, d + k), a, f); if ("SHA-224" === f) b = [a[0], a[1], a[2], a[3], a[4], a[5], a[6]]; else if ("SHA-256" === f) b = a; else if ("SHA-384" === f) b = [a[0].a, a[0].b, a[1].a, a[1].b, a[2].a, a[2].b, a[3].a, a[3].b, a[4].a, a[4].b, a[5].a, a[5].b]; else if ("SHA-512" === f) b = [a[0].a, a[0].b, a[1].a, a[1].b, a[2].a, a[2].b, a[3].a, a[3].b, a[4].a,
        a[4].b, a[5].a, a[5].b, a[6].a, a[6].b, a[7].a, a[7].b]; else throw Error("Unexpected error in SHA-2 implementation"); return b
        }, q = function (b) { return b.slice() }, "SHA-224" === f) m = 512, h = 224; else if ("SHA-256" === f) m = 512, h = 256; else if ("SHA-384" === f) m = 1024, h = 384; else if ("SHA-512" === f) m = 1024, h = 512; else throw Error("Chosen SHA variant is not supported"); else if (0 === f.lastIndexOf("SHA3-", 0) || 0 === f.lastIndexOf("SHAKE", 0)) {
            var F = 6; r = D; q = function (b) { var f = [], a; for (a = 0; 5 > a; a += 1) f[a] = b[a].slice(); return f }; if ("SHA3-224" ===
            f) m = 1152, h = 224; else if ("SHA3-256" === f) m = 1088, h = 256; else if ("SHA3-384" === f) m = 832, h = 384; else if ("SHA3-512" === f) m = 576, h = 512; else if ("SHAKE128" === f) m = 1344, h = -1, F = 31, z = !0; else if ("SHAKE256" === f) m = 1088, h = -1, F = 31, z = !0; else throw Error("Chosen SHA variant is not supported"); t = function (b, f, a, d, c) {
                a = m; var l = F, k, g = [], e = a >>> 5, h = 0, p = f >>> 5; for (k = 0; k < p && f >= a; k += e) d = D(b.slice(k, k + e), d), f -= a; b = b.slice(k); for (f %= a; b.length < e;) b.push(0); k = f >>> 3; b[k >> 2] ^= l << 24 - k % 4 * 8; b[e - 1] ^= 128; for (d = D(b, d) ; 32 * g.length < c;) {
                    b = d[h % 5][h /
                    5 | 0]; g.push((b.b & 255) << 24 | (b.b & 65280) << 8 | (b.b & 16711680) >> 8 | b.b >>> 24); if (32 * g.length >= c) break; g.push((b.a & 255) << 24 | (b.a & 65280) << 8 | (b.a & 16711680) >> 8 | b.a >>> 24); h += 1; 0 === 64 * h % a && D(null, d)
                } return g
            }
        } else throw Error("Chosen SHA variant is not supported"); e = B(f); this.setHMACKey = function (b, a, c) {
            var l; if (!0 === v) throw Error("HMAC key already set"); if (!0 === y) throw Error("Cannot set HMAC key after calling update"); if (!0 === z) throw Error("SHAKE is not supported for HMAC"); g = (c || {}).encoding || "UTF8"; a = J(a, g)(b);
            b = a.binLen; a = a.value; l = m >>> 3; c = l / 4 - 1; if (l < b / 8) { for (a = t(a, b, 0, B(f), h) ; a.length <= c;) a.push(0); a[c] &= 4294967040 } else if (l > b / 8) { for (; a.length <= c;) a.push(0); a[c] &= 4294967040 } for (b = 0; b <= c; b += 1) u[b] = a[b] ^ 909522486, w[b] = a[b] ^ 1549556828; e = r(u, e); d = m; v = !0
        }; this.update = function (b) { var f, c, g, h = 0, q = m >>> 5; f = n(b, a, k); b = f.binLen; c = f.value; f = b >>> 5; for (g = 0; g < f; g += q) h + m <= b && (e = r(c.slice(g, g + q), e), h += m); d += h; a = c.slice(h >>> 5); k = b % m; y = !0 }; this.getHash = function (b, c) {
            var g, m, n, r; if (!0 === v) throw Error("Cannot call getHash after setting HMAC key");
            n = M(c); if (!0 === z) { if (-1 === n.shakeLen) throw Error("shakeLen must be specified in options"); h = n.shakeLen } switch (b) { case "HEX": g = function (b) { return N(b, h, n) }; break; case "B64": g = function (b) { return O(b, h, n) }; break; case "BYTES": g = function (b) { return P(b, h) }; break; case "ARRAYBUFFER": try { m = new ArrayBuffer(0) } catch (sa) { throw Error("ARRAYBUFFER not supported by this environment"); } g = function (b) { return Q(b, h) }; break; default: throw Error("format must be HEX, B64, BYTES, or ARRAYBUFFER"); } r = t(a.slice(), k, d, q(e),
            h); for (m = 1; m < x; m += 1) !0 === z && 0 !== h % 32 && (r[r.length - 1] &= 4294967040 << 24 - h % 32), r = t(r, h, 0, B(f), h); return g(r)
        }; this.getHMAC = function (b, c) {
            var g, n, u, x; if (!1 === v) throw Error("Cannot call getHMAC without first setting HMAC key"); u = M(c); switch (b) {
                case "HEX": g = function (b) { return N(b, h, u) }; break; case "B64": g = function (b) { return O(b, h, u) }; break; case "BYTES": g = function (b) { return P(b, h) }; break; case "ARRAYBUFFER": try { g = new ArrayBuffer(0) } catch (z) { throw Error("ARRAYBUFFER not supported by this environment"); } g = function (b) {
                    return Q(b,
                    h)
                }; break; default: throw Error("outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER");
            } n = t(a.slice(), k, d, q(e), h); x = r(w, B(f)); x = t(n, h, m, x, h); return g(x)
        }
    } function a(f, b) { this.a = f; this.b = b } function Z(f, b, a) {
        var d = f.length, l, k, g, e, n; b = b || [0]; a = a || 0; n = a >>> 3; if (0 !== d % 2) throw Error("String of HEX type must be in byte increments"); for (l = 0; l < d; l += 2) {
            k = parseInt(f.substr(l, 2), 16); if (isNaN(k)) throw Error("String of HEX type contains invalid characters"); e = (l >>> 1) + n; for (g = e >>> 2; b.length <= g;) b.push(0); b[g] |= k <<
            8 * (3 - e % 4)
        } return { value: b, binLen: 4 * d + a }
    } function aa(f, b, a) { var d = [], l, k, g, e, d = b || [0]; a = a || 0; k = a >>> 3; for (l = 0; l < f.length; l += 1) b = f.charCodeAt(l), e = l + k, g = e >>> 2, d.length <= g && d.push(0), d[g] |= b << 8 * (3 - e % 4); return { value: d, binLen: 8 * f.length + a } } function ba(f, b, a) {
        var d = [], l = 0, k, g, e, n, h, m, d = b || [0]; a = a || 0; b = a >>> 3; if (-1 === f.search(/^[a-zA-Z0-9=+\/]+$/)) throw Error("Invalid character in base-64 string"); g = f.indexOf("="); f = f.replace(/\=/g, ""); if (-1 !== g && g < f.length) throw Error("Invalid '=' found in base-64 string");
        for (g = 0; g < f.length; g += 4) { h = f.substr(g, 4); for (e = n = 0; e < h.length; e += 1) k = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(h[e]), n |= k << 18 - 6 * e; for (e = 0; e < h.length - 1; e += 1) { m = l + b; for (k = m >>> 2; d.length <= k;) d.push(0); d[k] |= (n >>> 16 - 8 * e & 255) << 8 * (3 - m % 4); l += 1 } } return { value: d, binLen: 8 * l + a }
    } function ca(a, b, c) { var d = [], l, k, g, d = b || [0]; c = c || 0; l = c >>> 3; for (b = 0; b < a.byteLength; b += 1) g = b + l, k = g >>> 2, d.length <= k && d.push(0), d[k] |= a[b] << 8 * (3 - g % 4); return { value: d, binLen: 8 * a.byteLength + c } } function N(a, b, c) {
        var d =
        ""; b /= 8; var l, k; for (l = 0; l < b; l += 1) k = a[l >>> 2] >>> 8 * (3 - l % 4), d += "0123456789abcdef".charAt(k >>> 4 & 15) + "0123456789abcdef".charAt(k & 15); return c.outputUpper ? d.toUpperCase() : d
    } function O(a, b, c) { var d = "", l = b / 8, k, g, e; for (k = 0; k < l; k += 3) for (g = k + 1 < l ? a[k + 1 >>> 2] : 0, e = k + 2 < l ? a[k + 2 >>> 2] : 0, e = (a[k >>> 2] >>> 8 * (3 - k % 4) & 255) << 16 | (g >>> 8 * (3 - (k + 1) % 4) & 255) << 8 | e >>> 8 * (3 - (k + 2) % 4) & 255, g = 0; 4 > g; g += 1) 8 * k + 6 * g <= b ? d += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e >>> 6 * (3 - g) & 63) : d += c.b64Pad; return d } function P(a,
    b) { var c = "", d = b / 8, l, k; for (l = 0; l < d; l += 1) k = a[l >>> 2] >>> 8 * (3 - l % 4) & 255, c += String.fromCharCode(k); return c } function Q(a, b) { var c = b / 8, d, l = new ArrayBuffer(c); for (d = 0; d < c; d += 1) l[d] = a[d >>> 2] >>> 8 * (3 - d % 4) & 255; return l } function M(a) {
        var b = { outputUpper: !1, b64Pad: "=", shakeLen: -1 }; a = a || {}; b.outputUpper = a.outputUpper || !1; !0 === a.hasOwnProperty("b64Pad") && (b.b64Pad = a.b64Pad); if (!0 === a.hasOwnProperty("shakeLen")) { if (0 !== a.shakeLen % 8) throw Error("shakeLen must be a multiple of 8"); b.shakeLen = a.shakeLen } if ("boolean" !==
        typeof b.outputUpper) throw Error("Invalid outputUpper formatting option"); if ("string" !== typeof b.b64Pad) throw Error("Invalid b64Pad formatting option"); return b
    } function J(a, b) {
        var c; switch (b) { case "UTF8": case "UTF16BE": case "UTF16LE": break; default: throw Error("encoding must be UTF8, UTF16BE, or UTF16LE"); } switch (a) {
            case "HEX": c = Z; break; case "TEXT": c = function (a, f, c) {
                var e = [], p = [], n = 0, h, m, r, t, q, e = f || [0]; f = c || 0; r = f >>> 3; if ("UTF8" === b) for (h = 0; h < a.length; h += 1) for (c = a.charCodeAt(h), p = [], 128 > c ? p.push(c) :
                2048 > c ? (p.push(192 | c >>> 6), p.push(128 | c & 63)) : 55296 > c || 57344 <= c ? p.push(224 | c >>> 12, 128 | c >>> 6 & 63, 128 | c & 63) : (h += 1, c = 65536 + ((c & 1023) << 10 | a.charCodeAt(h) & 1023), p.push(240 | c >>> 18, 128 | c >>> 12 & 63, 128 | c >>> 6 & 63, 128 | c & 63)), m = 0; m < p.length; m += 1) { q = n + r; for (t = q >>> 2; e.length <= t;) e.push(0); e[t] |= p[m] << 8 * (3 - q % 4); n += 1 } else if ("UTF16BE" === b || "UTF16LE" === b) for (h = 0; h < a.length; h += 1) { c = a.charCodeAt(h); "UTF16LE" === b && (m = c & 255, c = m << 8 | c >>> 8); q = n + r; for (t = q >>> 2; e.length <= t;) e.push(0); e[t] |= c << 8 * (2 - q % 4); n += 2 } return {
                    value: e, binLen: 8 *
                    n + f
                }
            }; break; case "B64": c = ba; break; case "BYTES": c = aa; break; case "ARRAYBUFFER": try { c = new ArrayBuffer(0) } catch (d) { throw Error("ARRAYBUFFER not supported by this environment"); } c = ca; break; default: throw Error("format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER");
        } return c
    } function y(a, b) { return a << b | a >>> 32 - b } function R(f, b) { return 32 < b ? (b = b - 32, new a(f.b << b | f.a >>> 32 - b, f.a << b | f.b >>> 32 - b)) : 0 !== b ? new a(f.a << b | f.b >>> 32 - b, f.b << b | f.a >>> 32 - b) : f } function v(a, b) { return a >>> b | a << 32 - b } function w(f, b) {
        var c = null,
        c = new a(f.a, f.b); return c = 32 >= b ? new a(c.a >>> b | c.b << 32 - b & 4294967295, c.b >>> b | c.a << 32 - b & 4294967295) : new a(c.b >>> b - 32 | c.a << 64 - b & 4294967295, c.a >>> b - 32 | c.b << 64 - b & 4294967295)
    } function S(f, b) { var c = null; return c = 32 >= b ? new a(f.a >>> b, f.b >>> b | f.a << 32 - b & 4294967295) : new a(0, f.a >>> b - 32) } function da(a, b, c) { return a & b ^ ~a & c } function ea(f, b, c) { return new a(f.a & b.a ^ ~f.a & c.a, f.b & b.b ^ ~f.b & c.b) } function T(a, b, c) { return a & b ^ a & c ^ b & c } function fa(f, b, c) { return new a(f.a & b.a ^ f.a & c.a ^ b.a & c.a, f.b & b.b ^ f.b & c.b ^ b.b & c.b) } function ga(a) {
        return v(a,
        2) ^ v(a, 13) ^ v(a, 22)
    } function ha(f) { var b = w(f, 28), c = w(f, 34); f = w(f, 39); return new a(b.a ^ c.a ^ f.a, b.b ^ c.b ^ f.b) } function ia(a) { return v(a, 6) ^ v(a, 11) ^ v(a, 25) } function ja(f) { var b = w(f, 14), c = w(f, 18); f = w(f, 41); return new a(b.a ^ c.a ^ f.a, b.b ^ c.b ^ f.b) } function ka(a) { return v(a, 7) ^ v(a, 18) ^ a >>> 3 } function la(f) { var b = w(f, 1), c = w(f, 8); f = S(f, 7); return new a(b.a ^ c.a ^ f.a, b.b ^ c.b ^ f.b) } function ma(a) { return v(a, 17) ^ v(a, 19) ^ a >>> 10 } function na(f) { var b = w(f, 19), c = w(f, 61); f = S(f, 6); return new a(b.a ^ c.a ^ f.a, b.b ^ c.b ^ f.b) } function G(a,
    b) { var c = (a & 65535) + (b & 65535); return ((a >>> 16) + (b >>> 16) + (c >>> 16) & 65535) << 16 | c & 65535 } function oa(a, b, c, d) { var l = (a & 65535) + (b & 65535) + (c & 65535) + (d & 65535); return ((a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) + (l >>> 16) & 65535) << 16 | l & 65535 } function H(a, b, c, d, l) { var e = (a & 65535) + (b & 65535) + (c & 65535) + (d & 65535) + (l & 65535); return ((a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) + (l >>> 16) + (e >>> 16) & 65535) << 16 | e & 65535 } function pa(f, b) {
        var c, d, l; c = (f.b & 65535) + (b.b & 65535); d = (f.b >>> 16) + (b.b >>> 16) + (c >>> 16); l = (d & 65535) << 16 | c & 65535; c = (f.a & 65535) +
        (b.a & 65535) + (d >>> 16); d = (f.a >>> 16) + (b.a >>> 16) + (c >>> 16); return new a((d & 65535) << 16 | c & 65535, l)
    } function qa(f, b, c, d) { var l, e, g; l = (f.b & 65535) + (b.b & 65535) + (c.b & 65535) + (d.b & 65535); e = (f.b >>> 16) + (b.b >>> 16) + (c.b >>> 16) + (d.b >>> 16) + (l >>> 16); g = (e & 65535) << 16 | l & 65535; l = (f.a & 65535) + (b.a & 65535) + (c.a & 65535) + (d.a & 65535) + (e >>> 16); e = (f.a >>> 16) + (b.a >>> 16) + (c.a >>> 16) + (d.a >>> 16) + (l >>> 16); return new a((e & 65535) << 16 | l & 65535, g) } function ra(f, b, c, d, l) {
        var e, g, p; e = (f.b & 65535) + (b.b & 65535) + (c.b & 65535) + (d.b & 65535) + (l.b & 65535); g =
        (f.b >>> 16) + (b.b >>> 16) + (c.b >>> 16) + (d.b >>> 16) + (l.b >>> 16) + (e >>> 16); p = (g & 65535) << 16 | e & 65535; e = (f.a & 65535) + (b.a & 65535) + (c.a & 65535) + (d.a & 65535) + (l.a & 65535) + (g >>> 16); g = (f.a >>> 16) + (b.a >>> 16) + (c.a >>> 16) + (d.a >>> 16) + (l.a >>> 16) + (e >>> 16); return new a((g & 65535) << 16 | e & 65535, p)
    } function A(f) { var b = 0, c = 0, d; for (d = 0; d < arguments.length; d += 1) b ^= arguments[d].b, c ^= arguments[d].a; return new a(c, b) } function B(f) {
        var b = [], c; if ("SHA-1" === f) b = [1732584193, 4023233417, 2562383102, 271733878, 3285377520]; else if (0 === f.lastIndexOf("SHA-",
        0)) switch (b = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428], c = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], f) {
            case "SHA-224": break; case "SHA-256": b = c; break; case "SHA-384": b = [new a(3418070365, b[0]), new a(1654270250, b[1]), new a(2438529370, b[2]), new a(355462360, b[3]), new a(1731405415, b[4]), new a(41048885895, b[5]), new a(3675008525, b[6]), new a(1203062813, b[7])]; break; case "SHA-512": b = [new a(c[0], 4089235720), new a(c[1],
            2227873595), new a(c[2], 4271175723), new a(c[3], 1595750129), new a(c[4], 2917565137), new a(c[5], 725511199), new a(c[6], 4215389547), new a(c[7], 327033209)]; break; default: throw Error("Unknown SHA variant");
        } else if (0 === f.lastIndexOf("SHA3-", 0) || 0 === f.lastIndexOf("SHAKE", 0)) for (f = 0; 5 > f; f += 1) b[f] = [new a(0, 0), new a(0, 0), new a(0, 0), new a(0, 0), new a(0, 0)]; else throw Error("No SHA variants supported"); return b
    } function K(a, b) {
        var c = [], d, e, k, g, p, n, h; d = b[0]; e = b[1]; k = b[2]; g = b[3]; p = b[4]; for (h = 0; 80 > h; h += 1) c[h] = 16 > h ?
        a[h] : y(c[h - 3] ^ c[h - 8] ^ c[h - 14] ^ c[h - 16], 1), n = 20 > h ? H(y(d, 5), e & k ^ ~e & g, p, 1518500249, c[h]) : 40 > h ? H(y(d, 5), e ^ k ^ g, p, 1859775393, c[h]) : 60 > h ? H(y(d, 5), T(e, k, g), p, 2400959708, c[h]) : H(y(d, 5), e ^ k ^ g, p, 3395469782, c[h]), p = g, g = k, k = y(e, 30), e = d, d = n; b[0] = G(d, b[0]); b[1] = G(e, b[1]); b[2] = G(k, b[2]); b[3] = G(g, b[3]); b[4] = G(p, b[4]); return b
    } function Y(a, b, c, d) {
        var e; for (e = (b + 65 >>> 9 << 4) + 15; a.length <= e;) a.push(0); a[b >>> 5] |= 128 << 24 - b % 32; b += c; a[e] = b & 4294967295; a[e - 1] = b / 4294967296 | 0; b = a.length; for (e = 0; e < b; e += 16) d = K(a.slice(e, e + 16), d);
        return d
    } function L(f, b, c) {
        var d, l, k, g, p, n, h, m, r, t, q, v, u, w, x, y, z, F, A, B, C, D, E = [], I; if ("SHA-224" === c || "SHA-256" === c) t = 64, v = 1, D = Number, u = G, w = oa, x = H, y = ka, z = ma, F = ga, A = ia, C = T, B = da, I = e; else if ("SHA-384" === c || "SHA-512" === c) t = 80, v = 2, D = a, u = pa, w = qa, x = ra, y = la, z = na, F = ha, A = ja, C = fa, B = ea, I = U; else throw Error("Unexpected error in SHA-2 implementation"); c = b[0]; d = b[1]; l = b[2]; k = b[3]; g = b[4]; p = b[5]; n = b[6]; h = b[7]; for (q = 0; q < t; q += 1) 16 > q ? (r = q * v, m = f.length <= r ? 0 : f[r], r = f.length <= r + 1 ? 0 : f[r + 1], E[q] = new D(m, r)) : E[q] = w(z(E[q - 2]),
        E[q - 7], y(E[q - 15]), E[q - 16]), m = x(h, A(g), B(g, p, n), I[q], E[q]), r = u(F(c), C(c, d, l)), h = n, n = p, p = g, g = u(k, m), k = l, l = d, d = c, c = u(m, r); b[0] = u(c, b[0]); b[1] = u(d, b[1]); b[2] = u(l, b[2]); b[3] = u(k, b[3]); b[4] = u(g, b[4]); b[5] = u(p, b[5]); b[6] = u(n, b[6]); b[7] = u(h, b[7]); return b
    } function D(f, b) {
        var c, d, e, k, g = [], p = []; if (null !== f) for (d = 0; d < f.length; d += 2) b[(d >>> 1) % 5][(d >>> 1) / 5 | 0] = A(b[(d >>> 1) % 5][(d >>> 1) / 5 | 0], new a((f[d + 1] & 255) << 24 | (f[d + 1] & 65280) << 8 | (f[d + 1] & 16711680) >>> 8 | f[d + 1] >>> 24, (f[d] & 255) << 24 | (f[d] & 65280) << 8 | (f[d] & 16711680) >>> 8 |
        f[d] >>> 24)); for (c = 0; 24 > c; c += 1) { k = B("SHA3-"); for (d = 0; 5 > d; d += 1) g[d] = A(b[d][0], b[d][1], b[d][2], b[d][3], b[d][4]); for (d = 0; 5 > d; d += 1) p[d] = A(g[(d + 4) % 5], R(g[(d + 1) % 5], 1)); for (d = 0; 5 > d; d += 1) for (e = 0; 5 > e; e += 1) b[d][e] = A(b[d][e], p[d]); for (d = 0; 5 > d; d += 1) for (e = 0; 5 > e; e += 1) k[e][(2 * d + 3 * e) % 5] = R(b[d][e], V[d][e]); for (d = 0; 5 > d; d += 1) for (e = 0; 5 > e; e += 1) b[d][e] = A(k[d][e], new a(~k[(d + 1) % 5][e].a & k[(d + 2) % 5][e].a, ~k[(d + 1) % 5][e].b & k[(d + 2) % 5][e].b)); b[0][0] = A(b[0][0], W[c]) } return b
    } var e, U, V, W; e = [1116352408, 1899447441, 3049323471, 3921009573,
    961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556,
    883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]; U = [new a(e[0], 3609767458), new a(e[1], 602891725), new a(e[2], 3964484399), new a(e[3], 2173295548), new a(e[4], 4081628472), new a(e[5], 3053834265), new a(e[6], 2937671579), new a(e[7], 3664609560), new a(e[8], 2734883394), new a(e[9], 1164996542), new a(e[10], 1323610764), new a(e[11], 3590304994), new a(e[12], 4068182383), new a(e[13], 991336113), new a(e[14], 633803317), new a(e[15],
    3479774868), new a(e[16], 2666613458), new a(e[17], 944711139), new a(e[18], 2341262773), new a(e[19], 2007800933), new a(e[20], 1495990901), new a(e[21], 1856431235), new a(e[22], 3175218132), new a(e[23], 2198950837), new a(e[24], 3999719339), new a(e[25], 766784016), new a(e[26], 2566594879), new a(e[27], 3203337956), new a(e[28], 1034457026), new a(e[29], 2466948901), new a(e[30], 3758326383), new a(e[31], 168717936), new a(e[32], 1188179964), new a(e[33], 1546045734), new a(e[34], 1522805485), new a(e[35], 2643833823), new a(e[36],
    2343527390), new a(e[37], 1014477480), new a(e[38], 1206759142), new a(e[39], 344077627), new a(e[40], 1290863460), new a(e[41], 3158454273), new a(e[42], 3505952657), new a(e[43], 106217008), new a(e[44], 3606008344), new a(e[45], 1432725776), new a(e[46], 1467031594), new a(e[47], 851169720), new a(e[48], 3100823752), new a(e[49], 1363258195), new a(e[50], 3750685593), new a(e[51], 3785050280), new a(e[52], 3318307427), new a(e[53], 3812723403), new a(e[54], 2003034995), new a(e[55], 3602036899), new a(e[56], 1575990012), new a(e[57],
    1125592928), new a(e[58], 2716904306), new a(e[59], 442776044), new a(e[60], 593698344), new a(e[61], 3733110249), new a(e[62], 2999351573), new a(e[63], 3815920427), new a(3391569614, 3928383900), new a(3515267271, 566280711), new a(3940187606, 3454069534), new a(4118630271, 4000239992), new a(116418474, 1914138554), new a(174292421, 2731055270), new a(289380356, 3203993006), new a(460393269, 320620315), new a(685471733, 587496836), new a(852142971, 1086792851), new a(1017036298, 365543100), new a(1126000580, 2618297676), new a(1288033470,
    3409855158), new a(1501505948, 4234509866), new a(1607167915, 987167468), new a(1816402316, 1246189591)]; W = [new a(0, 1), new a(0, 32898), new a(2147483648, 32906), new a(2147483648, 2147516416), new a(0, 32907), new a(0, 2147483649), new a(2147483648, 2147516545), new a(2147483648, 32777), new a(0, 138), new a(0, 136), new a(0, 2147516425), new a(0, 2147483658), new a(0, 2147516555), new a(2147483648, 139), new a(2147483648, 32905), new a(2147483648, 32771), new a(2147483648, 32770), new a(2147483648, 128), new a(0, 32778), new a(2147483648,
    2147483658), new a(2147483648, 2147516545), new a(2147483648, 32896), new a(0, 2147483649), new a(2147483648, 2147516424)]; V = [[0, 36, 3, 41, 18], [1, 44, 10, 45, 2], [62, 6, 43, 15, 61], [28, 55, 25, 21, 56], [27, 20, 39, 8, 14]]; "function" === typeof define && define.amd ? define(function () { return C }) : "undefined" !== typeof exports ? ("undefined" !== typeof module && module.exports && (module.exports = C), exports = C) : X.jsSHA = C
})(this);
;
(function () {
    'use strict';
    angular
        .module('CommonModule')
        .directive('idshieldquestionsdirective', idShieldQuestionsDirective);
    idShieldQuestionsDirective.$inject = ["CommonService", "CommonConstants"];

    function idShieldQuestionsDirective(commonService, commonConstants) {
        return {
            restrict: 'EA',
            scope:
            {
                id: '@modalId',
                attrisTouch: '@modalIsTouch'
            },
            template:
                '<div class="row form-item third-party-max-top" ng-repeat="data in UserQuestionList.Questions | limitTo : UserQuestionList.limit">' +
                    '<div ng-class="data.isSelected ? \'third-party-directive-text-align\' : \'\'">' +
                    '<div class="row form-item third-party-max-top">' +
                        '<input type="checkbox" class="col-xs-2 col-sm-2 col-md-2 col-lg-2>" ng-model="data.isSelected" aria-checked="{{data.isSelected}}" id="questionCheckbox{{$index}}" /> ' +
                            '<label id="labelQuestion{{$index}}" class="col-xs-10 col-sm-10 col-md-10 col-lg-10 third-party-directive third-party-QA-label" aria-label="{{data.Text}}" for="questionCheckbox{{$index}}">' +
                                '{{data.Text}}' +
                            '</label>' +
                     '</div>' +
                     '<div class="row form-item">' +
                        '<input autocomplete="off" class="col-xs-10 col-sm-10 col-md-10 col-lg-10 third-party-directive third-party-QA-textbox" ng-class="data.isInvalid?\'third-party-border-error-msg\':\'\'" aria-labelledby="labelQuestion{{$index}}" aria-describedby="errorDiv{{$index}}" ng-show="data.isSelected" maxlength="40" type="text" value="" ng-model="data.input_answer" placeholder="{{data.AnswerFormatId==4?\'MM/DD/YY\':(data.AnswerFormatId==5?\'MM/DD\':(data.AnswerFormatId==6?\'MM/YY\':(data.AnswerFormatId==7?\'HH:MM\':\'\')))}}"/>' +
                        '<span ng-show="data.isSelected" ng-class="data.isInvalid?\'col-xs-10 col-sm-10 col-md-10 col-lg-10 field-validation-error\':\'\'" id="errorLabel{{$index}}"><div aria-live="polite" aria-atomic="true" id="errorDiv{{$index}}">{{data.isInvalid?data.errorMessage:""}}</div> </span>' +
                    '</div>' +
                     '</div>' +
                     '<div class="third-party-directive-clr"></div>' +
                '</div>' +

            '<div class="row form-item third-party-max-top" id="showmorequestions">' +
                    '<p>' +
                        '<a id="showMoreQuestions" class="third-party-directive-show-all-accounts" href="#" ng-click="showMoreQuestions()">Show more questions</a>' +
                    '</p>' +
                '</div>' +
                '<div class="personalInfo-footer">' +
                        '<button id="pi_continue" ng-click="validateQuestionsCount()" class="get-started continue thirt-party-continue-top">Continue</button>' +
                        '<button id="pi_cancel" ng-click="onCancel()" class="get-started continue secondary personalinfo-cancel thirt-party-continue-top">Cancel</button>' +
                    '</div>',

            link: function (scope) {
                var limit = 10;
                scope.isTouch = scope.attrisTouch == "true" ? true : false;
                var answerList = [];
                var headerData = {};
                var requestData = {

                };
                var url = "/api/Auth/v1/EntitlementIDShield/GetSecurityQuestions";
                headerData["Content-Type"] = "application/json";
                commonService.result("POST", url, requestData, headerData)
                    .success(
                    function (response) {
                        if (!angular.isObject(response)) {
                            return false;
                        }
                        scope.UserQuestionList = response;
                        scope.UserQuestionList.limit = 10;
                    })
                    .error(function () {
                    });
            },


            controller: ['$scope', '$timeout', '$state', function ($scope, $timeout, $state) {
                $scope.InvalidError = false;
                $scope.answerList = {
                    isAskMeSelected: false,
                    data: {
                        Questions: []
                    }
                };

                var i;
                $scope.showMoreQuestions = function () {
                    $scope.UserQuestionList.limit = $scope.UserQuestionList.limit + 10;
                    if ($scope.UserQuestionList.limit > 10 && $scope.UserQuestionList.limit < 21) {
                        $timeout(function () {
                            var x = document.getElementById("questionCheckbox10");
                            if (x != null && x != undefined)
                                x.focus();
                        }, 0)
                    }
                    if ($scope.UserQuestionList.Questions.length == $scope.UserQuestionList.limit || $scope.UserQuestionList.limit > 20) {
                        $timeout(function () {
                            var y = document.getElementById("questionCheckbox20");
                            if (y != null && y != undefined)
                                y.focus();
                            document.getElementById("showmorequestions").style.display = "none";
                        }, 500)
                    }
                }
                $scope.onCancel = function () {
                    $scope.$parent.vm.cancelSecurityQuestionsOverlay = true;
                    $scope.$parent.onCancelQ();
                    $scope.setVoiceOverFocus("areyousureheaderid", 500);
                }

                $scope.validateQuestionsCount = function () {
                    $scope.$parent.vm.shieldErrorMessage = false;
                    $scope.$parent.vm.errorMessageEmptyText = false;
                    $scope.$parent.vm.sameErrorMessage = false;
                    $scope.InvalidError = false;
                    var selectedQuestionsCount = 0;
                    $scope.answerList.data.Questions = [];
                    if ($scope.UserQuestionList != "" && $scope.UserQuestionList != null && $scope.UserQuestionList.Questions != null) {
                        for (i = 0; i < $scope.UserQuestionList.Questions.length; i++) {
                            $scope.UserQuestionList.Questions[i].isInvalid = false;
                            if ($scope.UserQuestionList.Questions[i].isSelected) {
                                var idshield_QA = {
                                    questionsId: $scope.UserQuestionList.Questions[i].Id,
                                    questionstext: $scope.UserQuestionList.Questions[i].Text,
                                    answertext: $scope.UserQuestionList.Questions[i].input_answer,
                                    answerformat: $scope.UserQuestionList.Questions[i].answerformat,
                                    isselected: $scope.UserQuestionList.Questions[i].isSelected,
                                    isinvalid: $scope.UserQuestionList.Questions[i].isInvalid

                                };
                                $scope.answerList.data.Questions.push(idshield_QA)
                                selectedQuestionsCount++;
                                $scope.validateInput($scope.UserQuestionList.Questions[i], i);
                            }
                            if (!$scope.UserQuestionList.Questions[i].isSelected) {
                                $scope.UserQuestionList.Questions[i].input_answer = "";
                                $scope.UserQuestionList.Questions[i].isInvalid = false;
                            }
                        }

                    }
                    if (selectedQuestionsCount < 3 || selectedQuestionsCount > 5) {
                        $scope.$parent.vm.shieldErrorMessage = true;
                        if ($scope.isTouch) {
                            $scope.setVoiceOverFocus("shieldErrorMessage", 200);
                        }
                        window.scrollTo(0, 0);
                        return false;
                    }
                    else if ($scope.$parent.vm.errorMessageEmptyText || $scope.InvalidError) {
                        return false;
                    }
                    else {
                        $scope.$parent.vm.shieldErrorMessage = false;
                        $scope.$parent.vm.errorMessageEmptyText = false;
                        $scope.$parent.vm.sameErrorMessage = false;
                        if ($scope.answerList.data.Questions != "" && $scope.answerList.data.Questions != null) {
                            for (var ans = 0; ans < $scope.answerList.data.Questions.length; ans++) {
                                for (var ansx = ans + 1; ansx < $scope.answerList.data.Questions.length; ansx++) {
                                    if ($scope.answerList.data.Questions[ans].answertext.toLowerCase() == $scope.answerList.data.Questions[ansx].answertext.toLowerCase()) {
                                        window.scrollTo(0, 0);
                                        $scope.$parent.vm.sameErrorMessage = true;
                                        if ($scope.isTouch) {
                                            $scope.setVoiceOverFocus("sameErrorMessage", 200);
                                        }
                                        return false;
                                    }
                                }
                            }
                        }
                        commonService.setIdShieldSecurityQuestions($scope.answerList.data.Questions);
                        $state.go("SecurityImage");
                    }
                }

                $scope.validateInput = function (data, index) {
                    if (data.input_answer != null && data.input_answer != "") {
                        var regFormat = "";
                        var erroMsg = "";
                        var isInvalid = false;
                        switch (data.AnswerFormatName) {
                            case "ALPHANUM":
                                regFormat = /^[a-zA-Z0-9.’'\- ]+$/;
                                data.errorMessage = "Please make sure you are entering only numbers, letters or the following special characters: (!@#$%&*-=_+':;<>?.,)";
                                break;
                            case "NUMBER":
                                regFormat = /^[0-9]+$/;
                                data.errorMessage = "Please make sure you are entering only numbers.";
                                break;
                            case "MMYY":
                                regFormat = /^(0?[1-9]|1[012])[/]\d\d$/;
                                data.errorMessage = "Please enter the date in this format: MM/YY.";
                                break;
                            case "DATE6":
                                regFormat = /^(0?[1-9]|1[012])[/](0?[1-9]|[12][0-9]|3[01])[/]\d\d$/;
                                data.errorMessage = "Please enter the date in this format: MM/DD/YY.";
                                break;
                            case "ALPHA":
                                regFormat = /^[A-Za-z]+$/;
                                data.errorMessage = "Please make sure that you are entering only letters. Do not use numbers or special characters, such as & or !";
                                break;
                            case "EMAIL":
                                regFormat = /^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
                                data.errorMessage = "Please enter the Email Address in this format: name@domain.com.";
                                break;
                            case "TIME4":
                                regFormat = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
                                data.errorMessage = "Please enter the time in this format: HH:MM";
                                break;
                            case "PHONE10":
                                regFormat = /^[0-9]{10}$/;
                                data.errorMessage = "Please double-check your 10-digit phone number, and make sure you’re entering only numbers.";
                                break;
                            case "MMDD":
                                regFormat = /^(0?[1-9]|1[012])[/](0?[1-9]|[12][0-9]|3[01])$/;
                                data.errorMessage = "Please enter the date in this format: MM/DD.";
                                break;
                        }
                        if (regFormat == '')
                            data.isInvalid = false;
                        else
                            data.isInvalid = !regFormat.test(data.input_answer);

                        if (data.isInvalid) {
                            $scope.InvalidError = true;
                            if ($scope.isTouch) {
                                var element1 = document.getElementById("errorDiv" + index);
                                element1.removeAttribute('aria-live');
                                element1.removeAttribute('aria-atomic');
                                $scope.setVoiceOverFocus("errorDiv" + index, 200);
                            }
                        }
                    }
                    else {
                        window.scrollTo(0, 0);
                        $scope.$parent.vm.errorMessageEmptyText = true;
                        if ($scope.isTouch) {
                            $scope.setVoiceOverFocus("errorMessageEmptyText", 200);
                        }
                    }
                }

                $scope.setVoiceOverFocus = function (elementSelector, delay) {
                    var _delay = delay ? delay : 0;
                    $timeout(function () {
                        var element = document.getElementById(elementSelector);
                        if (!element) {
                            return;
                        }
                        element.setAttribute('tabindex', '0');
                        element.focus();
                        element.setAttribute('tabindex', '-1');
                    }, _delay);
                }

            }],

        }
    }

})();;
(function () {
    'use strict';
    angular
        .module('CommonModule')
        .directive('idshieldimagesounddirective', idShieldQuestionsDirective);
    idShieldQuestionsDirective.$inject = ["CommonService", "CommonConstants" , '$rootScope'];

    function idShieldQuestionsDirective(commonService, commonConstants, $rootscope) {
        return {
            restrict: 'EA',
            scope:
                {
                    id: '@modalId',
                    rows: '@modalRows',
                    cols: '@modalCols',
                    limit: '@modalLimit',
                    attrisTouch: '@modalIsTouch'
                },
            template:
                '<div tabindex="-1" class="si-imagesound-content">' +
                    '<p aria-label="Choose a picture or sound category" class="welcome-newStyle-p verify-newStyle-p">Choose a picture or sound category.</p>' +
                '</div>' +
                '<div id="divValidationError" aria-label="{{ImageErrorMsg}}" tabindex="-1" class="" ng-if="isImageError">' +
                    '<span id="divValidationOnPhrase" tabindex="-1" class="si_redCheckBold si_errorContainerEnroll" aria-hidden="{{!(isImageError)}}">' +
                        '<span tabindex="-1" aria-hidden="true" class="errorConfirmIcon errorMessageIcon"> </span>' +
                            '{{ImageErrorMsg}}' +
                    '</span>' +
                '</div>' +
                '<div class="form-item si-form-item">' +
                    '<select ng-change="setImageList()" ng-model="selectedCategory" ng-init="selectedCategory = CategoriesList[0]" ng-options="x.Name for x in CategoriesList" class="security_imagesound_select drop-down-arrow-svg" aria-label="Please choose a picture or sound category"></select>' +
                '</div>' +
                '<div class="" ng-if="!isTouch">' +
                    '<span ng-repeat="(ri , rdata ) in rowData" class="si_image_row">' + //ri is alias for $parent.$index
                        '<span ng-repeat="(ci , cdata ) in colData" class="si_image_col">' + //ci is alias for $index
                        /*'<input ng-model="$parent.$parent.selectedImageIndex" name="SI_ImageRadio" class="si_radio" type="radio" value="{{ri * cols + ci }}"/>'+*/
                        '<span tabindex="-1" id="si_image_and_speaker_content_id_{{ri * cols + ci}}" role="image" ng-class="{si_image_span_first : ci == 0 , si_image_span_desktop : ci > 0}" ng-click="playSound(ri * cols + ci,false,$event)">' +
                            '<img tabindex="0" src="{{ImageList[ ri * cols + ci ].ImageUrl}}" ng-click="playSound(ri * cols + ci,false,$event)" id="si_image_id_{{ImageList[  (ri) * cols + ci ].ImageId}}" class="si_image" alt="Image {{ ImageList[  ri * cols + ci ].ImageName}}"  aria-label="Image {{ImageList[  (ri) * cols + ci ].ImageName}}" role="image" />' +
                            '<span tabindex="0" id="id-si-speaker-{{ri * cols + ci}}" ng-click="playSound(ri * cols + ci, true,$event)" ng-if="ImageList[ ri * cols + ci ].HasSoundUrl" class="si_speaker" aria-label="Play sound for image {{ImageList[  (ri) * cols + ci ].ImageName}}"></span>' +
                            '</span> ' +
                        '</span>' +
                    '</span>' +
                '</div>' +
                '<div class="carousel-viewport" ng-if="isTouch">' +
                    '<ul class="carousel-content-area" ng-style="carouselCAStyle" role="list">' +
                        '<li ng-repeat="idata in ImageList" aria-hidden="{{Math.ceil(($index +1) / 2) !== currentPage}}" id="si_image_and_speaker_content_id_{{$index}}" aria-label="Carousel Item {{$index + 1}} Page {{currentPage}}" role="listitem" class="si_image_span" ng-click="playSound($index,false,$event)">' +
                            '<img tabindex="-1" src="{{idata.ImageUrl}}" id="si_image_id_{{idata.ImageId}}" class="si_image" alt="Image {{ idata.ImageName}}"  aria-label="Image {{idata.ImageName}}" role="image" />' +
                            '<span tabindex="-1" id="id-si-speaker-{{$index}}" ng-if="idata.HasSoundUrl" class="si_speaker" aria-label="Play sound for image {{idata.ImageName}}"></span>' +
                        '</li>' +
                    '</ul>' +
                '</div>' +
                '<div class="carousel-indicators" ng-if="isTouch">' +
                    '<ul class="page-list">' +
                        '<li role="button" aria-label="previous page" ng-click="prevPage()" class="nav-buttons left"><svg xmlns="//www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="//www.w3.org/1999/xlink" width="15" height="15" viewBox="3 3 18 18" enable-background="new 3 3 18 18" aria-hidden="true" class="thirdparty-icon-selector-left" focusable="false"><circle cx="12" cy="12" r="9"></circle><polygon points="11.1 15.4 10 14.4 12.4 12 10 9.6 11.1 8.6 14.5 12" fill="#FFF"></polygon></svg></li>' +
                        '<li tabindex="-1" role="button" aria-hidden="true" ng-click="gotoPage(indicator)" ng-repeat="indicator in carouselPages" class="carousel-page" aria-label="page {{indicator}}" ng-class="{highlight: currentPage === indicator}"></li>' +
                        '<li role="button" aria-label="next page" ng-click="nextPage()" class="nav-buttons right"><svg xmlns="//www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="//www.w3.org/1999/xlink" width="15" height="15" viewBox="3 3 18 18" enable-background="new 3 3 18 18" aria-hidden="true" class="thirdparty-icon-selector-left" focusable="false"><circle cx="12" cy="12" r="9"></circle><polygon points="11.1 15.4 10 14.4 12.4 12 10 9.6 11.1 8.6 14.5 12" fill="#FFF"></polygon></svg></li>' +
                    '</ul>' +
                '</div>' +
                '<div tabindex="-1" class="si-imagesound-content">' +
                    '<span tabindex="-1" >Create a phrase to go with your picture or sound.</span>' +
                    '<div class="si_create_phrase">' +
                        '<label for="ImagePhrase" tabindex="-1">Create a phrase</label>' +
                    '</div> ' +
                '</div>' +
                '<span style="" >'+
                    '<span class="right_imageerror">' +
                        '<span ng-if="isPhraseError || isPhraseInvalidError" id="PhraseErrorValidationDiv" aria-label="{{PhraseErrorMsg}}" class="popover-error top fade imagephrase_empty_error personalIdTooltip-position">' +
                            '<div class="arrow"></div>' +
                            '<div class="ng-binding ng-show popover-content">' +
                            '{{PhraseErrorMsg}}' +
                            '</div>' +
                        '</span>' +
                    '</span>' +
                    '<div class="left_imagephrase">' +
                        '<input type="text" name="ImagePhrase" aria-label="Please enter a phrase for the image" ng-model="si_image_phrase_txt" maxlength="50"  ng-blur="validatePhrase()" ng-keydown="phraseKeyDown($event)" ng-class="{phraseerror : (isPhraseError || isPhraseInvalidError ), error_border : (isPhraseError || isPhraseInvalidError )}" class="si_phrase_input" id="si_image_phrase"/>' +
                    '</div>' +
                '</span>' +
                '<div id="si_audio_player" tabindex="-1" style="clear:both">' +
                    '<span ng-if="!canPlayAudio()">'+
                        '<object type="application/x-mplayer2" id="audio_player_object_tag" height="0" width="0" name="sound">' +
                            '<param name="fileName" id="param_audio_file_id" value="">' +
                            '<param name="autostart" value="1">' +
                            '<param name="playcount" value="1">' +
                            '<embed src="" id="player_audio_file_id" autostart="true" hidden="true" type="application/x-mplayer2" width=0 height=0 id="sound1" name="sound1"></embed>' +
                        '</object>' +
                    '</span>'+
                '</div>' +
                '<div id="si_audio_player" tabindex="-1" ng-if="canPlayAudio()">' +
                    '<audio id="canPlay_audio_player" preload="auto"></audio>' +
                '</div>',

            link: function (scope) {
                var limit = 10;
                var headerData = {};
                scope.isTouch = scope.attrisTouch == "true" ? true : false;
                scope.rowData = [];
                scope.colData = [];
                scope.carouselPages = [];
                scope.setRowColForLoop();
                var requestData = {
                };

                if (scope.os_detect() != "Windows") {
                    if (document.getElementById("audio_player_object_tag")) {
                        document.getElementById("audio_player_object_tag").setAttribute("classid", "clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B");
                    }
                    if (document.getElementById("player_audio_file_id")) {
                        document.getElementById("player_audio_file_id").setAttribute("enablejavascript", "true");
                    }
                }

                var urlcategory = "/api/Auth/v1/EntitlementIDShield/GetIdShieldCategories";
                headerData["Content-Type"] = "application/json";
                commonService.result("POST", urlcategory, requestData, headerData)
                    .success(
                    function (response) {
                        //response = { "Categories": [{ "Deprecated": false, "Id": 3, "Name": "Music" }, { "Deprecated": false, "Id": 9, "Name": "Wild Animals" }, { "Deprecated": false, "Id": 7, "Name": "Sports" }, { "Deprecated": false, "Id": 1, "Name": "Baby Animals" }, { "Deprecated": false, "Id": 12, "Name": "Sounds" }, { "Deprecated": false, "Id": 5, "Name": "Pets" }, { "Deprecated": false, "Id": 6, "Name": "Scenery" }, { "Deprecated": false, "Id": 4, "Name": "Nature" }, { "Deprecated": false, "Id": 8, "Name": "Travel" }, { "Deprecated": false, "Id": 2, "Name": "Flowers" }], "StatusCode": 0, "StatusDescription": null, "TransactionGUID": null };
                        if (response.Categories != undefined) {
                            scope.CategoriesList = response.Categories;
                            scope.oldspeaker_id = '';
                            scope.si_image_phrase_txt = '';
                            scope.selectedCategory = scope.CategoriesList[0];//set first item on dropdown as selected
                            scope.getImageList(response.Categories[0].Id);
                        }
                        else
                            scope.setServiceErrorMessage();
                    })
                    .error(function () { scope.setServiceErrorMessage(); });
            },

            controller: ['$scope', '$timeout', '$rootScope', function ($scope, $timeout, $rootscope) {

                $scope.Math = window.Math;
                $scope.PhraseErrorMsg = '';
                $scope.isPhraseError = false;
                $scope.toNextCntrl = false;
                $scope.isPhraseInvalidError = false;
                $scope.isEnter = false;
                $scope.isImageError = false;
                $scope.ImageErrorMsg = '';
                $scope.selectedImageIndex = "-1";
                $scope.serviceIdShiledImageDetails = commonService.getIdShiledImageDetails();
                $scope.currentPage = 1;

                $scope.canPlayAudio = function () {
                    var elem = document.createElement('audio');
                    if (!!elem.canPlayType) {
                        if (elem.canPlayType('audio/wav; codecs="1"').replace(/^no$/, '') != "")
                            return true;
                        else
                            return false;
                    }
                    return false;
                }

                $scope.phraseKeyDown = function ($event) {
                    $scope.isShiftTabkeyDown = false;
                    $scope.toNextCntrl = false;
                    if ($event.shiftKey && $event.keyCode === 9) {
                        $scope.isShiftTabkeyDown = true;
                    }
                    else if ($event.keyCode === 9) {
                        $scope.toNextCntrl = true;
                    }
                }

                $scope.validatePhrase = function () {
                    if ($scope.isEnter == false) {
                        var phrasevalue = $scope.si_image_phrase_txt;
                        if (phrasevalue != undefined && phrasevalue != "" && phrasevalue != null) {
                            if (!isMinMaxLength(phrasevalue, 3, 50) || !isPhraseCheck(phrasevalue)) {
                                $scope.PhraseErrorMsg = commonConstants.ERROR_SI_INVALID_MSG;
                                $scope.isPhraseInvalidError = true;
                                setTimeout(function () {
                                    document.getElementById("PhraseErrorValidationDiv").classList.remove("imagephrase_empty_error");
                                    document.getElementById("PhraseErrorValidationDiv").classList.add("imagephrase_invalid_error");
                                }, 5);
                                
                                if ($scope.toNextCntrl )
                                    setVoiceOverFocusforError("PhraseErrorValidationDiv", 350);
                                return false;
                            }
                        }
                        else {
                            $scope.PhraseErrorMsg = commonConstants.ERROR_SI_EMPTY_PHRASE;
                            $scope.isPhraseError = true;
                            setTimeout(function () {
                                document.getElementById("PhraseErrorValidationDiv").classList.add("imagephrase_empty_error");
                                document.getElementById("PhraseErrorValidationDiv").classList.remove("imagephrase_invalid_error");
                            }, 5);
                            
                            if ($scope.toNextCntrl)
                                setVoiceOverFocusforError("PhraseErrorValidationDiv", 350);
                            return false;
                        }

                        $scope.PhraseErrorMsg = '';
                        $scope.isPhraseError = false;
                        $scope.isPhraseInvalidError = false;

                        $scope.serviceIdShiledImageDetails.phrasetxt = phrasevalue;

                        commonService.setIdShiledImageDetails($scope.serviceIdShiledImageDetails);
                        return true;
                    }
                }

                function setVoiceOverFocusforError(elementSelector, delay) {
                    var _delay = delay ? delay : 0;
                    $timeout(function () {
                        var element = document.getElementById(elementSelector);
                        if (element) {
                            element.setAttribute('tabindex', '0');
                            if ($scope.isTouch) {
                                if (element.blur) { element.blur(); }
                            }
                            $timeout(function () {
                                if ($scope.isTouch) {
                                    //vm.disableAccessibilty(false);
                                }
                                if (element.focus) {
                                    element.focus();
                                    element.setAttribute('tabindex', '-1');
                                }
                            }, _delay);
                        }
                    }, _delay);
                }

                function isMinMaxLength(value, minlen, maxlen) {
                    if (value.length < minlen || value.length > maxlen)
                        return false;
                    else
                        return true;
                }

                function isPhraseCheck(value) {
                    var regex = /^[a-zA-Z0-9 ]+$/;
                    return regex.test(value);
                }

                $scope.setRowColForLoop = function () {
                    var i = 0;
                    if ($scope.rows > 0)
                        for (i = 0; i < $scope.rows; i++) {
                            $scope.rowData.push(i);
                        }

                    if ($scope.cols > 0)
                        for (i = 0; i < $scope.cols; i++) {
                            $scope.colData.push(i);
                        }

                    if ($scope.rows <= 0) {
                        $scope.rows = 1;
                        $scope.rowData = [0];
                    }

                    if ($scope.cols <= 0) {
                        $scope.cols = 1;
                        $scope.colData = [0];
                    }
                }

                $scope.os_detect = function () {
                    var OSName = '';
                    if (navigator.appVersion.indexOf("Win") != -1) OSName = "Windows";
                    if (navigator.appVersion.indexOf("Mac") != -1) OSName = "MacOS";
                    if (navigator.appVersion.indexOf("X11") != -1) OSName = "UNIX";
                    if (navigator.appVersion.indexOf("Linux") != -1) OSName = "Linux";
                    return OSName;
                }

                $scope.oldspeaker_id = '';

                $scope.setImageList = function () {

                    if ($scope.selectedImageIndex != "-1")
                        document.getElementById("si_image_and_speaker_content_id_" + $scope.selectedImageIndex).classList.remove('si_image_selected');

                    $scope.si_image_phrase_txt = '';
                    $scope.isImageError = false;
                    $scope.ImageErrorMsg = '';
                    $scope.isPhraseError = false;
                    $scope.isPhraseInvalidError = false;
                    commonService.resetIdShiledImageDetails();
                    $scope.getImageList($scope.selectedCategory.Id);
                }

                document.getElementById("si_image_phrase")
                    .addEventListener("keyup", function (event) {
                        if (event.keyCode === 13) {
                            event.preventDefault();
                            $scope.isEnter = true;
                            this.blur();
                            var isvalid = $scope.performValidation();
                            if (isvalid)
                                $rootscope.$emit("finishedValidation_service", isvalid);
                            $scope.isEnter = false;
                        }
                    });

                $scope.performValidation = function () {

                    $scope.isImageError = false;
                    $scope.isPhraseError = false;
                    $scope.isPhraseInvalidError = false;
                    $scope.PhraseErrorMsg = '';
                    $scope.ImageErrorMsg = '';

                    $scope.serviceIdShiledImageDetails = commonService.getIdShiledImageDetails();

                    if ($scope.serviceIdShiledImageDetails.imageid == "") {
                        $scope.ImageErrorMsg = commonConstants.ERROR_SI_EMPTY_IMAGE_MSG;
                        $scope.isImageError = true;
                        setVoiceOverFocusforError("divValidationError", 350);
                        window.scrollTo(0, 0);
                        return false;
                    }

                    $scope.isEnter = false;
                    if (!$scope.validatePhrase())
                        return false;

                    return true;
                }

                $scope.validationservice_unbinder = $rootscope.$on("performValidation_service", function () {
                    var isvalid = $scope.performValidation();
                    $rootscope.$emit("finishedValidation_service", isvalid);
                });

                $scope.$on('$destroy', $scope.validationservice_unbinder);

                $scope.setServiceErrorMessage = function () {
                        $rootscope.$emit("setServiceErrorMsg_service");
                 }

                //id - image position index and not imageId
                $scope.playSound = function (id, playSoundAlone, $event) {

                        if ($event != undefined)
                            $event.stopPropagation();

                        if (!playSoundAlone) {
                            if ($scope.selectedImageIndex != "-1") {
                                document.getElementById("si_image_and_speaker_content_id_" + $scope.selectedImageIndex).classList.remove('si_image_selected');
                                document.getElementById("si_image_id_" + $scope.ImageList[$scope.selectedImageIndex].ImageId).classList.remove('si_image_selected_focus');
                            }

                            $scope.selectedImageIndex = id.toString();

                            document.getElementById("si_image_and_speaker_content_id_" + id).classList.add('si_image_selected');
                            document.getElementById("si_image_id_" + $scope.ImageList[id].ImageId).classList.add('si_image_selected_focus');

                            $scope.serviceIdShiledImageDetails.categoryid = $scope.selectedCategory.Id.toString();
                            $scope.serviceIdShiledImageDetails.categoryname = $scope.selectedCategory.Name.toString();
                            $scope.serviceIdShiledImageDetails.imageid = $scope.ImageList[id].ImageId.toString();
                            $scope.serviceIdShiledImageDetails.imageurl = $scope.ImageList[id].ImageUrl.toString();

                            commonService.setIdShiledImageDetails($scope.serviceIdShiledImageDetails);

                            $scope.isImageError = false;
                            $scope.ImageErrorMsg = '';
                        }

                        if ($scope.ImageList[id].HasSoundUrl) {

                            if ($scope.oldspeaker_id != '') {
                                if ($scope.oldTimer != null || $scope.oldTimer != undefined)
                                    clearTimeout($scope.oldTimer);

                                if ($scope.oldspeaker_id != $scope.selectedCategory.Id + "_" + ("id-si-speaker-" + id)) {
                                    var divid = $scope.oldspeaker_id.split("_")[1];
                                    document.getElementById(divid).classList.remove('si_speaker_ani');
                                    document.getElementById(divid).classList.add('si_speaker');
                                }
                            }

                            $scope.oldspeaker_id = $scope.selectedCategory.Id + "_" + ("id-si-speaker-" + id);

                            if ($scope.canPlayAudio()) {
                                var audioElemen = document.getElementById("canPlay_audio_player");
                                audioElemen.setAttribute("src", $scope.ImageList[id].SoundUrl);
                                audioElemen.load();
                                audioElemen.play();
                                document.getElementById("id-si-speaker-" + id).classList.remove('si_speaker');
                                document.getElementById("id-si-speaker-" + id).classList.add('si_speaker_ani');
                                $scope.oldTimer = setTimeout(function () {
                                    document.getElementById("id-si-speaker-" + id).classList.remove('si_speaker_ani');
                                    document.getElementById("id-si-speaker-" + id).classList.add('si_speaker');
                                }, 3000);
                            }
                            else {
                                document.getElementById("param_audio_file_id").setAttribute("value", $scope.ImageList[id].SoundUrl);
                                document.getElementById("player_audio_file_id").setAttribute("src", $scope.ImageList[id].SoundUrl);

                                //change full innerhtml to play audio in IE
                                var audio_content = document.getElementById("si_audio_player").innerHTML;
                                document.getElementById("si_audio_player").innerHTML = '';
                                document.getElementById("si_audio_player").innerHTML = audio_content;

                                //audio starts to play with some delay, so used timeout.
                                setTimeout(function () {
                                    document.getElementById("id-si-speaker-" + id).classList.remove('si_speaker');
                                    document.getElementById("id-si-speaker-" + id).classList.add('si_speaker_ani');
                                }, 1500);

                                $scope.oldTimer = setTimeout(function () {
                                    document.getElementById("id-si-speaker-" + id).classList.remove('si_speaker_ani');
                                    document.getElementById("id-si-speaker-" + id).classList.add('si_speaker');
                                }, 3500);
                            }
                        }
                    }

                $scope.getImageList = function (categoryId) {

                        var headerData = {};
                        headerData["Content-Type"] = "application/json";
                        var requestData = {
                            CategoryId: categoryId
                        };
                        var urlGetImage = "/api/Auth/v1/EntitlementIDShield/GetIDShieldImages";

                        commonService.result("POST", urlGetImage, requestData, headerData)
                            .success(function (data) {
                                if (data != null) {
                                    $scope.ImageList = data.ImageList;
                                    //$scope.ImageList = [{ "ImageId": "15", "ImageName": "thailand01", "ImageUrl": "https://usbank.com/images/eas/ext/thailand01.jpg", "SoundUrl": null, "HasSoundUrl": false }, { "ImageId": "176", "ImageName": "pyramids01", "ImageUrl": "https://usbank.com/images/eas/ext/prymids01.jpg", "SoundUrl": null, "HasSoundUrl": false }, { "ImageId": "169", "ImageName": "city01", "ImageUrl": "https://usbank.com/images/eas/ext/city01.jpg", "SoundUrl": null, "HasSoundUrl": false }, { "ImageId": "175", "ImageName": "london02", "ImageUrl": "https://usbank.com/images/eas/ext/london02.jpg", "SoundUrl": null, "HasSoundUrl": false }, { "ImageId": "22", "ImageName": "africa01", "ImageUrl": "https://usbank.com/images/eas/ext/africa01.jpg", "SoundUrl": null, "HasSoundUrl": false }, { "ImageId": "16", "ImageName": "statue01", "ImageUrl": "https://usbank.com/images/eas/ext/statue01.jpg", "SoundUrl": null, "HasSoundUrl": false }, { "ImageId": "21", "ImageName": "australia01", "ImageUrl": "https://usbank.com/images/eas/ext/australia01.jpg", "SoundUrl": null, "HasSoundUrl": false }, { "ImageId": "18", "ImageName": "newyork01", "ImageUrl": "https://usbank.com/images/eas/ext/newyork01.jpg", "SoundUrl": null, "HasSoundUrl": false }, { "ImageId": "181", "ImageName": "washingtonDC02", "ImageUrl": "https://usbank.com/images/eas/ext/washingtonDC02.jpg", "SoundUrl": null, "HasSoundUrl": false }];
                                    var noOfPages = Math.ceil($scope.ImageList.length / 2);
                                    for (var i = 1; i <= noOfPages; i++) {
                                        $scope.carouselPages.push(i);
                                    }
                                    $scope.carouselCAStyle = {
                                        "width": $scope.carouselPages.length * 345 + "px"
                                    };
                                    $scope.currentPage = 1;
                                    updateStyles($scope.currentPage);
                                }
                            })
                            .error(function () { $scope.setServiceErrorMessage(); });
                    }

                function showPage(page) {
                        var left = (page - 1) * 383;
                        return left;
                    }

                function updateStyles(page) {
                        $scope.carouselCAStyle = {
                            "left": -(showPage(page)) + "px",
                            "width": $scope.carouselPages.length * 345 + "px"
                        };
                    }

                $scope.prevPage = function () {
                        if ($scope.currentPage > 1) {
                            updateStyles(--$scope.currentPage);
                        }
                    }

                $scope.nextPage = function () {
                        if ($scope.currentPage < ($scope.carouselPages.length)) {
                            updateStyles(++$scope.currentPage);
                        }
                    }

                $scope.gotoPage = function (page) {
                        $scope.currentPage = page;
                        updateStyles(page);
                    }

            }],
        }
    }

})();;
